{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 10
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "contracts/launchpad/implementations/LaunchpadImplementation.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solhint-disable func-name-mixedcase\npragma solidity 0.8.23;\n\ncontract LaunchpadImplementation {\n    struct Tuple5648467 {\n        uint256 tokenAmount;\n        uint256 tier;\n        uint256 nonce;\n        uint256 deadline;\n        bytes signature;\n    }\n\n    struct Tuple1652455 {\n        uint256 timestamp;\n        uint256 deadline;\n        bytes signature;\n    }\n\n    struct Tuple6449688 {\n        address owner;\n        address tokenAddress;\n        address paymentTokenAddress;\n        uint256 price;\n        Tuple632674 fundTarget;\n        uint256 maxInvestPerWallet;\n        uint256 startTimestamp;\n        uint256 duration;\n        uint256 tokenCreationDeadline;\n        Tuple0343533 refundInfo;\n        Tuple9075317 idoInfo;\n    }\n\n    struct Tuple632674 {\n        uint256 softCap;\n        uint256 hardCap;\n    }\n\n    struct Tuple0343533 {\n        uint256 penaltyFeePercent;\n        uint256 expireDuration;\n    }\n\n    struct Tuple9075317 {\n        bool enabled;\n        address dexRouter;\n        address pairToken;\n        uint256 price;\n        uint256 amountToList;\n    }\n\n    struct Tuple5806339 {\n        uint256 purchasedTokenAmount;\n        uint256 claimedTokenAmount;\n        uint256 paidTokenAmount;\n    }\n\n    struct Tuple3789929 {\n        uint256 timestamp;\n        uint256 percent;\n        bool isVesting;\n    }\n\n    struct Tuple7459929 {\n        uint256 timestamp;\n        uint256 percent;\n        bool isVesting;\n    }\n\n    struct Tuple1236461 {\n        address facetAddress;\n        bytes4[] functionSelectors;\n    }\n\n    function buyTokens(uint256 tokenAmount) external payable {}\n\n    function buyTokensWithSupercharger(Tuple5648467 memory input) external payable {}\n\n    function checkSignature(address wallet, uint256 tier, uint256 nonce, uint256 deadline, bytes memory signature) external view {}\n\n    function checkSignatureForCrossPayment(address wallet, uint256 amount, uint256 sourceChainId, uint256 paymentIndex, bytes memory signature) external view {}\n\n    function checkSignatureForRefund(address wallet, uint256 amount, bytes memory signature) external view {}\n\n    function claimTokens() external {}\n\n    function claimTokensWithSupercharger(Tuple1652455 memory input) external {}\n\n    function getAllInvestors() external view returns (address[] memory) {}\n\n    function getCurrentTier() external view returns (uint256) {}\n\n    function getFeeShare() external view returns (uint256) {}\n\n    function getHardCapPerTier(uint256 tier) external view returns (uint256) {}\n\n    function getInvestorAddressByIndex(uint256 index) external view returns (address) {}\n\n    function getInvestorsLength() external view returns (uint256) {}\n\n    function getInvestorsRefundedCount() external view returns (uint256) {}\n\n    function getLaunchPadAddress() external view returns (address) {}\n\n    function getLaunchPadInfo() external view returns (Tuple6449688 memory) {}\n\n    function getMaxInvestPerWalletPerTier(uint256 tier) external view returns (uint256) {}\n\n    function getMaxInvestorsToRefund() external view returns (uint256) {}\n\n    function getNextNonce(address user) external view returns (uint256) {}\n\n    function getProjectOwnerRole() external pure returns (bytes32) {}\n\n    function getPurchasedInfoByUser(address user) external view returns (Tuple5806339 memory) {}\n\n    function getReleaseSchedule() external view returns (Tuple3789929[] memory) {}\n\n    function getReleasedTokensPercentage() external view returns (uint256 releasedPerc) {}\n\n    function getRemainingInvestorsToRefund() external view returns (uint256) {}\n\n    function getTokenCreationDeadline() external view returns (uint256) {}\n\n    function getTokensAvailableToBeClaimed(address user) external view returns (uint256) {}\n\n    function getTotalRaised() external view returns (uint256) {}\n\n    function isSuperchargerEnabled() external view returns (bool) {}\n\n    function paused() external view returns (bool status) {}\n\n    function processRefund(address user, uint256 tokenAmount, bytes memory signature) external {}\n\n    function processRefundOnSoftCapFailure(address user, bytes memory signature) external {}\n\n    function processRefundOnTokenCreationExpired(address user, uint256 tokenAmount, bytes memory signature) external {}\n\n    function recoverSigner(bytes32 message, bytes memory signature) external pure returns (address) {}\n\n    function refund(uint256 tokenAmount) external {}\n\n    function refundAllInvestors() external {}\n\n    function refundOnSoftCapFailure() external {}\n\n    function refundOnTokenCreationExpired(uint256 tokenAmount) external {}\n\n    function refundOnUnstakedDuringSales(Tuple1652455 memory input) external {}\n\n    function reserveTokens(address user, uint256 tokenAmount, uint256 sourceChainId, uint256 paymentIndex, bytes memory signature) external {}\n\n    function setMaxInvestorsToRefund(uint256 maxInvestorsUpdate) external {}\n\n    function tokenDecimals() external view returns (uint256) {}\n\n    function totalTokensClaimed() external view returns (uint256) {}\n\n    function totalTokensSold() external view returns (uint256) {}\n\n    function extendDuration(uint256 durationIncrease) external {}\n\n    function setSupercharger(bool enabled) external {}\n\n    function setTokenAddress(address tokenAddress) external {}\n\n    function updateReleaseSchedule(Tuple7459929[] memory releaseSchedule) external {}\n\n    function updateStartTimestamp(uint256 newStartTimestamp) external {}\n\n    function withdrawFees() external {}\n\n    function withdrawTokens(address tokenAddress) external {}\n\n    function withdrawTokensToRecipient(address tokenAddress, address recipient) external {}\n\n    function DEFAULT_ADMIN_ROLE() external pure returns (bytes32) {}\n\n    function MINTER_ROLE() external pure returns (bytes32) {}\n\n    function PAUSER_ROLE() external pure returns (bytes32) {}\n\n    function WHITELISTED_ROLE() external pure returns (bytes32) {}\n\n    function WHITELIST_ADMIN_ROLE() external pure returns (bytes32) {}\n\n    function getRoleAdmin(bytes32 role) external view returns (bytes32) {}\n\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address) {}\n\n    function getRoleMemberCount(bytes32 role) external view returns (uint256) {}\n\n    function grantRole(bytes32 role, address account) external {}\n\n    function hasRole(bytes32 role, address account) external view returns (bool) {}\n\n    function renounceRole(bytes32 role) external {}\n\n    function revokeRole(bytes32 role, address account) external {}\n\n    function pause() external {}\n\n    function unpause() external {}\n\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_) {}\n\n    function facetAddresses() external view returns (address[] memory facetAddresses_) {}\n\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_) {}\n\n    function facets() external view returns (Tuple1236461[] memory facets_) {}\n\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {}\n\n    function implementation() external view returns (address) {}\n\n    function setImplementation(address _implementation) external {}\n}\n"
    }
  }
}}