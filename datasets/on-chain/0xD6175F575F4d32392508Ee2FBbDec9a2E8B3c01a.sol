{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "contracts/accessControl/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"./EnumerableSet.sol\";\nimport \"./Address.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}"
    },
    "contracts/accessControl/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"
    },
    "contracts/accessControl/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"
    },
    "contracts/accessControl/ERC165A.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165A {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}"
    },
    "contracts/accessControl/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}"
    },
    "contracts/dao/StorageStateCommittee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// import { IStorageStateCommittee } from \"./interfaces/IStorageStateCommittee.sol\";\nimport { ICandidateFactory } from \"./interfaces/ICandidateFactory.sol\";\nimport { ILayer2Registry } from \"./interfaces/ILayer2Registry.sol\";\nimport { ISeigManager } from \"./interfaces/ISeigManager.sol\";\nimport { IDAOAgendaManager } from \"./interfaces/IDAOAgendaManager.sol\";\nimport { IDAOVault } from \"./interfaces/IDAOVault.sol\";\nimport { ICandidate } from \"./interfaces/ICandidate.sol\";\n\ncontract StorageStateCommittee  {\n    enum AgendaStatus { NONE, NOTICE, VOTING, EXEC, ENDED, PENDING, RISK }\n    enum AgendaResult { UNDEFINED, ACCEPT, REJECT, DISMISS }\n    struct CandidateInfo {\n        address candidateContract;\n        uint256 indexMembers;\n        uint128 memberJoinedTime;\n        uint128 rewardPeriod;\n        uint128 claimedTimestamp;\n    }\n\n    address public ton;\n    IDAOVault public daoVault;\n    IDAOAgendaManager public agendaManager;\n    ICandidateFactory public candidateFactory;\n    ILayer2Registry public layer2Registry;\n    ISeigManager public seigManager;\n\n    address[] public candidates;\n    address[] public members;\n    uint256 public maxMember;\n\n    // candidate EOA => candidate information\n    mapping(address => CandidateInfo) internal _candidateInfos;\n    uint256 public quorum;\n\n    uint256 public activityRewardPerSecond;\n\n    modifier validAgendaManager() {\n        require(address(agendaManager) != address(0), \"StorageStateCommittee: AgendaManager is zero\");\n        _;\n    }\n\n    modifier validCommitteeL2Factory() {\n        require(address(candidateFactory) != address(0), \"StorageStateCommittee: invalid CommitteeL2Factory\");\n        _;\n    }\n\n    modifier validLayer2Registry() {\n        require(address(layer2Registry) != address(0), \"StorageStateCommittee: invalid Layer2Registry\");\n        _;\n    }\n\n    modifier validSeigManager() {\n        require(address(seigManager) != address(0), \"StorageStateCommittee: invalid SeigManagere\");\n        _;\n    }\n\n    modifier onlyMember() {\n        require(isMember(msg.sender), \"StorageStateCommittee: not a member\");\n        _;\n    }\n\n    modifier onlyMemberContract() {\n        address candidate = ICandidate(msg.sender).candidate();\n        require(isMember(candidate), \"StorageStateCommittee: not a member\");\n        _;\n    }\n\n    function isMember(address _candidate) public view returns (bool) {\n        return _candidateInfos[_candidate].memberJoinedTime > 0;\n    }\n\n    function candidateContract(address _candidate) public view returns (address) {\n        return _candidateInfos[_candidate].candidateContract;\n    }\n\n    function candidateInfos(address _candidate) external view returns (CandidateInfo memory) {\n        return _candidateInfos[_candidate];\n    }\n\n    /*function getCandidate() public view returns (address) {\n        ILayer2(_candidateContract).\n    }*/\n}\n"
    },
    "contracts/dao/interfaces/ICandidate.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface ICandidate {\n    function setSeigManager(address _seigMan) external;\n    function setCommittee(address _committee) external;\n    function updateSeigniorage() external returns (bool);\n    function changeMember(uint256 _memberIndex) external returns (bool);\n    function retireMember() external returns (bool);\n    function castVote(uint256 _agendaID, uint256 _vote, string calldata _comment) external;\n    function isCandidateContract() external view returns (bool);\n    function totalStaked() external view returns (uint256 totalsupply);\n    function stakedOf(address _account) external view returns (uint256 amount);\n    function setMemo(string calldata _memo) external;\n    function claimActivityReward() external;\n\n    // getter\n    function candidate() external view returns (address);\n    function isLayer2Candidate() external view returns (bool);\n    function memo() external view returns (string memory);\n    function committee() external view returns (address);\n    function seigManager() external view returns (address);\n}\n"
    },
    "contracts/dao/interfaces/ICandidateFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface ICandidateFactory {\n    function deploy(\n        address _candidate,\n        bool _isLayer2Candidate,\n        string memory _name,\n        address _committee,\n        address _seigManager\n    )\n        external\n        returns (address);\n}\n"
    },
    "contracts/dao/interfaces/IDAOAgendaManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport { LibAgenda } from \"../lib/Agenda.sol\";\nimport { IDAOCommittee } from \"../interfaces/IDAOCommittee.sol\";\n\ninterface IDAOAgendaManager  {\n    struct Ratio {\n        uint256 numerator;\n        uint256 denominator;\n    }\n\n    function setCommittee(address _committee) external;\n    function setCreateAgendaFees(uint256 _createAgendaFees) external;\n    function setMinimumNoticePeriodSeconds(uint256 _minimumNoticePeriodSeconds) external;\n    function setMinimumVotingPeriodSeconds(uint256 _minimumVotingPeriodSeconds) external;\n    function setExecutingPeriodSeconds(uint256 _executingPeriodSeconds) external;\n    function newAgenda(\n        address[] memory _targets,\n        uint256 _noticePeriodSeconds,\n        uint256 _votingPeriodSeconds,\n        bool _atomicExecute,\n        bytes[] calldata _functionBytecodes\n    )\n        external\n        returns (uint256 agendaID);\n    function castVote(uint256 _agendaID, address voter, uint256 _vote) external returns (bool);\n    function setExecutedAgenda(uint256 _agendaID) external;\n    function setResult(uint256 _agendaID, LibAgenda.AgendaResult _result) external;\n    function setStatus(uint256 _agendaID, LibAgenda.AgendaStatus _status) external;\n    function endAgendaVoting(uint256 _agendaID) external;\n    function setExecutedCount(uint256 _agendaID, uint256 _count) external;\n\n    // -- view functions\n    function isVoter(uint256 _agendaID, address _user) external view returns (bool);\n    function hasVoted(uint256 _agendaID, address _user) external view returns (bool);\n    function getVoteStatus(uint256 _agendaID, address _user) external view returns (bool, uint256);\n    function getAgendaNoticeEndTimeSeconds(uint256 _agendaID) external view returns (uint256);\n    function getAgendaVotingStartTimeSeconds(uint256 _agendaID) external view returns (uint256);\n    function getAgendaVotingEndTimeSeconds(uint256 _agendaID) external view returns (uint256) ;\n\n    function canExecuteAgenda(uint256 _agendaID) external view returns (bool);\n    function getAgendaStatus(uint256 _agendaID) external view returns (uint256 status);\n    function totalAgendas() external view returns (uint256);\n    function getAgendaResult(uint256 _agendaID) external view returns (uint256 result, bool executed);\n    function getExecutionInfo(uint256 _agendaID)\n        external\n        view\n        returns(\n            address[] memory target,\n            bytes[] memory functionBytecode,\n            bool atomicExecute,\n            uint256 executeStartFrom\n        );\n    function isVotableStatus(uint256 _agendaID) external view returns (bool);\n    function getVotingCount(uint256 _agendaID)\n        external\n        view\n        returns (\n            uint256 countingYes,\n            uint256 countingNo,\n            uint256 countingAbstain\n        );\n    function getAgendaTimestamps(uint256 _agendaID)\n        external\n        view\n        returns (\n            uint256 createdTimestamp,\n            uint256 noticeEndTimestamp,\n            uint256 votingStartedTimestamp,\n            uint256 votingEndTimestamp,\n            uint256 executedTimestamp\n        );\n    function numAgendas() external view returns (uint256);\n    function getVoters(uint256 _agendaID) external view returns (address[] memory);\n\n    function getStatus(uint256 _createAgendaFees) external pure returns (LibAgenda.AgendaStatus);\n\n    // getter\n    function committee() external view returns (IDAOCommittee);\n    function createAgendaFees() external view returns (uint256);\n    function minimumNoticePeriodSeconds() external view returns (uint256);\n    function minimumVotingPeriodSeconds() external view returns (uint256);\n    function executingPeriodSeconds() external view returns (uint256);\n    function agendas(uint256 _index) external view returns (LibAgenda.Agenda memory);\n    function voterInfos(uint256 _index1, address _index2) external view returns (LibAgenda.Voter memory);\n}\n"
    },
    "contracts/dao/interfaces/IDAOCommittee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport { IStorageStateCommittee } from \"./IStorageStateCommittee.sol\";\n\ninterface IDAOCommittee is IStorageStateCommittee {\n    //--owner\n    function setSeigManager(address _seigManager) external;\n    function setCandidatesSeigManager(address[] calldata _candidateContracts, address _seigManager) external;\n    function setCandidatesCommittee(address[] calldata _candidateContracts, address _committee) external;\n    function setLayer2Registry(address _layer2Registry) external;\n    function setAgendaManager(address _agendaManager) external;\n    function setCandidateFactory(address _candidateFactory) external;\n    function setTon(address _ton) external;\n    function setActivityRewardPerSecond(uint256 _value) external;\n    function setDaoVault(address _daoVault) external;\n\n    function increaseMaxMember(uint256 _newMaxMember, uint256 _quorum) external;\n    function decreaseMaxMember(uint256 _reducingMemberIndex, uint256 _quorum) external;\n    function createCandidate(string calldata _memo) external;\n    function registerLayer2Candidate(address _layer2, string memory _memo) external;\n    function registerLayer2CandidateByOwner(address _operator, address _layer2, string memory _memo) external;\n    function changeMember(uint256 _memberIndex) external returns (bool);\n    function retireMember() external returns (bool);\n    function setMemoOnCandidate(address _candidate, string calldata _memo) external;\n    function setMemoOnCandidateContract(address _candidate, string calldata _memo) external;\n\n    function onApprove(\n        address owner,\n        address spender,\n        uint256 tonAmount,\n        bytes calldata data\n    )\n        external\n        returns (bool);\n\n    function setQuorum(uint256 _quorum) external;\n    function setCreateAgendaFees(uint256 _fees) external;\n    function setMinimumNoticePeriodSeconds(uint256 _minimumNoticePeriod) external;\n    function setMinimumVotingPeriodSeconds(uint256 _minimumVotingPeriod) external;\n    function setExecutingPeriodSeconds(uint256 _executingPeriodSeconds) external;\n    function castVote(uint256 _AgendaID, uint256 _vote, string calldata _comment) external;\n    function endAgendaVoting(uint256 _agendaID) external;\n    function executeAgenda(uint256 _AgendaID) external;\n    function setAgendaStatus(uint256 _agendaID, uint256 _status, uint256 _result) external;\n\n    function updateSeigniorage(address _candidate) external returns (bool);\n    function updateSeigniorages(address[] calldata _candidates) external returns (bool);\n    function claimActivityReward(address _receiver) external;\n\n    function isCandidate(address _candidate) external view returns (bool);\n    function totalSupplyOnCandidate(address _candidate) external view returns (uint256);\n    function balanceOfOnCandidate(address _candidate, address _account) external view returns (uint256);\n    function totalSupplyOnCandidateContract(address _candidateContract) external view returns (uint256);\n    function balanceOfOnCandidateContract(address _candidateContract, address _account) external view returns (uint256);\n    function candidatesLength() external view returns (uint256);\n    function isExistCandidate(address _candidate) external view returns (bool);\n    function getClaimableActivityReward(address _candidate) external view returns (uint256);\n}\n\n"
    },
    "contracts/dao/interfaces/IDAOVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IDAOVault {\n    function setTON(address _ton) external;\n    function setWTON(address _wton) external;\n    function approveTON(address _to, uint256 _amount) external;\n    function approveWTON(address _to, uint256 _amount) external;\n    function approveERC20(address _token, address _to, uint256 _amount) external;\n    function claimTON(address _to, uint256 _amount) external;\n    function claimWTON(address _to, uint256 _amount) external;\n    function claimERC20(address _token, address _to, uint256 _amount) external;\n}\n"
    },
    "contracts/dao/interfaces/ILayer2Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface ILayer2Registry {\n    function layer2s(address layer2) external view returns (bool);\n\n    function register(address layer2) external returns (bool);\n    function numLayer2s() external view returns (uint256);\n    function layer2ByIndex(uint256 index) external view returns (address);\n\n    function deployCoinage(address layer2, address seigManager) external returns (bool);\n    function registerAndDeployCoinage(address layer2, address seigManager) external returns (bool);\n    function unregister(address layer2) external returns (bool);\n}\n"
    },
    "contracts/dao/interfaces/ISeigManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface ISeigManager {\n    function registry() external view returns (address);\n    function depositManager() external view returns (address);\n    function ton() external view returns (address);\n    function wton() external view returns (address);\n    function powerton() external view returns (address);\n    function tot() external view returns (address);\n    function coinages(address layer2) external view returns (address);\n    function commissionRates(address layer2) external view returns (uint256);\n\n    function lastCommitBlock(address layer2) external view returns (uint256);\n    function seigPerBlock() external view returns (uint256);\n    function lastSeigBlock() external view returns (uint256);\n    function pausedBlock() external view returns (uint256);\n    function unpausedBlock() external view returns (uint256);\n    function DEFAULT_FACTOR() external view returns (uint256);\n\n    function deployCoinage(address layer2) external returns (bool);\n    function setCommissionRate(address layer2, uint256 commission, bool isCommissionRateNegative) external returns (bool);\n\n    function uncomittedStakeOf(address layer2, address account) external view returns (uint256);\n    function stakeOf(address layer2, address account) external view returns (uint256);\n    function additionalTotBurnAmount(address layer2, address account, uint256 amount) external view returns (uint256 totAmount);\n\n    function onTransfer(address sender, address recipient, uint256 amount) external returns (bool);\n    function updateSeigniorage() external returns (bool);\n    function onDeposit(address layer2, address account, uint256 amount) external returns (bool);\n    function onWithdraw(address layer2, address account, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/dao/interfaces/IStorageStateCommittee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport { ICandidateFactory } from \"../interfaces/ICandidateFactory.sol\";\nimport { ILayer2Registry } from \"../interfaces/ILayer2Registry.sol\";\nimport { ISeigManager } from \"../interfaces/ISeigManager.sol\";\nimport { IDAOAgendaManager } from \"../interfaces/IDAOAgendaManager.sol\";\nimport { IDAOVault } from \"../interfaces/IDAOVault.sol\";\n\ninterface IStorageStateCommittee {\n    struct CandidateInfo {\n        address candidateContract;\n        uint256 indexMembers;\n        uint128 memberJoinedTime;\n        uint128 rewardPeriod;\n        uint128 claimedTimestamp;\n    }\n\n    function ton() external returns (address);\n    function daoVault() external returns (IDAOVault);\n    function agendaManager() external returns (IDAOAgendaManager);\n    function candidateFactory() external returns (ICandidateFactory);\n    function layer2Registry() external returns (ILayer2Registry);\n    function seigManager() external returns (ISeigManager);\n    function candidates(uint256 _index) external returns (address);\n    function members(uint256 _index) external returns (address);\n    function maxMember() external returns (uint256);\n    function candidateInfos(address _candidate) external returns (CandidateInfo memory);\n    function quorum() external returns (uint256);\n    function activityRewardPerSecond() external returns (uint256);\n\n    function isMember(address _candidate) external returns (bool);\n    function candidateContract(address _candidate) external returns (address);\n}\n\n\n"
    },
    "contracts/dao/lib/Agenda.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nlibrary LibAgenda {\n    //using LibAgenda for Agenda;\n\n    enum AgendaStatus { NONE, NOTICE, VOTING, WAITING_EXEC, EXECUTED, ENDED }\n    enum AgendaResult { PENDING, ACCEPT, REJECT, DISMISS }\n\n    //votor : based operator\n    struct Voter {\n        bool isVoter;\n        bool hasVoted;\n        uint256 vote;\n    }\n\n    // counting abstainVotes yesVotes noVotes\n    struct Agenda {\n        uint256 createdTimestamp;\n        uint256 noticeEndTimestamp;\n        uint256 votingPeriodInSeconds;\n        uint256 votingStartedTimestamp;\n        uint256 votingEndTimestamp;\n        uint256 executableLimitTimestamp;\n        uint256 executedTimestamp;\n        uint256 countingYes;\n        uint256 countingNo;\n        uint256 countingAbstain;\n        AgendaStatus status;\n        AgendaResult result;\n        address[] voters;\n        bool executed;\n    }\n\n    struct AgendaExecutionInfo {\n        address[] targets;\n        bytes[] functionBytecodes;\n        bool atomicExecute;\n        uint256 executeStartFrom;\n    }\n\n    /*function getAgenda(Agenda[] storage agendas, uint256 index) public view returns (Agenda storage agenda) {\n        return agendas[index];\n    }*/\n}\n"
    },
    "contracts/interfaces/IProxyAction2.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n\n/// @title IProxyAction\ninterface IProxyAction2 {\n\n    /// @dev set the implementation address and status of the proxy[index]\n    /// @param newImplementation Address of the new implementation.\n    /// @param _index index\n    /// @param _alive _alive\n    function setImplementation2(\n        address newImplementation,\n        uint256 _index,\n        bool _alive\n    ) external;\n\n\n    /// @dev set alive status of implementation\n    /// @param newImplementation Address of the new implementation.\n    /// @param _alive alive status\n    function setAliveImplementation2(address newImplementation, bool _alive)\n        external;\n\n\n    /// @dev set selectors of Implementation\n    /// @param _selectors being added selectors\n    /// @param _imp implementation address\n    function setSelectorImplementations2(\n        bytes4[] calldata _selectors,\n        address _imp\n    ) external  ;\n\n\n    /// anybody\n\n    /// @dev view implementation address of selector of function\n    /// @param _selector selector of function\n    /// @return impl address of the implementation\n    function getSelectorImplementation2(bytes4 _selector)\n        external\n        view\n        returns (address impl);\n\n\n    /// @dev view implementation address of the proxy[index]\n    /// @param _index index of proxy\n    /// @return address of the implementation\n    function implementation2(uint256 _index) external view returns (address) ;\n}\n\n"
    },
    "contracts/interfaces/IProxyEvent.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n\n/// @title IProxyEvent\ninterface IProxyEvent {\n\n    event Upgraded(address indexed implementation);\n\n    event SetAliveImplementation(address indexed impl, bool alive);\n    event SetSelectorImplementation(bytes4 indexed selector, address indexed impl);\n\n\n}\n"
    },
    "contracts/proxy/DAOCommitteeProxy2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport '../dao/StorageStateCommittee.sol';\nimport {AccessControl} from '../accessControl/AccessControl.sol';\nimport {ERC165A} from '../accessControl/ERC165A.sol';\nimport './ProxyStorage2.sol';\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\n\nimport '../interfaces/IProxyEvent.sol';\nimport '../interfaces/IProxyAction2.sol';\n\ncontract DAOCommitteeProxy2 is\n    StorageStateCommittee,\n    AccessControl,\n    ERC165A,\n    ProxyStorage2,\n    IProxyEvent,\n    IProxyAction2\n{\n    address internal _implementation;\n    bool public pauseProxy;\n\n    modifier onlyOwner2() {\n        // console.log(\"msg.sedner :\", msg.sender);\n        // console.logBytes32(DEFAULT_ADMIN_ROLE);\n        // console.logBool(hasRole(DEFAULT_ADMIN_ROLE, msg.sender));\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\n            'DAOCommitteeProxy2: msg.sender is not an admin'\n        );\n        _;\n    }\n\n    /* ========== onlyOwner ========== */\n\n    /// @notice Set implementation contract\n    /// @param impl New implementation contract address\n    function upgradeTo2(address impl) external onlyOwner2 {\n        require(impl != address(0), 'input is zero');\n        require(_implementation2(0) != impl, 'same addr');\n        _setImplementation2(impl, 0, true);\n        emit Upgraded(impl);\n    }\n\n    /// @inheritdoc IProxyAction2\n    function setImplementation2(\n        address newImplementation,\n        uint256 _index,\n        bool _alive\n    ) external override onlyOwner2 {\n        _setImplementation2(newImplementation, _index, _alive);\n    }\n\n    /// @inheritdoc IProxyAction2\n    function setAliveImplementation2(\n        address newImplementation,\n        bool _alive\n    ) public override onlyOwner2 {\n        _setAliveImplementation2(newImplementation, _alive);\n    }\n\n    /// @inheritdoc IProxyAction2\n    function setSelectorImplementations2(\n        bytes4[] calldata _selectors,\n        address _imp\n    ) public override onlyOwner2 {\n        require(_selectors.length > 0, \"Proxy: _selectors's size is zero\");\n        require(aliveImplementation[_imp], 'Proxy: _imp is not alive');\n\n        for (uint256 i = 0; i < _selectors.length; i++) {\n            require(selectorImplementation[_selectors[i]] != _imp, 'Proxy: same imp');\n            selectorImplementation[_selectors[i]] = _imp;\n            emit SetSelectorImplementation(_selectors[i], _imp);\n        }\n    }\n\n    /* ========== Anyone can   ========== */\n\n    /* ========== VIEW ========== */\n\n    /// @dev returns the implementation\n    function implementation() external view returns (address) {\n        return _implementation2(0);\n    }\n\n    /// @inheritdoc IProxyAction2\n    function implementation2(uint256 _index) external view override returns (address) {\n        return _implementation2(_index);\n    }\n\n    /// @inheritdoc IProxyAction2\n    function getSelectorImplementation2(\n        bytes4 _selector\n    ) public view override returns (address impl) {\n        if (selectorImplementation[_selector] == address(0)) return proxyImplementation[0];\n        else if (aliveImplementation[selectorImplementation[_selector]]) {\n            return selectorImplementation[_selector];\n        } else return proxyImplementation[0];\n    }\n\n    /// @dev receive ether\n    receive() external payable {\n        revert('cannot receive Ether');\n    }\n\n    /// @dev fallback function , execute on undefined function call\n    fallback() external payable {\n        _fallback();\n    }\n\n    /* === ======= internal ========== */\n\n    /// @dev view implementation address of the proxy[index]\n    /// @param _index index of proxy\n    /// @return impl address of the implementation\n    function _implementation2(uint256 _index) internal view returns (address impl) {\n        return proxyImplementation[_index];\n    }\n\n    /// @dev fallback function , execute on undefined function call\n    function _fallback() internal {\n        address _impl = getSelectorImplementation2(msg.sig);\n\n        require(_impl != address(0) && !pauseProxy, 'Proxy: impl OR proxy is false');\n\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), _impl, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /// @dev set the implementation address and status of the proxy[index]\n    /// @param newImplementation Address of the new implementation.\n    /// @param _index index of proxy\n    /// @param _alive alive status\n    function _setImplementation2(address newImplementation, uint256 _index, bool _alive) internal {\n        require(Address.isContract(newImplementation), 'Proxy: not contract address');\n        if (_alive) proxyImplementation[_index] = newImplementation;\n        _setAliveImplementation2(newImplementation, _alive);\n    }\n\n    /// @dev set alive status of implementation\n    /// @param newImplementation Address of the new implementation.\n    /// @param _alive alive status\n    function _setAliveImplementation2(address newImplementation, bool _alive) internal {\n        aliveImplementation[newImplementation] = _alive;\n        emit SetAliveImplementation(newImplementation, _alive);\n    }\n}\n"
    },
    "contracts/proxy/ProxyStorage2.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\ncontract ProxyStorage2  {\n\n    mapping(uint256 => address) public proxyImplementation;\n    mapping(address => bool) public aliveImplementation;\n    mapping(bytes4 => address) public selectorImplementation;\n\n}"
    }
  }
}}