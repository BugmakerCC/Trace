{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "src/EligibilityManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\n\nimport \"./Interfaces/IiToken.sol\";\nimport \"./Interfaces/IRewardDistributor.sol\";\nimport \"./Interfaces/IController.sol\";\nimport \"./Interfaces/IPriceOracle.sol\";\nimport \"./Interfaces/IBLPStakingPool.sol\";\nimport \"./Interfaces/Errors.sol\";\nimport \"./Libraries/RatioMath.sol\";\nimport \"./Libraries/Ownable.sol\";\nimport \"./Libraries/Initializable.sol\";\n\n/**\n * @title dForce's lending reward distributor Contract\n * @author dForce\n */\ncontract EligibilityManager is Initializable, Ownable {\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n    using RatioMath for uint256;\n\n    /// @notice the controller\n    address public controller;\n\n    /// @notice the oracle\n    address public oracle;\n\n    uint256 public thresholdRatio;\n    event NewThresholdRatio(uint256 thresholdRatio);\n\n    /// @dev EnumerableMap of all BLP Staking Pools\n    EnumerableSetUpgradeable.AddressSet internal BLPStakingPools;\n    event AddBLPStakingPool(address stakingPool, address BLP);\n    event RemoveBLPStakingPool(address stakingPool);\n\n    /// @notice the blp token of each blp staking pool\n    mapping(address => address) public BLPs;\n\n    /// @dev Eligible supplied iToken\n    EnumerableSetUpgradeable.AddressSet internal validSupplies;\n\n    event AddValidSupply(address iToken);\n    event RemoveValidSupply(address iToken);\n\n    constructor(address _controller, uint256 _ratio) {\n        initialize(_controller, _ratio);\n    }\n\n    /**\n     * @notice Ensure this is a EligibilityManager contract.\n     */\n    function isEligibilityManager() external pure returns (bool) {\n        return true;\n    }\n\n    /**\n     * @notice Initializes the contract.\n     */\n    function initialize(\n        address _controller,\n        uint256 _ratio\n    ) public initializer {\n        if (!IController(_controller).isController()) {\n            revert EligibilityManager_initialize__InvalidController();\n        }\n\n        __Ownable_init();\n        controller = _controller;\n        oracle = IController(controller).priceOracle();\n\n        thresholdRatio = _ratio;\n        emit NewThresholdRatio(_ratio);\n    }\n\n    function _addBLPStakingPoolInternal(address _stakingPool) internal {\n        if (!IBLPStakingPool(_stakingPool).isStakingPool()) {\n            revert EligibilityManager_addBLPStakingPoolInternal__InvalidStakingPool(\n                _stakingPool\n            );\n        }\n\n        if (BLPStakingPools.add(_stakingPool)) {\n            address _blp = IBLPStakingPool(_stakingPool).stakingToken();\n\n            BLPs[_stakingPool] = _blp;\n\n            emit AddBLPStakingPool(_stakingPool, _blp);\n        } else {\n            revert EligibilityManager_addBLPStakingPoolInternal__StakingPoolAlreadyExist(\n                _stakingPool\n            );\n        }\n    }\n\n    function _addBLPStakingPool(address _stakingPool) external onlyOwner {\n        _addBLPStakingPoolInternal(_stakingPool);\n    }\n\n    function _addBLPStakingPools(\n        address[] calldata _stakingPools\n    ) external onlyOwner {\n        uint256 _length = _stakingPools.length;\n        for (uint256 _i; _i < _length; ) {\n            _addBLPStakingPoolInternal(_stakingPools[_i]);\n\n            unchecked {\n                ++_i;\n            }\n        }\n    }\n\n    function _removeBLPStakingPoolInternal(address _stakingPool) internal {\n        if (BLPStakingPools.remove(_stakingPool)) {\n            delete BLPs[_stakingPool];\n\n            emit RemoveBLPStakingPool(_stakingPool);\n        } else {\n            revert EligibilityManager_removeBLPStakingPoolInternal__StakingPoolDoesNotExist(\n                _stakingPool\n            );\n        }\n    }\n\n    function _removeBLPStakingPool(address _stakingPool) external onlyOwner {\n        _removeBLPStakingPoolInternal(_stakingPool);\n    }\n\n    function _removeBLPStakingPools(\n        address[] calldata _stakingPools\n    ) external onlyOwner {\n        uint256 _length = _stakingPools.length;\n        for (uint256 _i; _i < _length; ) {\n            _removeBLPStakingPoolInternal(_stakingPools[_i]);\n\n            unchecked {\n                ++_i;\n            }\n        }\n    }\n\n    function _addValidSupplyInternal(address _iToken) internal {\n        if (!IController(controller).hasiToken(_iToken)) {\n            revert EligibilityManager_addValidSupplyInternal__InvalidSupply(\n                _iToken\n            );\n        }\n\n        if (validSupplies.add(_iToken)) {\n            emit AddValidSupply(_iToken);\n        } else {\n            revert EligibilityManager_addValidSupplyInternal__ValidSupplyAlreadyExist(\n                _iToken\n            );\n        }\n    }\n\n    function _addValidSupply(address _iToken) external onlyOwner {\n        _addValidSupplyInternal(_iToken);\n    }\n\n    function _addValidSupplies(address[] calldata _iTokens) external onlyOwner {\n        uint256 _length = _iTokens.length;\n        for (uint256 _i; _i < _length; ) {\n            _addValidSupplyInternal(_iTokens[_i]);\n\n            unchecked {\n                ++_i;\n            }\n        }\n    }\n\n    function _removeValidSupplyInternal(address _iToken) internal {\n        if (validSupplies.remove(_iToken)) {\n            emit RemoveValidSupply(_iToken);\n        } else {\n            revert EligibilityManager_removeValidSupplyInternal__ValidSupplyDoesNotExist(\n                _iToken\n            );\n        }\n    }\n\n    function _removeValidSupply(address _iToken) external onlyOwner {\n        _removeValidSupplyInternal(_iToken);\n    }\n\n    function _removeValidSupplies(\n        address[] calldata _iTokens\n    ) external onlyOwner {\n        uint256 _length = _iTokens.length;\n        for (uint256 _i; _i < _length; ) {\n            _removeValidSupplyInternal(_iTokens[_i]);\n\n            unchecked {\n                ++_i;\n            }\n        }\n    }\n\n    function _setThresholdRatio(uint256 _ratio) external onlyOwner {\n        thresholdRatio = _ratio;\n        emit NewThresholdRatio(_ratio);\n    }\n\n    function hasBLPStakingPool(address _stakingPool)\n        external\n        view\n        returns (bool)\n    {\n        return BLPStakingPools.contains(_stakingPool);\n    }\n\n    function getBLPStakingPools() external view returns (address[] memory) {\n        return BLPStakingPools.values();\n    }\n\n    function getValidSupplies() external view returns (address[] memory) {\n        return validSupplies.values();\n    }\n\n    function _getBLPValue(\n        address _account\n    ) internal returns (uint256 value, bool status) {\n        address[] memory _BLPStakingPools = BLPStakingPools.values();\n        uint256 _len = _BLPStakingPools.length;\n        status = true;\n\n        for (uint256 _i = 0; _i < _len; ) {\n            address _blpStaking = _BLPStakingPools[_i];\n            address _blp = BLPs[_blpStaking];\n\n            uint256 _staked = IERC20Upgradeable(_blpStaking).balanceOf(\n                _account\n            );\n            if (_staked != 0) {\n                (uint256 _price, bool _priceStatus) = IPriceOracle(oracle)\n                    .getUnderlyingPriceAndStatus(_blp);\n\n                if (!_priceStatus) {\n                    return (0, false);\n                }\n\n                value = value + _staked * _price;\n            }\n\n            unchecked {\n                ++_i;\n            }\n        }\n    }\n\n    function _getSupplyValue(\n        address _account\n    ) internal returns (uint256 value, bool status) {\n        address[] memory _iTokens = validSupplies.values();\n        uint256 _len = _iTokens.length;\n        status = true;\n\n        for (uint256 _i = 0; _i < _len; ) {\n            address _iToken = _iTokens[_i];\n\n            uint256 _supply = IiToken(_iToken).balanceOf(_account);\n            if (_supply != 0) {\n                uint256 _exchangeRate = IiToken(_iToken).exchangeRateStored();\n                (uint256 _price, bool _priceStatus) = IPriceOracle(oracle)\n                    .getUnderlyingPriceAndStatus(_iToken);\n\n                if (!_priceStatus) {\n                    return (0, false);\n                }\n\n                value = value + _supply.rmul(_exchangeRate) * _price;\n            }\n\n            unchecked {\n                ++_i;\n            }\n        }\n    }\n\n    function isEligible(address _account) external returns (bool, bool) {\n        if (thresholdRatio == 0) {\n            return (true, true);\n        }\n\n        (uint256 _BLPValue, bool _BLPStatus) = _getBLPValue(_account);\n        if (!_BLPStatus) {\n            return (false, false);\n        }\n\n        (uint256 _supplyValue, bool _supplyStatus) = _getSupplyValue(_account);\n        if (!_supplyStatus) {\n            return (false, false);\n        }\n\n        return (_BLPValue > _supplyValue.rmul(thresholdRatio), true);\n    }\n\n    /**\n     * @dev For external query value and status\n     */\n    function getBLPValue(\n        address _account\n    ) external returns (uint256 value, bool status) {\n        address[] memory _BLPStakingPools = BLPStakingPools.values();\n        uint256 _len = _BLPStakingPools.length;\n        status = true;\n\n        for (uint256 _i = 0; _i < _len; ) {\n            address _blpStaking = _BLPStakingPools[_i];\n            address _blp = BLPs[_blpStaking];\n\n            uint256 _staked = IERC20Upgradeable(_blpStaking).balanceOf(\n                _account\n            );\n            if (_staked != 0) {\n                (uint256 _price, bool _priceStatus) = IPriceOracle(oracle)\n                    .getUnderlyingPriceAndStatus(_blp);\n\n                if (!_priceStatus && status) {\n                    status = false;\n                }\n\n                value = value + _staked * _price;\n            }\n\n            unchecked {\n                ++_i;\n            }\n        }\n    }\n\n    /**\n     * @dev For external query value and status\n     */\n    function getSupplyValue(\n        address _account\n    ) external returns (uint256 value, bool status) {\n        address[] memory _iTokens = validSupplies.values();\n        uint256 _len = _iTokens.length;\n        status = true;\n\n        for (uint256 _i = 0; _i < _len; ) {\n            address _iToken = _iTokens[_i];\n\n            uint256 _supply = IiToken(_iToken).balanceOf(_account);\n            if (_supply != 0) {\n                uint256 _exchangeRate = IiToken(_iToken).exchangeRateStored();\n                (uint256 _price, bool _priceStatus) = IPriceOracle(oracle)\n                    .getUnderlyingPriceAndStatus(_iToken);\n\n                if (!_priceStatus && status) {\n                    status = false;\n                }\n\n                value = value + _supply.rmul(_exchangeRate) * _price;\n            }\n\n            unchecked {\n                ++_i;\n            }\n        }\n    }\n}\n"
    },
    "src/Interfaces/Errors.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nerror BaseStakingPool_addRewardDistributor__RewardDistributorIsZeroAddress();\nerror BaseStakingPool_addRewardDistributor__RewardDistributorAlreadyExist();\nerror BaseStakingPool_initialize__StakingTokenIsZeroAddress();\nerror BaseStakingPool_removeRewardDistributor__RewardDistributorDoesNotExist();\nerror BaseStakingPool_stake__StakeAmountIsZero();\nerror BaseStakingPool_withdraw__WithdrawAmountIsZero();\n\nerror BLPStakingPool_setRewardDistributorManager__InvalidRewardDistributorManager();\n\nerror BLPReward_initialize__StakingTokenIsZeroAddress();\nerror BLPReward_initialize__RewardTokenIsZeroAddress();\nerror BLPReward_initialize__TreasuryIsZeroAddress();\nerror BLPReward_setTreasury__TreasuryIsZeroAddress();\nerror BLPReward_setTreasury__SameTreasuryAddress();\n\nerror EligibilityManager_addBLPStakingPoolInternal__InvalidStakingPool(\n    address stakingPool\n);\nerror EligibilityManager_addBLPStakingPoolInternal__StakingPoolAlreadyExist(\n    address stakingPool\n);\nerror EligibilityManager_addValidSupplyInternal__InvalidSupply(address iToken);\nerror EligibilityManager_addValidSupplyInternal__ValidSupplyAlreadyExist(\n    address iToken\n);\nerror EligibilityManager_initialize__InvalidController();\nerror EligibilityManager_removeValidSupplyInternal__ValidSupplyDoesNotExist(\n    address iToken\n);\nerror EligibilityManager_removeBLPStakingPoolInternal__StakingPoolDoesNotExist(\n    address stakingPool\n);\n\n// Modifier error\nerror RewardDistributorManager__NotController();\n// Function errors\nerror RewardDistributorManager_addRewardDistributorInternal__InvalidRewardDistributor();\nerror RewardDistributorManager_addRewardDistributorInternal__RewardDistributorAlreadyExist(\n    address rewardDistributor\n);\nerror RewardDistributorManager_initialize__InvalidController();\nerror RewardDistributorManager_removeRewardDistributorInternal__RewardDistributorDoesNotExist(\n    address rewardDistributor\n);\nerror RewardDistributorManager_setEligibilityManager_InvalidEligibilityManager();\nerror RewardDistributorManager_updateEligibleBalance__InvalidEligibility();\n\nerror RewardDistributor__CallerIsNotRewardManager();\nerror RewardDistributor__ContractPaused();\nerror RewardDistributor_initialize__InvalidController();\nerror RewardDistributor_initialize__InvalidRewardDistributorManager();\nerror RewardDistributor_rescueTokens__CallerIsNotTreasury();\nerror RewardDistributor_setRewardToken__InvalidRewardToken();\nerror RewardDistributor_setTreasury__InvalidTreasury();\nerror RewardDistributor_setDistributionBorrowSpeedsInternal__ArrayLengthMismatch();\nerror RewardDistributor_setDistributionSupplySpeedsInternal__ArrayLengthMismatch();\nerror RewardDistributor_setDistributionBorrowSpeed__TokenHasNotBeenListed(\n    address iToken\n);\nerror RewardDistributor_setDistributionSupplySpeed__TokenHasNotBeenListed(\n    address iToken\n);\nerror RewardDistributor_updateDistributionState__TokenHasNotBeenListed(\n    address iToken\n);\nerror RewardDistributor_updateReward__TokenHasNotBeenListed(address iToken);\nerror RewardDistributor_updateReward__AccountIsZeroAddress();\nerror RewardDistributor_setBountyRatio__RatioTooHigh();\n"
    },
    "src/Interfaces/IBLPStakingPool.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ninterface IBLPStakingPool {\n    function stakingToken() external view returns (address);\n\n    function balanceOf(address _account) external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function isStakingPool() external pure returns (bool);\n}\n"
    },
    "src/Interfaces/IController.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\npragma experimental ABIEncoderV2;\n\ninterface IController {\n    /**\n     * @notice Security checks when updating the comptroller of a market, always expect to return true.\n     */\n    function isController() external view returns (bool);\n\n    /**\n     * @notice Return all of the iTokens\n     * @return The list of iToken addresses\n     */\n    function getAlliTokens() external view returns (address[] memory);\n\n    /**\n     * @notice Check whether a iToken is listed in controller\n     * @param _iToken The iToken to check for\n     * @return true if the iToken is listed otherwise false\n     */\n    function hasiToken(address _iToken) external view returns (bool);\n\n    function priceOracle() external view returns (address);\n    function rewardDistributor() external view returns (address);\n\n    function owner() external view returns (address);\n    function _setRewardDistributor(address _rewardDistributor) external;\n}\n"
    },
    "src/Interfaces/IPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ninterface IPriceOracle {\n    /**\n     * @notice Get the price of a underlying asset\n     * @param _iToken The iToken to get the underlying price of\n     * @return The underlying asset price mantissa (scaled by 1e18).\n     *  Zero means the price is unavailable and whether the price is valid.\n     */\n    function getUnderlyingPriceAndStatus(\n        address _iToken\n    ) external returns (uint256, bool);\n}\n"
    },
    "src/Interfaces/IRewardDistributor.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"./IController.sol\";\n\ninterface IRewardDistributor {\n    function isRewardDistributor() external view returns (bool);\n\n    function controller() external view returns (IController);\n\n    function rewardToken() external returns (address);\n\n    function _setRewardToken(address newRewardToken) external;\n\n    /// @notice Emitted reward token address is changed by admin\n    event NewRewardToken(address oldRewardToken, address newRewardToken);\n\n    function treasury() external returns (address);\n\n    function _setTreasury(address newTreasury) external;\n\n    /// @notice Emitted treasury address is changed by admin\n    event NewTreasury(address oldTreasury, address newTreasury);\n\n    function _addRecipient(\n        address _iToken,\n        uint256 _distributionFactor\n    ) external;\n\n    event NewRecipient(address iToken, uint256 distributionFactor);\n\n    /// @notice Emitted when mint is paused/unpaused by admin\n    event PausedChanged(bool paused, uint256 timestamp);\n\n    function _pause() external;\n\n    function _unpause(\n        address[] calldata _borrowiTokens,\n        uint256[] calldata _borrowSpeeds,\n        address[] calldata _supplyiTokens,\n        uint256[] calldata _supplySpeeds\n    ) external;\n\n    /// @notice Emitted when Global Distribution speed for both supply and borrow are updated\n    event GlobalDistributionSpeedsChanged(\n        uint256 borrowSpeed,\n        uint256 supplySpeed,\n        uint256 timestamp\n    );\n\n    /// @notice Emitted when iToken's Distribution borrow speed is updated\n    event DistributionBorrowSpeedChanged(\n        address iToken,\n        uint256 borrowSpeed,\n        uint256 timestamp\n    );\n\n    /// @notice Emitted when iToken's Distribution supply speed is updated\n    event DistributionSupplySpeedChanged(\n        address iToken,\n        uint256 supplySpeed,\n        uint256 timestamp\n    );\n\n    /// @notice Emitted when iToken's Distribution factor is changed by admin\n    event NewDistributionFactor(\n        address iToken,\n        uint256 oldDistributionFactorMantissa,\n        uint256 newDistributionFactorMantissa\n    );\n\n    /// @notice Emitted when bounty ratio is changed by admin\n    event NewBountyRatio(uint256 oldBountyRatio, uint256 newBountyRatio);\n\n    function updateDistributionState(address _iToken, bool _isBorrow) external;\n\n    function updateReward(\n        address _iToken,\n        address _account,\n        bool _isBorrow\n    ) external;\n\n    function updateRewardBatch(\n        address[] memory _holders,\n        address[] memory _iTokens\n    ) external;\n\n    function claimReward(\n        address[] memory _holders,\n        address[] memory _iTokens\n    ) external;\n\n    function claimAllReward(address[] memory _holders) external;\n\n    function claimRewards(\n        address[] memory _holders,\n        address[] memory _suppliediTokens,\n        address[] memory _borrowediTokens\n    ) external;\n\n    /// @notice Emitted when reward of amount is distributed into account\n    event RewardDistributed(\n        address iToken,\n        address account,\n        uint256 amount,\n        uint256 accountIndex\n    );\n\n    function claimBounty(address _account, address _hunter) external;\n\n    /// @notice Emitted when bounty is claimed by a hunter\n    event BountyClaimed(\n        address rewardToken,\n        address hunter,\n        address account,\n        uint256 bounty,\n        uint256 reward\n    );\n}\n"
    },
    "src/Interfaces/IiToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ninterface IiToken {\n    function name() external view returns (string calldata);\n\n    function decimals() external view returns (uint8);\n\n    function balanceOf(address _user) external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function isiToken() external returns (bool);\n\n    function borrowBalanceStored(address _user) external view returns (uint256);\n\n    function borrowIndex() external view returns (uint256);\n\n    function totalBorrows() external view returns (uint256);\n\n    function balanceOfUnderlying(address _account) external returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function borrowSnapshot(\n        address _account\n    ) external view returns (uint256, uint256);\n\n    function mint(\n        address _to,\n        uint256 _amount,\n        bool _refreshEligibility\n    ) external;\n\n    function redeem(\n        address _from,\n        uint256 _redeemiToken,\n        bool refreshEligibility\n    ) external;\n\n    function redeemUnderlying(\n        address _from,\n        uint256 _redeemiToken,\n        bool refreshEligibility\n    ) external;\n\n    function borrow(uint256 _borrowAmount, bool refreshEligibility) external;\n\n    function repayBorrow(\n        uint256 _repayAmount,\n        bool refreshEligibility\n    ) external;\n\n    function repayBorrowBehalf(\n        address _borrower,\n        uint256 _repayAmount,\n        bool refreshEligibility\n    ) external;\n\n    function liquidateBorrow(\n        address _borrower,\n        uint256 _repayAmount,\n        address _assetCollateral,\n        bool refreshEligibility\n    ) external;\n\n    function transfer(address recipient, uint256 amount) external;\n\n    function mintForSelfAndEnterMarket(\n        uint256 _mintAmount,\n        bool refreshEligibility\n    ) external;\n\n    function redeemFromSelfAndExitMarket(\n        uint256 _redeemiToken,\n        bool refreshEligibility\n    ) external;\n}\n"
    },
    "src/Libraries/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(\n            !_initialized,\n            \"Initializable: contract is already initialized\"\n        );\n\n        _;\n\n        _initialized = true;\n    }\n}\n"
    },
    "src/Libraries/Ownable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {_setPendingOwner} and {_acceptOwner}.\n */\ncontract Ownable {\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    address payable public owner;\n\n    /**\n     * @dev Returns the address of the current pending owner.\n     */\n    address payable public pendingOwner;\n\n    event NewOwner(address indexed previousOwner, address indexed newOwner);\n    event NewPendingOwner(\n        address indexed oldPendingOwner,\n        address indexed newPendingOwner\n    );\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"onlyOwner: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal {\n        owner = payable(msg.sender);\n        emit NewOwner(address(0), msg.sender);\n    }\n\n    /**\n     * @notice Base on the inputing parameter `newPendingOwner` to check the exact error reason.\n     * @dev Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.\n     * @param newPendingOwner New pending owner.\n     */\n    function _setPendingOwner(\n        address payable newPendingOwner\n    ) external onlyOwner {\n        require(\n            newPendingOwner != address(0) && newPendingOwner != pendingOwner,\n            \"_setPendingOwner: New owenr can not be zero address and owner has been set!\"\n        );\n\n        // Gets current owner.\n        address oldPendingOwner = pendingOwner;\n\n        // Sets new pending owner.\n        pendingOwner = newPendingOwner;\n\n        emit NewPendingOwner(oldPendingOwner, newPendingOwner);\n    }\n\n    /**\n     * @dev Accepts the admin rights, but only for pendingOwenr.\n     */\n    function _acceptOwner() external {\n        require(\n            msg.sender == pendingOwner,\n            \"_acceptOwner: Only for pending owner!\"\n        );\n\n        // Gets current values for events.\n        address oldOwner = owner;\n        address oldPendingOwner = pendingOwner;\n\n        // Set the new contract owner.\n        owner = pendingOwner;\n\n        // Clear the pendingOwner.\n        pendingOwner = payable(address(0));\n\n        emit NewOwner(oldOwner, owner);\n        emit NewPendingOwner(oldPendingOwner, pendingOwner);\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "src/Libraries/RatioMath.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nlibrary RatioMath {\n    uint256 private constant BASE = 10 ** 18;\n    uint256 private constant DOUBLE = 10 ** 36;\n\n    function divup(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = (x + (y - 1)) / y;\n    }\n\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = (x * y) / BASE;\n    }\n\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = (x * BASE) / y;\n    }\n\n    function rdivup(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = (x * (BASE) + (y - 1)) / y;\n    }\n}\n"
    }
  }
}}