{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {
      "contracts/exchangeIssuance/FlashMintWrapped.sol:FlashMintWrapped": {
        "DEXAdapterV3": "0x28764A27139d7241C9198C43720a0df1c18E50eF"
      }
    },
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SignedSafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMath {\n    int256 constant private _INT256_MIN = -2**255;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n        return c;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "contracts/exchangeIssuance/DEXAdapterV3.sol": {
      "content": "/*\n    Copyright 2024 Index Cooperative\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\npragma solidity 0.6.10;\npragma experimental ABIEncoderV2;\n\nimport { IUniswapV2Router02 } from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport { ICurveCalculator } from \"../interfaces/external/ICurveCalculator.sol\";\nimport { ICurveAddressProvider } from \"../interfaces/external/ICurveAddressProvider.sol\";\nimport { ICurvePoolRegistry } from \"../interfaces/external/ICurvePoolRegistry.sol\";\nimport { ICurvePool } from \"../interfaces/external/ICurvePool.sol\";\nimport { ISwapRouter02 } from \"../interfaces/external/ISwapRouter02.sol\";\nimport { IVault } from \"../interfaces/external/balancer-v2/IVault.sol\";\nimport { IQuoter } from \"../interfaces/IQuoter.sol\";\nimport { IWETH } from \"../interfaces/IWETH.sol\";\nimport { PreciseUnitMath } from \"../lib/PreciseUnitMath.sol\";\n\n\n/**\n * @title DEXAdapterV3\n * @author Index Coop\n *\n * Same as DEXAdapterV2 but adds BalancerV2 support\n */\nlibrary DEXAdapterV3 {\n    using SafeERC20 for IERC20;\n    using PreciseUnitMath for uint256;\n    using SafeMath for uint256;\n\n    /* ============ Constants ============= */\n\n    uint256 constant private MAX_UINT256 = type(uint256).max;\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    uint256 public constant ROUNDING_ERROR_MARGIN = 2;\n\n    /* ============ Enums ============ */\n\n    enum Exchange { None, Quickswap, Sushiswap, UniV3, Curve, BalancerV2 }\n\n    /* ============ Structs ============ */\n\n    struct Addresses {\n        address quickRouter;\n        address sushiRouter;\n        address uniV3Router;\n        address uniV3Quoter;\n        address curveAddressProvider;\n        address curveCalculator;\n        address balV2Vault;\n        // Wrapped native token (WMATIC on polygon)\n        address weth;\n    }\n\n    struct SwapData {\n        address[] path;\n        uint24[] fees;\n        address pool;         // For Curve swaps\n        bytes32[] poolIds;    // For Balancer V2 multihop swaps\n        Exchange exchange;\n    }\n\n    struct CurvePoolData {\n        int128 nCoins;\n        uint256[8] balances;\n        uint256 A;\n        uint256 fee;\n        uint256[8] rates;\n        uint256[8] decimals;\n    }\n\n    /**\n     * Swap exact tokens for another token on a given DEX.\n     *\n     * @param _addresses    Struct containing relevant smart contract addresses.\n     * @param _amountIn     The amount of input token to be spent\n     * @param _minAmountOut Minimum amount of output token to receive\n     * @param _swapData     Swap data containing the path, fees, pool, and pool IDs\n     *\n     * @return amountOut    The amount of output tokens\n     */\n    function swapExactTokensForTokens(\n        Addresses memory _addresses,\n        uint256 _amountIn,\n        uint256 _minAmountOut,\n        SwapData memory _swapData\n    )\n        external\n        returns (uint256)\n    {\n        if (_swapData.path.length == 0 || _swapData.path[0] == _swapData.path[_swapData.path.length -1]) {\n            return _amountIn;\n        }\n\n        if(_swapData.exchange == Exchange.Curve){\n            return _swapExactTokensForTokensCurve(\n                _swapData.path,\n                _swapData.pool,\n                _amountIn,\n                _minAmountOut,\n                _addresses\n            );\n        }\n        if(_swapData.exchange== Exchange.UniV3){\n            return _swapExactTokensForTokensUniV3(\n                _swapData.path,\n                _swapData.fees,\n                _amountIn,\n                _minAmountOut,\n                ISwapRouter02(_addresses.uniV3Router)\n            );\n        }\n        if(_swapData.exchange == Exchange.BalancerV2){\n            return _swapExactTokensForTokensBalancerV2(\n                _swapData.path,\n                _amountIn,\n                _minAmountOut,\n                _swapData.poolIds,\n                IVault(_addresses.balV2Vault)\n            );\n        } else {\n            return _swapExactTokensForTokensUniV2(\n                _swapData.path,\n                _amountIn,\n                _minAmountOut,\n                _getRouter(_swapData.exchange, _addresses)\n            );\n        }\n    }\n\n\n    /**\n     * Swap tokens for exact amount of output tokens on a given DEX.\n     *\n     * @param _addresses    Struct containing relevant smart contract addresses.\n     * @param _amountOut    The amount of output token required\n     * @param _maxAmountIn  Maximum amount of input token to be spent\n     * @param _swapData     Swap data containing the path, fees, pool, and pool IDs\n     *\n     * @return amountIn     The amount of input tokens spent\n     */\n    function swapTokensForExactTokens(\n        Addresses memory _addresses,\n        uint256 _amountOut,\n        uint256 _maxAmountIn,\n        SwapData memory _swapData\n    )\n        external\n        returns (uint256 amountIn)\n    {\n        if (_swapData.path.length == 0 || _swapData.path[0] == _swapData.path[_swapData.path.length -1]) {\n            return _amountOut;\n        }\n\n        if(_swapData.exchange == Exchange.Curve){\n            return _swapTokensForExactTokensCurve(\n                _swapData.path,\n                _swapData.pool,\n                _amountOut,\n                _maxAmountIn,\n                _addresses\n            );\n        }\n        if(_swapData.exchange == Exchange.UniV3){\n            return _swapTokensForExactTokensUniV3(\n                _swapData.path,\n                _swapData.fees,\n                _amountOut,\n                _maxAmountIn,\n                ISwapRouter02(_addresses.uniV3Router)\n            );\n        }\n        if(_swapData.exchange == Exchange.BalancerV2){\n            return _swapTokensForExactTokensBalancerV2(\n                _swapData.path,\n                _amountOut,\n                _maxAmountIn,\n                _swapData.poolIds,\n                IVault(_addresses.balV2Vault)\n            );\n        } else {\n            return _swapTokensForExactTokensUniV2(\n                _swapData.path,\n                _amountOut,\n                _maxAmountIn,\n                _getRouter(_swapData.exchange, _addresses)\n            );\n        }\n    }\n\n    /**\n     * Gets the output amount of a token swap.\n     *\n     * @param _swapData     the swap parameters\n     * @param _addresses    Struct containing relevant smart contract addresses.\n     * @param _amountIn     the input amount of the trade\n     *\n     * @return              the output amount of the swap\n     */\n    function getAmountOut(\n        Addresses memory _addresses,\n        SwapData memory _swapData,\n        uint256 _amountIn\n    )\n        external\n        returns (uint256)\n    {\n        if (_swapData.path.length == 0 || _swapData.path[0] == _swapData.path[_swapData.path.length-1]) {\n            return _amountIn;\n        }\n\n        if (_swapData.exchange == Exchange.UniV3) {\n            return _getAmountOutUniV3(_swapData, _addresses.uniV3Quoter, _amountIn);\n        } else if (_swapData.exchange == Exchange.Curve) {\n            (int128 i, int128 j) = _getCoinIndices(\n                _swapData.pool,\n                _swapData.path[0],\n                _swapData.path[1],\n                ICurveAddressProvider(_addresses.curveAddressProvider)\n            );\n            return _getAmountOutCurve(_swapData.pool, i, j, _amountIn, _addresses);\n        } else if (_swapData.exchange == Exchange.BalancerV2) {\n            return _getAmountOutBalancerV2(\n                _swapData,\n                _addresses,\n                _amountIn\n            );\n        } else {\n            return _getAmountOutUniV2(\n                _swapData,\n                _getRouter(_swapData.exchange, _addresses),\n                _amountIn\n            );\n        }\n    }\n\n    /**\n     * Gets the input amount of a fixed output swap.\n     *\n     * @param _swapData     the swap parameters\n     * @param _addresses    Struct containing relevant smart contract addresses.\n     * @param _amountOut    the output amount of the swap\n     *\n     * @return              the input amount of the swap\n     */\n    function getAmountIn(\n        Addresses memory _addresses,\n        SwapData memory _swapData,\n        uint256 _amountOut\n    )\n        external\n        returns (uint256)\n    {\n        if (_swapData.path.length == 0 || _swapData.path[0] == _swapData.path[_swapData.path.length-1]) {\n            return _amountOut;\n        }\n\n        if (_swapData.exchange == Exchange.UniV3) {\n            return _getAmountInUniV3(_swapData, _addresses.uniV3Quoter, _amountOut);\n        } else if (_swapData.exchange == Exchange.Curve) {\n            (int128 i, int128 j) = _getCoinIndices(\n                _swapData.pool,\n                _swapData.path[0],\n                _swapData.path[1],\n                ICurveAddressProvider(_addresses.curveAddressProvider)\n            );\n            return _getAmountInCurve(_swapData.pool, i, j, _amountOut, _addresses);\n        } else if (_swapData.exchange == Exchange.BalancerV2) {\n            return _getAmountInBalancerV2(\n                _swapData,\n                _addresses,\n                _amountOut\n            );\n        } else {\n            return _getAmountInUniV2(\n                _swapData,\n                _getRouter(_swapData.exchange, _addresses),\n                _amountOut\n            );\n        }\n    }\n\n    /**\n     * Sets a max approval limit for an ERC20 token, provided the current allowance\n     * is less than the required allownce.\n     *\n     * @param _token              Token to approve\n     * @param _spender            Spender address to approve\n     * @param _requiredAllowance  Target allowance to set\n     */\n    function _safeApprove(\n        IERC20 _token,\n        address _spender,\n        uint256 _requiredAllowance\n    )\n        internal\n    {\n        uint256 allowance = _token.allowance(address(this), _spender);\n        if (allowance < _requiredAllowance) {\n            _token.safeIncreaseAllowance(_spender, MAX_UINT256 - allowance);\n        }\n    }\n\n    /* ============ Private Methods ============ */\n\n    /**\n     *  Execute exact output swap via a UniV2 based DEX. (such as sushiswap);\n     *\n     * @param _path         List of token address to swap via. \n     * @param _amountOut    The amount of output token required\n     * @param _maxAmountIn  Maximum amount of input token to be spent\n     * @param _router       Address of the uniV2 router to use\n     *\n     * @return amountIn    The amount of input tokens spent\n     */\n    function _swapTokensForExactTokensUniV2(\n        address[] memory _path,\n        uint256 _amountOut,\n        uint256 _maxAmountIn,\n        IUniswapV2Router02 _router\n    )\n        private\n        returns (uint256)\n    {\n        _safeApprove(IERC20(_path[0]), address(_router), _maxAmountIn);\n        return _router.swapTokensForExactTokens(_amountOut, _maxAmountIn, _path, address(this), block.timestamp)[0];\n    }\n\n    /**\n     *  Execute exact output swap via UniswapV3\n     *\n     * @param _path         List of token address to swap via. (In the order as\n     *                      expected by uniV2, the first element being the input toen)\n     * @param _fees         List of fee levels identifying the pools to swap via.\n     *                      (_fees[0] refers to pool between _path[0] and _path[1])\n     * @param _amountOut    The amount of output token required\n     * @param _maxAmountIn  Maximum amount of input token to be spent\n     * @param _uniV3Router  Address of the uniswapV3 router\n     *\n     * @return amountIn    The amount of input tokens spent\n     */\n    function _swapTokensForExactTokensUniV3(\n        address[] memory _path,\n        uint24[] memory _fees,\n        uint256 _amountOut,\n        uint256 _maxAmountIn,\n        ISwapRouter02 _uniV3Router\n    )\n        private\n        returns(uint256)\n    {\n\n        require(_path.length == _fees.length + 1, \"ExchangeIssuance: PATHS_FEES_MISMATCH\");\n        _safeApprove(IERC20(_path[0]), address(_uniV3Router), _maxAmountIn);\n        if(_path.length == 2){\n            ISwapRouter02.ExactOutputSingleParams memory params =\n                ISwapRouter02.ExactOutputSingleParams({\n                    tokenIn: _path[0],\n                    tokenOut: _path[1],\n                    fee: _fees[0],\n                    recipient: address(this),\n                    amountOut: _amountOut,\n                    amountInMaximum: _maxAmountIn,\n                    sqrtPriceLimitX96: 0\n                });\n            return _uniV3Router.exactOutputSingle(params);\n        } else {\n            bytes memory pathV3 = _encodePathV3(_path, _fees, true);\n            ISwapRouter02.ExactOutputParams memory params =\n                ISwapRouter02.ExactOutputParams({\n                    path: pathV3,\n                    recipient: address(this),\n                    amountOut: _amountOut,\n                    amountInMaximum: _maxAmountIn\n                });\n            return _uniV3Router.exactOutput(params);\n        }\n    }\n\n    /**\n     *  Execute exact input swap via Curve\n     *\n     * @param _path         Path (has to be of length 2)\n     * @param _pool         Address of curve pool to use\n     * @param _amountIn     The amount of input token to be spent\n     * @param _minAmountOut Minimum amount of output token to receive\n     * @param _addresses    Struct containing relevant smart contract addresses.\n     *\n     * @return amountOut    The amount of output token obtained\n     */\n    function _swapExactTokensForTokensCurve(\n        address[] memory _path,\n        address _pool,\n        uint256 _amountIn,\n        uint256 _minAmountOut,\n        Addresses memory _addresses\n    )\n        private\n        returns (uint256 amountOut)\n    {\n        require(_path.length == 2, \"ExchangeIssuance: CURVE_WRONG_PATH_LENGTH\");\n        (int128 i, int128 j) = _getCoinIndices(_pool, _path[0], _path[1], ICurveAddressProvider(_addresses.curveAddressProvider));\n\n        amountOut = _exchangeCurve(i, j, _pool, _amountIn, _minAmountOut, _path[0]);\n\n    }\n\n    /**\n     *  Execute exact output swap via Curve\n     *\n     * @param _path         Path (has to be of length 2)\n     * @param _pool         Address of curve pool to use\n     * @param _amountOut    The amount of output token required\n     * @param _maxAmountIn  Maximum amount of input token to be spent\n     *\n     * @return amountOut    The amount of output token obtained\n     */\n    function _swapTokensForExactTokensCurve(\n        address[] memory _path,\n        address _pool,\n        uint256 _amountOut,\n        uint256 _maxAmountIn,\n        Addresses memory _addresses\n    )\n        private\n        returns (uint256)\n    {\n        require(_path.length == 2, \"ExchangeIssuance: CURVE_WRONG_PATH_LENGTH\");\n        (int128 i, int128 j) = _getCoinIndices(_pool, _path[0], _path[1], ICurveAddressProvider(_addresses.curveAddressProvider));\n\n\n        uint256 returnedAmountOut = _exchangeCurve(i, j, _pool, _maxAmountIn, _amountOut, _path[0]);\n        require(_amountOut <= returnedAmountOut, \"ExchangeIssuance: CURVE_UNDERBOUGHT\");\n\n        uint256 swappedBackAmountIn;\n        if(returnedAmountOut > _amountOut){\n            swappedBackAmountIn = _exchangeCurve(j, i, _pool, returnedAmountOut.sub(_amountOut), 0, _path[1]);\n        }\n\n        return _maxAmountIn.sub(swappedBackAmountIn);\n    }\n    \n    function _exchangeCurve(\n        int128 _i,\n        int128 _j,\n        address _pool,\n        uint256 _amountIn,\n        uint256 _minAmountOut,\n        address _from\n    )\n        private\n        returns (uint256 amountOut)\n    {\n        ICurvePool pool = ICurvePool(_pool);\n        if(_from == ETH_ADDRESS){\n            amountOut = pool.exchange{value: _amountIn}(\n                _i,\n                _j,\n                _amountIn,\n                _minAmountOut\n            );\n        }\n        else {\n            IERC20(_from).approve(_pool, _amountIn);\n            amountOut = pool.exchange(\n                _i,\n                _j,\n                _amountIn,\n                _minAmountOut\n            );\n        }\n    }\n\n    /**\n     *  Calculate required input amount to get a given output amount via Curve swap\n     *\n     * @param _i            Index of input token as per the ordering of the pools tokens\n     * @param _j            Index of output token as per the ordering of the pools tokens\n     * @param _pool         Address of curve pool to use\n     * @param _amountOut    The amount of output token to be received\n     * @param _addresses    Struct containing relevant smart contract addresses.\n     *\n     * @return amountOut    The amount of output token obtained\n     */\n    function _getAmountInCurve(\n        address _pool,\n        int128 _i,\n        int128 _j,\n        uint256 _amountOut,\n        Addresses memory _addresses\n    )\n        private\n        view\n        returns (uint256)\n    {\n        CurvePoolData memory poolData = _getCurvePoolData(_pool, ICurveAddressProvider(_addresses.curveAddressProvider));\n\n        return ICurveCalculator(_addresses.curveCalculator).get_dx(\n            poolData.nCoins,\n            poolData.balances,\n            poolData.A,\n            poolData.fee,\n            poolData.rates,\n            poolData.decimals,\n            false,\n            _i,\n            _j,\n            _amountOut\n        ) + ROUNDING_ERROR_MARGIN;\n    }\n\n    /**\n     *  Calculate output amount of a Curve swap\n     *\n     * @param _i            Index of input token as per the ordering of the pools tokens\n     * @param _j            Index of output token as per the ordering of the pools tokens\n     * @param _pool         Address of curve pool to use\n     * @param _amountIn     The amount of output token to be received\n     * @param _addresses    Struct containing relevant smart contract addresses.\n     *\n     * @return amountOut    The amount of output token obtained\n     */\n    function _getAmountOutCurve(\n        address _pool,\n        int128 _i,\n        int128 _j,\n        uint256 _amountIn,\n        Addresses memory _addresses\n    )\n        private\n        view\n        returns (uint256)\n    {\n        return ICurvePool(_pool).get_dy(_i, _j, _amountIn);\n    }\n\n    /**\n     *  Get metadata on curve pool required to calculate input amount from output amount\n     *\n     * @param _pool                    Address of curve pool to use\n     * @param _curveAddressProvider    Address of curve address provider\n     *\n     * @return Struct containing all required data to perform getAmountInCurve calculation\n     */\n    function _getCurvePoolData(\n        address _pool,\n        ICurveAddressProvider _curveAddressProvider\n    ) private view returns(CurvePoolData memory)\n    {\n        ICurvePoolRegistry registry = ICurvePoolRegistry(_curveAddressProvider.get_registry());\n\n        return CurvePoolData(\n            int128(registry.get_n_coins(_pool)[0]),\n            registry.get_balances(_pool),\n            registry.get_A(_pool),\n            registry.get_fees(_pool)[0],\n            registry.get_rates(_pool),\n            registry.get_decimals(_pool)\n        );\n    }\n    \n    /**\n     *  Get token indices for given pool\n     *  NOTE: This was necessary sine the get_coin_indices function of the CurvePoolRegistry did not work for StEth/ETH pool\n     *\n     * @param _pool                    Address of curve pool to use\n     * @param _from                    Address of input token\n     * @param _to                      Address of output token\n     * @param _curveAddressProvider    Address of curve address provider\n     *\n     * @return i Index of input token\n     * @return j Index of output token\n     */\n    function _getCoinIndices(\n        address _pool,\n        address _from,\n        address _to,\n        ICurveAddressProvider _curveAddressProvider\n    )\n        private\n        view\n        returns (int128 i, int128 j)\n    {\n        ICurvePoolRegistry registry = ICurvePoolRegistry(_curveAddressProvider.get_registry());\n\n        // Set to out of range index to signal the coin is not found yet\n        i = 9;\n        j = 9;\n        address[8] memory poolCoins = registry.get_coins(_pool);\n\n        for(uint256 k = 0; k < 8; k++){\n            if(poolCoins[k] == _from){\n                i = int128(k);\n            }\n            else if(poolCoins[k] == _to){\n                j = int128(k);\n            }\n            // ZeroAddress signals end of list\n            if(poolCoins[k] == address(0) || (i != 9 && j != 9)){\n                break;\n            }\n        }\n\n        require(i != 9, \"ExchangeIssuance: CURVE_FROM_NOT_FOUND\");\n        require(j != 9, \"ExchangeIssuance: CURVE_TO_NOT_FOUND\");\n\n        return (i, j);\n    }\n\n    /**\n     *  Execute exact input swap via UniswapV3\n     *\n     * @param _path         List of token address to swap via. \n     * @param _fees         List of fee levels identifying the pools to swap via.\n     *                      (_fees[0] refers to pool between _path[0] and _path[1])\n     * @param _amountIn     The amount of input token to be spent\n     * @param _minAmountOut Minimum amount of output token to receive\n     * @param _uniV3Router  Address of the uniswapV3 router\n     *\n     * @return amountOut    The amount of output token obtained\n     */\n    function _swapExactTokensForTokensUniV3(\n        address[] memory _path,\n        uint24[] memory _fees,\n        uint256 _amountIn,\n        uint256 _minAmountOut,\n        ISwapRouter02 _uniV3Router\n    )\n        private\n        returns (uint256)\n    {\n        require(_path.length == _fees.length + 1, \"ExchangeIssuance: PATHS_FEES_MISMATCH\");\n        _safeApprove(IERC20(_path[0]), address(_uniV3Router), _amountIn);\n        if(_path.length == 2){\n            ISwapRouter02.ExactInputSingleParams memory params =\n                ISwapRouter02.ExactInputSingleParams({\n                    tokenIn: _path[0],\n                    tokenOut: _path[1],\n                    fee: _fees[0],\n                    recipient: address(this),\n                    amountIn: _amountIn,\n                    amountOutMinimum: _minAmountOut,\n                    sqrtPriceLimitX96: 0\n                });\n            return _uniV3Router.exactInputSingle(params);\n        } else {\n            bytes memory pathV3 = _encodePathV3(_path, _fees, false);\n            ISwapRouter02.ExactInputParams memory params =\n                ISwapRouter02.ExactInputParams({\n                    path: pathV3,\n                    recipient: address(this),\n                    amountIn: _amountIn,\n                    amountOutMinimum: _minAmountOut\n                });\n            uint amountOut = _uniV3Router.exactInput(params);\n            return amountOut;\n        }\n    }\n\n    /**\n     *  Execute exact input swap via UniswapV2\n     *\n     * @param _path         List of token address to swap via. \n     * @param _amountIn     The amount of input token to be spent\n     * @param _minAmountOut Minimum amount of output token to receive\n     * @param _router       Address of uniV2 router to use\n     *\n     * @return amountOut    The amount of output token obtained\n     */\n    function _swapExactTokensForTokensUniV2(\n        address[] memory _path,\n        uint256 _amountIn,\n        uint256 _minAmountOut,\n        IUniswapV2Router02 _router\n    )\n        private\n        returns (uint256)\n    {\n        _safeApprove(IERC20(_path[0]), address(_router), _amountIn);\n        // NOTE: The following was changed from always returning result at position [1] to returning the last element of the result array\n        // With this change, the actual output is correctly returned also for multi-hop swaps\n        // See https://github.com/IndexCoop/index-coop-smart-contracts/pull/116 \n        uint256[] memory result = _router.swapExactTokensForTokens(_amountIn, _minAmountOut, _path, address(this), block.timestamp);\n        // result = uint[] memory\tThe input token amount and all subsequent output token amounts.\n        // we are usually only interested in the actual amount of the output token (so result element at the last place)\n        return result[result.length-1];\n    }\n\n    /**\n     * Gets the output amount of a token swap on Uniswap V2\n     *\n     * @param _swapData     the swap parameters\n     * @param _router       the uniswap v2 router address\n     * @param _amountIn     the input amount of the trade\n     *\n     * @return              the output amount of the swap\n     */\n    function _getAmountOutUniV2(\n        SwapData memory _swapData,\n        IUniswapV2Router02 _router,\n        uint256 _amountIn\n    )\n        private\n        view\n        returns (uint256)\n    {\n        return _router.getAmountsOut(_amountIn, _swapData.path)[_swapData.path.length-1];\n    }\n\n    /**\n     * Gets the input amount of a fixed output swap on Uniswap V2.\n     *\n     * @param _swapData     the swap parameters\n     * @param _router       the uniswap v2 router address\n     * @param _amountOut    the output amount of the swap\n     *\n     * @return              the input amount of the swap\n     */\n    function _getAmountInUniV2(\n        SwapData memory _swapData,\n        IUniswapV2Router02 _router,\n        uint256 _amountOut\n    )\n        private\n        view\n        returns (uint256)\n    {\n        return _router.getAmountsIn(_amountOut, _swapData.path)[0];\n    }\n\n    /**\n     * Gets the output amount of a token swap on Uniswap V3.\n     *\n     * @param _swapData     the swap parameters\n     * @param _quoter       the uniswap v3 quoter\n     * @param _amountIn     the input amount of the trade\n     *\n     * @return              the output amount of the swap\n     */\n\n    function _getAmountOutUniV3(\n        SwapData memory _swapData,\n        address _quoter,\n        uint256 _amountIn\n    )\n        private\n        returns (uint256)\n    {\n        bytes memory path = _encodePathV3(_swapData.path, _swapData.fees, false);\n        return IQuoter(_quoter).quoteExactInput(path, _amountIn);\n    }\n\n    /**\n     * Gets the input amount of a fixed output swap on Uniswap V3.\n     *\n     * @param _swapData     the swap parameters\n     * @param _quoter       uniswap v3 quoter\n     * @param _amountOut    the output amount of the swap\n     *\n     * @return              the input amount of the swap\n     */\n    function _getAmountInUniV3(\n        SwapData memory _swapData,\n        address _quoter,\n        uint256 _amountOut\n    )\n        private\n        returns (uint256)\n    {\n        bytes memory path = _encodePathV3(_swapData.path, _swapData.fees, true);\n        return IQuoter(_quoter).quoteExactOutput(path, _amountOut);\n    }\n\n    /**\n     * Encode path / fees to bytes in the format expected by UniV3 router\n     *\n     * @param _path          List of token address to swap via (starting with input token)\n     * @param _fees          List of fee levels identifying the pools to swap via.\n     *                       (_fees[0] refers to pool between _path[0] and _path[1])\n     * @param _reverseOrder  Boolean indicating if path needs to be reversed to start with output token.\n     *                       (which is the case for exact output swap)\n     *\n     * @return encodedPath   Encoded path to be forwared to uniV3 router\n     */\n    function _encodePathV3(\n        address[] memory _path,\n        uint24[] memory _fees,\n        bool _reverseOrder\n    )\n        private\n        pure\n        returns(bytes memory encodedPath)\n    {\n        if(_reverseOrder){\n            encodedPath = abi.encodePacked(_path[_path.length-1]);\n            for(uint i = 0; i < _fees.length; i++){\n                uint index = _fees.length - i - 1;\n                encodedPath = abi.encodePacked(encodedPath, _fees[index], _path[index]);\n            }\n        } else {\n            encodedPath = abi.encodePacked(_path[0]);\n            for(uint i = 0; i < _fees.length; i++){\n                encodedPath = abi.encodePacked(encodedPath, _fees[i], _path[i+1]);\n            }\n        }\n    }\n\n    function _getRouter(\n        Exchange _exchange,\n        Addresses memory _addresses\n    )\n        private\n        pure\n        returns (IUniswapV2Router02)\n    {\n        return IUniswapV2Router02(\n            (_exchange == Exchange.Quickswap) ? _addresses.quickRouter : _addresses.sushiRouter\n        );\n    }\n\n    /**\n     *  Execute exact input swap via Balancer V2 (supports multihop swaps)\n     *\n     * @param _path         List of token addresses to swap via.\n     * @param _amountIn     The amount of input token to be spent\n     * @param _minAmountOut Minimum amount of output token to receive\n     * @param _poolIds      List of pool IDs for each swap step\n     * @param _vault        Address of the Balancer V2 Vault\n     *\n     * @return amountOut    The amount of output tokens received\n     */\n    function _swapExactTokensForTokensBalancerV2(\n        address[] memory _path,\n        uint256 _amountIn,\n        uint256 _minAmountOut,\n        bytes32[] memory _poolIds,\n        IVault _vault\n    )\n        private\n        returns (uint256 amountOut)\n    {\n        require(_path.length >= 2, \"DEXAdapterV3: BALANCER_PATH_LENGTH\");\n        require(_poolIds.length == _path.length - 1, \"DEXAdapterV3: INVALID_POOL_IDS\");\n\n        // Approve the Vault to spend the input token\n        _safeApprove(IERC20(_path[0]), address(_vault), _amountIn);\n\n        // Build the assets array (unique tokens in the path)\n        address[] memory assets = _getAssets(_path);\n\n        // Build the swaps array\n        IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](_path.length - 1);\n\n        for (uint256 i = 0; i < _path.length - 1; i++) {\n            swaps[i] = IVault.BatchSwapStep({\n                poolId: _poolIds[i],\n                assetInIndex: _getAssetIndex(assets, _path[i]),\n                assetOutIndex: _getAssetIndex(assets, _path[i + 1]),\n                amount: i == 0 ? _amountIn : 0, // Only specify amount for first swap\n                userData: \"\"\n            });\n        }\n\n        // Set up funds\n        IVault.FundManagement memory funds = IVault.FundManagement({\n            sender: address(this),\n            fromInternalBalance: false,\n            recipient: payable(address(this)),\n            toInternalBalance: false\n        });\n\n        // Set up limits\n        int256[] memory limits = new int256[](assets.length);\n\n        for (uint256 i = 0; i < assets.length; i++) {\n            if (assets[i] == _path[0]) {\n                limits[i] = int256(_amountIn);\n            } else if (assets[i] == _path[_path.length - 1]) {\n                limits[i] = -int256(_minAmountOut);\n            } else {\n                limits[i] = 0;\n            }\n        }\n\n        // Perform the batch swap\n        int256[] memory deltas = _vault.batchSwap(\n            IVault.SwapKind.GIVEN_IN,\n            swaps,\n            assets,\n            funds,\n            limits,\n            block.timestamp\n        );\n\n        amountOut = uint256(-deltas[_getAssetIndex(assets, _path[_path.length - 1])]);\n        require(amountOut >= _minAmountOut, \"DEXAdapterV3: INSUFFICIENT_OUTPUT_AMOUNT\");\n    }\n\n    /**\n     *  Execute exact output swap via Balancer V2 (supports multihop swaps)\n     *\n     * @param _path         List of token addresses to swap via.\n     * @param _amountOut    The amount of output token required\n     * @param _maxAmountIn  Maximum amount of input token to be spent\n     * @param _poolIds      List of pool IDs for each swap step\n     * @param _vault        Address of the Balancer V2 Vault\n     *\n     * @return amountIn     The amount of input tokens spent\n     */\n    function _swapTokensForExactTokensBalancerV2(\n        address[] memory _path,\n        uint256 _amountOut,\n        uint256 _maxAmountIn,\n        bytes32[] memory _poolIds,\n        IVault _vault\n    )\n        private\n        returns (uint256 amountIn)\n    {\n        require(_path.length >= 2, \"DEXAdapterV3: BALANCER_PATH_LENGTH\");\n        require(_poolIds.length == _path.length - 1, \"DEXAdapterV3: INVALID_POOL_IDS\");\n\n        // Approve the Vault to spend the input token\n        _safeApprove(IERC20(_path[0]), address(_vault), _maxAmountIn);\n\n        // Build the assets array (unique tokens in the path)\n        address[] memory assets = _getAssets(_path);\n\n        // Build the swaps array\n        IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](_path.length - 1);\n\n        for (uint256 i = 0; i < _path.length - 1; i++) {\n            swaps[i] = IVault.BatchSwapStep({\n                poolId: _poolIds[i],\n                assetInIndex: _getAssetIndex(assets, _path[i]),\n                assetOutIndex: _getAssetIndex(assets, _path[i + 1]),\n                amount: 0, // Amount is determined by the Vault\n                userData: \"\"\n            });\n        }\n\n        // Set up funds\n        IVault.FundManagement memory funds = IVault.FundManagement({\n            sender: address(this),\n            fromInternalBalance: false,\n            recipient: payable(address(this)),\n            toInternalBalance: false\n        });\n\n        // Set up limits\n        int256[] memory limits = new int256[](assets.length);\n\n        for (uint256 i = 0; i < assets.length; i++) {\n            if (assets[i] == _path[0]) {\n                limits[i] = int256(_maxAmountIn);\n            } else if (assets[i] == _path[_path.length - 1]) {\n                limits[i] = -int256(_amountOut);\n            } else {\n                limits[i] = 0;\n            }\n        }\n\n        // Perform the batch swap\n        int256[] memory deltas = _vault.batchSwap(\n            IVault.SwapKind.GIVEN_OUT,\n            swaps,\n            assets,\n            funds,\n            limits,\n            block.timestamp\n        );\n\n        amountIn = uint256(deltas[_getAssetIndex(assets, _path[0])]);\n        require(amountIn <= _maxAmountIn, \"DEXAdapterV3: EXCESSIVE_INPUT_AMOUNT\");\n    }\n\n    /**\n     * Gets the output amount of a token swap on Balancer V2 using queryBatchSwap.\n     *\n     * @param _swapData     the swap parameters\n     * @param _addresses    Struct containing relevant smart contract addresses\n     * @param _amountIn     the input amount of the trade\n     *\n     * @return amountOut    the output amount of the swap\n     */\n    function _getAmountOutBalancerV2(\n        SwapData memory _swapData,\n        Addresses memory _addresses,\n        uint256 _amountIn\n    )\n        private\n        returns (uint256 amountOut)\n    {\n        IVault _vault = IVault(_addresses.balV2Vault);\n\n        // Build the assets array (unique tokens in the path)\n        address[] memory assets = _getAssets(_swapData.path);\n\n        // Build the swaps array\n        IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](_swapData.path.length - 1);\n\n        for (uint256 i = 0; i < _swapData.path.length - 1; i++) {\n            swaps[i] = IVault.BatchSwapStep({\n                poolId: _swapData.poolIds[i],\n                assetInIndex: _getAssetIndex(assets, _swapData.path[i]),\n                assetOutIndex: _getAssetIndex(assets, _swapData.path[i + 1]),\n                amount: i == 0 ? _amountIn : 0, // Only specify amount for first swap\n                userData: \"\"\n            });\n        }\n\n        // Set up funds (not used in query)\n        IVault.FundManagement memory funds = IVault.FundManagement({\n            sender: address(this),\n            fromInternalBalance: false,\n            recipient: payable(address(this)),\n            toInternalBalance: false\n        });\n\n        // Perform the query\n        int256[] memory deltas = _vault.queryBatchSwap(\n            IVault.SwapKind.GIVEN_IN,\n            swaps,\n            assets,\n            funds\n        );\n\n        amountOut = uint256(-deltas[_getAssetIndex(assets, _swapData.path[_swapData.path.length - 1])]);\n    }\n\n    /**\n     * Gets the input amount of a fixed output swap on Balancer V2 using queryBatchSwap.\n     *\n     * @param _swapData     the swap parameters\n     * @param _addresses    Struct containing relevant smart contract addresses\n     * @param _amountOut    the output amount of the swap\n     *\n     * @return amountIn     the input amount of the swap\n     */\n    function _getAmountInBalancerV2(\n        SwapData memory _swapData,\n        Addresses memory _addresses,\n        uint256 _amountOut\n    )\n        private\n        returns (uint256 amountIn)\n    {\n        IVault _vault = IVault(_addresses.balV2Vault);\n\n        // Build the assets array (unique tokens in the path)\n        address[] memory assets = _getAssets(_swapData.path);\n\n        // Build the swaps array\n        IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](_swapData.path.length - 1);\n\n        for (uint256 i = 0; i < _swapData.path.length - 1; i++) {\n            swaps[i] = IVault.BatchSwapStep({\n                poolId: _swapData.poolIds[i],\n                assetInIndex: _getAssetIndex(assets, _swapData.path[i]),\n                assetOutIndex: _getAssetIndex(assets, _swapData.path[i + 1]),\n                amount: i == swaps.length - 1 ? _amountOut : 0, // Only specify amount for last swap\n                userData: \"\"\n            });\n        }\n\n        // Set up funds (not used in query)\n        IVault.FundManagement memory funds = IVault.FundManagement({\n            sender: address(this),\n            fromInternalBalance: false,\n            recipient: payable(address(this)),\n            toInternalBalance: false\n        });\n\n        // Perform the query\n        int256[] memory deltas = _vault.queryBatchSwap(\n            IVault.SwapKind.GIVEN_OUT,\n            swaps,\n            assets,\n            funds\n        );\n\n        amountIn = uint256(deltas[_getAssetIndex(assets, _swapData.path[0])]);\n    }\n\n    /**\n     * Helper function to get the list of unique assets from the path.\n     *\n     * @param _path         List of token addresses in the swap path\n     *\n     * @return assets       List of unique assets\n     */\n    function _getAssets(address[] memory _path) private pure returns (address[] memory assets) {\n        uint256 assetCount = 0;\n        address[] memory tempAssets = new address[](_path.length);\n\n        for (uint256 i = 0; i < _path.length; i++) {\n            bool alreadyAdded = false;\n            for (uint256 j = 0; j < assetCount; j++) {\n                if (tempAssets[j] == _path[i]) {\n                    alreadyAdded = true;\n                    break;\n                }\n            }\n            if (!alreadyAdded) {\n                tempAssets[assetCount] = _path[i];\n                assetCount++;\n            }\n        }\n\n        assets = new address[](assetCount);\n        for (uint256 i = 0; i < assetCount; i++) {\n            assets[i] = tempAssets[i];\n        }\n    }\n\n    /**\n     * Helper function to get the index of an asset in the assets array.\n     *\n     * @param assets        List of assets\n     * @param token         Token address to find\n     *\n     * @return index        Index of the token in the assets array\n     */\n    function _getAssetIndex(address[] memory assets, address token) private pure returns (uint256) {\n        for (uint256 i = 0; i < assets.length; i++) {\n            if (assets[i] == token) {\n                return i;\n            }\n        }\n        revert(\"DEXAdapterV3: TOKEN_NOT_IN_ASSETS\");\n    }\n}\n"
    },
    "contracts/exchangeIssuance/FlashMintWrapped.sol": {
      "content": "/*\n    Copyright 2022 Index Cooperative\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\n\npragma solidity 0.6.10;\npragma experimental ABIEncoderV2;\n\nimport { Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport { IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport { SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport { ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\nimport { IController } from \"../interfaces/IController.sol\";\nimport { IIntegrationRegistry } from \"../interfaces/IIntegrationRegistry.sol\";\nimport { IWrapV2Adapter} from \"../interfaces/IWrapV2Adapter.sol\";\nimport { IDebtIssuanceModule} from \"../interfaces/IDebtIssuanceModule.sol\";\nimport { ISetToken} from \"../interfaces/ISetToken.sol\";\nimport { IWETH} from \"../interfaces/IWETH.sol\";\nimport { IWrapModuleV2} from \"../interfaces/IWrapModuleV2.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { DEXAdapterV3 } from \"./DEXAdapterV3.sol\";\n\n/**\n * @title FlashMintWrapped\n *\n * Flash issues SetTokens whose components contain wrapped tokens.\n *\n * Compatible with:\n * IssuanceModules: DebtIssuanceModule, DebtIssuanceModuleV2\n * WrapAdapters: IWrapV2Adapter\n *\n * Supports flash minting for sets that contain both unwrapped and wrapped components.\n * Does not support debt positions on Set token.\n * Wrapping / Unwrapping is skipped for a component if ComponentSwapData[component_index].underlyingERC20 address == set component address\n *\n * If the set contains both the wrapped and unwrapped version of a token (e.g. DAI and cDAI)\n * ->  two separate component data points have to be supplied in _swapData and _wrapData\n * e.g. for issue\n * Set components at index 0 = DAI; then -> ComponentSwapData[0].underlyingERC20 = DAI; (no wrapping will happen)\n * Set components at index 1 = cDAI; then -> ComponentSwapData[1].underlyingERC20 = DAI; (wrapping will happen)\n */\ncontract FlashMintWrapped is Ownable, ReentrancyGuard {\n  using DEXAdapterV3 for DEXAdapterV3.Addresses;\n  using Address for address payable;\n  using Address for address;\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n  using SafeERC20 for ISetToken;\n\n  /* ============ Structs ============ */\n\n  struct ComponentSwapData {\n    // unwrapped token version, e.g. DAI\n    address underlyingERC20;\n    // swap data for DEX operation: fees, path, etc. see DEXAdapterV3.SwapData\n    DEXAdapterV3.SwapData dexData;\n    // ONLY relevant for issue, not used for redeem:\n    // amount that has to be bought of the unwrapped token version (to cover required wrapped component amounts for issuance)\n    // this amount has to be computed beforehand through the exchange rate of wrapped Component <> unwrappedComponent\n    // i.e. getRequiredComponentIssuanceUnits() on the IssuanceModule and then convert units through exchange rate to unwrapped component units\n    // e.g. 300 cDAI needed for issuance of 1 Set token. exchange rate 1cDAI = 0.05 DAI. -> buyUnderlyingAmount = 0.05 DAI * 300 = 15 DAI\n    uint256 buyUnderlyingAmount;\n  }\n\n  struct ComponentWrapData {\n    string integrationName; // wrap adapter integration name as listed in the IntegrationRegistry for the wrapModule\n    bytes wrapData; // optional wrapData passed to the wrapAdapter\n  }\n\n  /* ============ Constants ============= */\n\n  uint256 private constant MAX_UINT256 = type(uint256).max;\n\n  /* ============ Immutables ============ */\n\n  IController public immutable setController;\n  IDebtIssuanceModule public immutable issuanceModule; // interface is compatible with DebtIssuanceModuleV2\n  address public immutable wrapModule; // used to obtain a valid wrap adapter\n\n  /* ============ State Variables ============ */\n\n  DEXAdapterV3.Addresses public dexAdapter;\n\n  /* ============ Events ============ */\n\n  event FlashMint(\n    address indexed _recipient, // The recipient address of the minted Set token\n    ISetToken indexed _setToken, // The minted Set token\n    IERC20 indexed _inputToken, // The address of the input asset(ERC20/ETH) used to mint the Set tokens\n    uint256 _amountInputToken, // The amount of input tokens used for minting\n    uint256 _amountSetIssued // The amount of Set tokens received by the recipient\n  );\n\n  event FlashRedeem(\n    address indexed _recipient, // The recipient address which redeemed the Set token\n    ISetToken indexed _setToken, // The redeemed Set token\n    IERC20 indexed _outputToken, // The address of output asset(ERC20/ETH) received by the recipient\n    uint256 _amountSetRedeemed, // The amount of Set token redeemed for output tokens\n    uint256 _amountOutputToken // The amount of output tokens received by the recipient\n  );\n\n  /* ============ Modifiers ============ */\n\n  /**\n   * checks that _setToken is a valid listed set token on the setController\n   *\n   * @param _setToken       set token to check\n   */\n  modifier isSetToken(ISetToken _setToken) {\n    require(setController.isSet(address(_setToken)), \"FlashMint: INVALID_SET\");\n    _;\n  }\n\n  /**\n   * checks that _inputToken is the first adress in _path and _outputToken is the last address in _path\n   *\n   * @param _path                      Array of addresses for a DEX swap path\n   * @param _inputToken                input token of DEX swap\n   * @param _outputToken               output token of DEX swap\n   */\n  modifier isValidPath(\n    address[] memory _path,\n    address _inputToken,\n    address _outputToken\n  ) {\n    if (_inputToken != _outputToken) {\n      require(\n        _path[0] == _inputToken ||\n          (_inputToken == dexAdapter.weth && _path[0] == DEXAdapterV3.ETH_ADDRESS),\n        \"FlashMint: INPUT_TOKEN_NOT_IN_PATH\"\n      );\n      require(\n        _path[_path.length - 1] == _outputToken ||\n          (_outputToken == dexAdapter.weth && _path[_path.length - 1] == DEXAdapterV3.ETH_ADDRESS),\n        \"FlashMint: OUTPUT_TOKEN_NOT_IN_PATH\"\n      );\n    }\n    _;\n  }\n\n  /* ========== Constructor ========== */\n\n  /**\n   * Constructor initializes various addresses\n   *\n   * @param _dexAddresses              Address of quickRouter, sushiRouter, uniV3Router, uniV3Router, curveAddressProvider, curveCalculator and weth.\n   * @param _setController             Set token controller used to verify a given token is a set\n   * @param _issuanceModule            IDebtIssuanceModule used to issue and redeem tokens\n   * @param _wrapModule                WrapModuleV2 used to obtain a valid wrap adapter\n   */\n  constructor(\n    DEXAdapterV3.Addresses memory _dexAddresses,\n    IController _setController,\n    IDebtIssuanceModule _issuanceModule,\n    address _wrapModule\n  ) public {\n    dexAdapter = _dexAddresses;\n    setController = _setController;\n    issuanceModule = _issuanceModule;\n    wrapModule = _wrapModule;\n  }\n\n  /* ============ External Functions ============ */\n  receive() external payable {\n    // required for weth.withdraw() to work properly\n    require(msg.sender == dexAdapter.weth, \"FlashMint: DEPOSITS_NOT_ALLOWED\");\n  }\n\n  /**\n  * Withdraw slippage to selected address\n  *\n  * @param _tokens    Addresses of tokens to withdraw, specifiy ETH_ADDRESS to withdraw ETH\n  * @param _to        Address to send the tokens to\n  */\n  function withdrawTokens(IERC20[] calldata _tokens, address payable _to) external onlyOwner payable {\n      for(uint256 i = 0; i < _tokens.length; i++) {\n          if(address(_tokens[i]) == DEXAdapterV3.ETH_ADDRESS){\n              _to.sendValue(address(this).balance);\n          }\n          else{\n              _tokens[i].safeTransfer(_to, _tokens[i].balanceOf(address(this)));\n          }\n      }\n  }\n\n  /**\n   * Runs all the necessary approval functions required before issuing\n   * or redeeming a SetToken. This function need to be called only once before the first time\n   * this smart contract is used on any particular SetToken.\n   *\n   * @param _setToken          Address of the SetToken being initialized\n   */\n  function approveSetToken(ISetToken _setToken) external isSetToken(_setToken) {\n    address[] memory _components = _setToken.getComponents();\n    for (uint256 i = 0; i < _components.length; ++i) {\n      DEXAdapterV3._safeApprove(IERC20(_components[i]), address(issuanceModule), MAX_UINT256);\n    }\n  }\n\n  /**\n   * Issues an exact amount of SetTokens for given amount of input ERC20 tokens.\n   * The excess amount of input tokens is returned.\n   * The sender must have approved the _maxAmountInputToken for input token to this contract.\n   *\n   * @param _setToken              Address of the SetToken to be issued\n   * @param _inputToken            Address of the ERC20 input token\n   * @param _amountSetToken        Amount of SetTokens to issue\n   * @param _maxAmountInputToken   Maximum amount of input tokens to be used\n   * @param _swapData              ComponentSwapData (inputToken -> component) for each set component in the same order\n   * @param _wrapData              ComponentWrapData (underlyingERC20 -> wrapped component) for each required set token component in the exact same order\n   *\n   * @return totalInputTokenSold   Amount of input tokens spent for issuance\n   */\n  function issueExactSetFromERC20(\n    ISetToken _setToken,\n    IERC20 _inputToken,\n    uint256 _amountSetToken,\n    uint256 _maxAmountInputToken,\n    ComponentSwapData[] calldata _swapData,\n    ComponentWrapData[] calldata _wrapData\n  ) external nonReentrant returns (uint256) {\n    return\n      _issueExactSet(\n        _setToken,\n        _inputToken,\n        _amountSetToken,\n        _maxAmountInputToken,\n        _swapData,\n        _wrapData,\n        false\n      );\n  }\n\n  /**\n   * Issues an exact amount of SetTokens for given amount of ETH. Max amount of ETH used is the transferred amount in msg.value.\n   * The excess amount of input ETH is returned.\n   *\n   * @param _setToken              Address of the SetToken to be issued\n   * @param _amountSetToken        Amount of SetTokens to issue\n   * @param _swapData              ComponentSwapData (WETH -> component) for each set component in the same order\n   * @param _wrapData              ComponentWrapData (underlyingERC20 -> wrapped component) for each required set token component in the exact same order\n   *\n   * @return totalETHSold          Amount of ETH spent for issuance\n   */\n  function issueExactSetFromETH(\n    ISetToken _setToken,\n    uint256 _amountSetToken,\n    ComponentSwapData[] calldata _swapData,\n    ComponentWrapData[] calldata _wrapData\n  ) external payable nonReentrant returns (uint256) {\n    // input token for all operations is WETH (any sent in ETH will be wrapped)\n    IERC20 inputToken = IERC20(dexAdapter.weth);\n    uint256 maxAmountInputToken = msg.value; // = deposited amount ETH -> WETH\n\n    return\n      _issueExactSet(\n        _setToken,\n        inputToken,\n        _amountSetToken,\n        maxAmountInputToken,\n        _swapData,\n        _wrapData,\n        true\n      );\n  }\n\n  /**\n   * Redeems an exact amount of SetTokens for an ERC20 token.\n   * The sender must have approved the _amountSetToken of _setToken to this contract.\n   *\n   * @param _setToken              Address of the SetToken to be redeemed\n   * @param _outputToken           Address of the ERC20 output token\n   * @param _amountSetToken        Amount of SetTokens to redeem\n   * @param _minOutputReceive      Minimum amount of output tokens to be received\n   * @param _swapData              ComponentSwapData (underlyingERC20 -> output token) for each _redeemComponents in the same order\n   * @param _unwrapData            ComponentWrapData (wrapped Set component -> underlyingERC20) for each required set token component in the exact same order\n   *\n   * @return outputAmount          Amount of output tokens sent to the caller\n   */\n  function redeemExactSetForERC20(\n    ISetToken _setToken,\n    IERC20 _outputToken,\n    uint256 _amountSetToken,\n    uint256 _minOutputReceive,\n    ComponentSwapData[] calldata _swapData,\n    ComponentWrapData[] calldata _unwrapData\n  ) external nonReentrant returns (uint256) {\n    return\n      _redeemExactSet(\n        _setToken,\n        _outputToken,\n        _amountSetToken,\n        _minOutputReceive,\n        _swapData,\n        _unwrapData,\n        false\n      );\n  }\n\n  /**\n   * Redeems an exact amount of SetTokens for ETH.\n   * The sender must have approved the _amountSetToken of _setToken to this contract.\n   *\n   * @param _setToken              Address of the SetToken to be redemeed\n   * @param _amountSetToken        Amount of SetTokens to redeem\n   * @param _minOutputReceive      Minimum amount of output tokens to be received\n   * @param _swapData              ComponentSwapData (underlyingERC20 -> output token) for each _redeemComponents in the same order\n   * @param _unwrapData            ComponentWrapData (wrapped Set component -> underlyingERC20) for each required set token component in the exact same order\n   *\n   * @return outputAmount          Amount of ETH sent to the caller\n   */\n  function redeemExactSetForETH(\n    ISetToken _setToken,\n    uint256 _amountSetToken,\n    uint256 _minOutputReceive,\n    ComponentSwapData[] calldata _swapData,\n    ComponentWrapData[] calldata _unwrapData\n  ) external nonReentrant returns (uint256) {\n    // output token for all operations is WETH (it will be unwrapped in the end and sent as ETH)\n    IERC20 outputToken = IERC20(dexAdapter.weth);\n\n    return\n      _redeemExactSet(\n        _setToken,\n        outputToken,\n        _amountSetToken,\n        _minOutputReceive,\n        _swapData,\n        _unwrapData,\n        true\n      );\n  }\n\n  /**\n  * ESTIMATES the amount of output ERC20 tokens required to issue an exact amount of SetTokens based on component swap data.\n  * Simulates swapping input to all components in swap data. \n  * This function is not marked view, but should be static called off-chain.\n  *\n  * @param _setToken              Address of the SetToken being issued\n  * @param _inputToken            Address of the input token used to pay for issuance\n  * @param _setAmount             Amount of SetTokens to issue\n  * @param _swapData              ComponentSwapData (inputToken -> component) for each set component in the same order\n  *\n  * @return amountInputNeeded     Amount of tokens needed to issue specified amount of SetTokens\n  */\n  function getIssueExactSet(\n      ISetToken _setToken,\n      address _inputToken,\n      uint256 _setAmount,\n      ComponentSwapData[] calldata _swapData\n  )\n      external\n      isSetToken(_setToken)\n      returns(uint256 amountInputNeeded)\n  {\n      require(_setAmount > 0, \"FlashMint: INVALID_INPUTS\");\n      require(_inputToken != address(0), \"FlashMint: INVALID_INPUTS\");\n\n      for (uint256 i = 0; i < _swapData.length; ++i) {\n        // if the input token is the swap target token, no swapping is needed\n\n        if (_inputToken == _swapData[i].underlyingERC20) {\n          amountInputNeeded = amountInputNeeded.add(_swapData[i].buyUnderlyingAmount);\n          continue;\n        }\n        \n        // add required input amount to swap to desired buyUnderlyingAmount\n        uint256 amountInNeeded = dexAdapter.getAmountIn(_swapData[i].dexData, _swapData[i].buyUnderlyingAmount);\n        amountInputNeeded = amountInputNeeded.add(amountInNeeded);\n      }\n\n  }\n\n  /**\n  * ESTIMATES the amount of output ERC20 tokens received when redeeming an exact amount of SetTokens based on component swap data.\n  * Simulates swapping all components to the output token in swap data. \n  * This function is not marked view, but should be static called off-chain.\n  *\n  * Note that _swapData.buyUnderlyingAmount has to be specified here with the expected underlying amount received after unwrapping\n  *\n  * @param _setToken              Address of the SetToken being redeemed\n  * @param _outputToken           Address of the output token expected to teceive (if redeeming to ETH, outputToken here is WETH)\n  * @param _setAmount             Amount of SetTokens to redeem\n  * @param _swapData              ComponentSwapData (component -> outputToken) for each set component in the same order\n  *\n  * @return amountOutputReceived     Amount of output tokens received\n  */\n  function getRedeemExactSet(\n      ISetToken _setToken,\n      address _outputToken,\n      uint256 _setAmount,\n      ComponentSwapData[] calldata _swapData\n  )\n      external\n      isSetToken(_setToken)\n      returns(uint256 amountOutputReceived)\n  {\n      require(_setAmount > 0, \"FlashMint: INVALID_INPUTS\");\n      require(_outputToken != address(0), \"FlashMint: INVALID_INPUTS\");\n\n      for (uint256 i = 0; i < _swapData.length; ++i) {\n        // if the output token is the swap target token, no swapping is needed\n\n        if (_outputToken == _swapData[i].underlyingERC20) {\n          amountOutputReceived = amountOutputReceived.add(_swapData[i].buyUnderlyingAmount);\n          continue;\n        }\n\n        // add received output amount from swap\n        uint256 swapAmountOut = dexAdapter.getAmountOut(_swapData[i].dexData, _swapData[i].buyUnderlyingAmount);\n        amountOutputReceived = amountOutputReceived.add(swapAmountOut);\n      }\n\n  }\n\n  /* ============ Internal Functions ============ */\n\n  /**\n   * Issues an exact amount of SetTokens for given amount of input. Excess amounts are returned\n   *\n   * @param _setToken                   Address of the SetToken to be issued\n   * @param _inputToken                 Address of the ERC20 input token\n   * @param _amountSetToken             Amount of SetTokens to issue\n   * @param _maxAmountInputToken        Maximum amount of input tokens to be used\n   * @param _swapData                   ComponentSwapData (input token -> underlyingERC20) for each _requiredComponents in the same order\n   * @param _wrapData                   ComponentWrapData (underlyingERC20 -> wrapped component) for each required set token component in the exact same order\n   * @param _issueFromETH               boolean flag to identify if issuing from ETH or from ERC20 tokens\n   *\n   * @return totalInputSold             Amount of input token spent for issuance\n   */\n  function _issueExactSet(\n    ISetToken _setToken,\n    IERC20 _inputToken,\n    uint256 _amountSetToken,\n    uint256 _maxAmountInputToken,\n    ComponentSwapData[] calldata _swapData,\n    ComponentWrapData[] calldata _wrapData,\n    bool _issueFromETH\n  ) internal returns (uint256) {\n    // 1. validate input params, get required components with amounts and snapshot input token balance before\n    require(address(_inputToken) != address(0), \"FlashMint: INVALID_INPUTS\");\n    uint256 inputTokenBalanceBefore = IERC20(_inputToken).balanceOf(address(this));\n    \n    // Prevent stack too deep\n    {\n      (\n        address[] memory requiredComponents,\n        uint256[] memory requiredAmounts\n      ) = _validateIssueParams(\n          _setToken,\n          _amountSetToken,\n          _maxAmountInputToken,\n          _swapData,\n          _wrapData\n        );\n\n      // 2. transfer input to this contract\n      if (_issueFromETH) {\n        // wrap sent in ETH to WETH for all operations\n        IWETH(dexAdapter.weth).deposit{value: msg.value}();\n      } else {\n        _inputToken.safeTransferFrom(msg.sender, address(this), _maxAmountInputToken);\n      }\n\n      // 3. swap input token to all components, then wrap them if needed\n      _swapAndWrapComponents(\n        _inputToken,\n        _maxAmountInputToken,\n        _swapData,\n        _wrapData,\n        requiredComponents,\n        requiredAmounts\n      );\n    }\n\n    // 4. issue set tokens\n    issuanceModule.issue(_setToken, _amountSetToken, msg.sender);\n\n    // 5. ensure not too much of input token was spent (covers case where initial input token balance was > 0)\n    uint256 spentInputTokenAmount = _validateMaxAmountInputToken(\n      _inputToken,\n      inputTokenBalanceBefore,\n      _maxAmountInputToken\n    );\n\n    // 6. return excess inputs\n    _returnExcessInput(_inputToken, _maxAmountInputToken, spentInputTokenAmount, _issueFromETH);\n\n    // 7. emit event and return amount spent\n    emit FlashMint(\n      msg.sender,\n      _setToken,\n      _issueFromETH ? IERC20(DEXAdapterV3.ETH_ADDRESS) : _inputToken,\n      spentInputTokenAmount,\n      _amountSetToken\n    );\n\n    return spentInputTokenAmount;\n  }\n\n  /**\n   * Redeems an exact amount of SetTokens.\n   *\n   * @param _setToken              Address of the SetToken to be issued\n   * @param _outputToken           Address of the ERC20 output token\n   * @param _amountSetToken        Amount of SetTokens to redeem\n   * @param _minOutputReceive      Minimum amount of output tokens to be received\n   * @param _swapData              ComponentSwapData (underlyingERC20 -> output token) for each _redeemComponents in the same order\n   * @param _unwrapData            ComponentWrapData (wrapped Set component -> underlyingERC20) for each _redeemComponents in the same order\n   * @param _redeemToETH           boolean flag to identify if redeeming to ETH or to ERC20 tokens\n   *\n   * @return outputAmount          Amount of output received\n   */\n  function _redeemExactSet(\n    ISetToken _setToken,\n    IERC20 _outputToken,\n    uint256 _amountSetToken,\n    uint256 _minOutputReceive,\n    ComponentSwapData[] calldata _swapData,\n    ComponentWrapData[] calldata _unwrapData,\n    bool _redeemToETH\n  ) internal returns (uint256) {\n    // 1. validate input params and get required components\n    (address[] memory redeemComponents, uint256[] memory redeemAmounts) = _validateRedeemParams(\n      _setToken,\n      _outputToken,\n      _amountSetToken,\n      _swapData,\n      _unwrapData\n    );\n\n    // 2. transfer set tokens to be redeemed to this\n    _setToken.safeTransferFrom(msg.sender, address(this), _amountSetToken);\n\n    // 3. redeem set tokens\n    issuanceModule.redeem(_setToken, _amountSetToken, address(this));\n\n    // 4. unwrap all components if needed and swap them to output token\n    uint256 totalOutputTokenObtained = _unwrapAndSwapComponents(\n      _outputToken,\n      _swapData,\n      _unwrapData,\n      redeemComponents,\n      redeemAmounts\n    );\n\n    // 5. ensure expected minimum output amount has been obtained\n    require(totalOutputTokenObtained >= _minOutputReceive, \"FlashMint: INSUFFICIENT_OUTPUT_AMOUNT\");\n\n    // 6. transfer obtained output tokens to msg.sender\n    _sendObtainedOutputToSender(_outputToken, totalOutputTokenObtained, _redeemToETH);\n\n    // 7. emit event and return amount obtained\n    emit FlashRedeem(\n      msg.sender,\n      _setToken,\n      _redeemToETH ? IERC20(DEXAdapterV3.ETH_ADDRESS) : _outputToken,\n      _amountSetToken,\n      totalOutputTokenObtained\n    );\n\n    return totalOutputTokenObtained;\n  }\n\n  /**\n   * Validates input params for _issueExactSet operations\n   *\n   * @param _setToken                   Address of the SetToken to be redeemed\n   * @param _amountSetToken             Amount of SetTokens to issue\n   * @param _maxAmountToken             Maximum amount of input token to spend\n   * @param _swapData                   ComponentSwapData (input token -> underlyingERC20) for each _requiredComponents in the same order\n   * @param _wrapData                   ComponentWrapData (underlyingERC20 -> wrapped Set component) for each _requiredComponents in the same order\n   *\n   * @return requiredComponents         Array of required issuance components gotten from IDebtIssuanceModule.getRequiredComponentIssuanceUnits()\n   * @return requiredAmounts            Array of required issuance component amounts gotten from IDebtIssuanceModule.getRequiredComponentIssuanceUnits()\n   */\n  function _validateIssueParams(\n    ISetToken _setToken,\n    uint256 _amountSetToken,\n    uint256 _maxAmountToken,\n    ComponentSwapData[] calldata _swapData,\n    ComponentWrapData[] calldata _wrapData\n  )\n    internal\n    view\n    isSetToken(_setToken)\n    returns (address[] memory requiredComponents, uint256[] memory requiredAmounts)\n  {\n    require(_amountSetToken > 0 && _maxAmountToken > 0, \"FlashMint: INVALID_INPUTS\");\n\n    (requiredComponents, requiredAmounts, ) = issuanceModule.getRequiredComponentIssuanceUnits(\n      _setToken,\n      _amountSetToken\n    );\n\n    require(\n      _wrapData.length == _swapData.length && _wrapData.length == requiredComponents.length,\n      \"FlashMint: MISMATCH_INPUT_ARRAYS\"\n    );\n  }\n\n  /**\n   * Validates input params for _redeemExactSet operations\n   *\n   * @param _setToken                  Address of the SetToken to be redeemed\n   * @param _outputToken               Output token that will be redeemed to\n   * @param _amountSetToken            Amount of SetTokens to redeem\n   * @param _swapData                  ComponentSwapData (underlyingERC20 -> output token) for each _redeemComponents in the same order\n   * @param _unwrapData                ComponentWrapData (wrapped Set component -> underlyingERC20) for each _redeemComponents in the same order\n   *\n   * @return redeemComponents          Array of redemption components gotten from IDebtIssuanceModule.getRequiredComponentRedemptionUnits()\n   * @return redeemAmounts             Array of redemption component amounts gotten from IDebtIssuanceModule.getRequiredComponentRedemptionUnits()\n   */\n  function _validateRedeemParams(\n    ISetToken _setToken,\n    IERC20 _outputToken,\n    uint256 _amountSetToken,\n    ComponentSwapData[] calldata _swapData,\n    ComponentWrapData[] calldata _unwrapData\n  )\n    internal\n    view\n    isSetToken(_setToken)\n    returns (address[] memory redeemComponents, uint256[] memory redeemAmounts)\n  {\n    require(\n      _amountSetToken > 0 && address(_outputToken) != address(0),\n      \"FlashMint: INVALID_INPUTS\"\n    );\n\n    (redeemComponents, redeemAmounts, ) = issuanceModule.getRequiredComponentRedemptionUnits(\n      _setToken,\n      _amountSetToken\n    );\n\n    require(\n      _unwrapData.length == _swapData.length && _unwrapData.length == redeemComponents.length,\n      \"FlashMint: MISMATCH_INPUT_ARRAYS\"\n    );\n  }\n\n  /**\n   * Swaps and then wraps each _requiredComponents sequentially based on _swapData and _wrapData\n   *\n   * @param _inputToken                 Input token that will be sold\n   * @param _maxAmountInputToken        Maximum amount of input token that can be spent\n   * @param _swapData                   ComponentSwapData (input token -> underlyingERC20) for each _requiredComponents in the same order\n   * @param _wrapData                   ComponentWrapData (underlyingERC20 -> wrapped Set component) for each _requiredComponents in the same order\n   * @param _requiredComponents         Issuance components gotten from IDebtIssuanceModule.getRequiredComponentIssuanceUnits()\n   * @param _requiredAmounts            Issuance units gotten from IDebtIssuanceModule.getRequiredComponentIssuanceUnits()\n   */\n  function _swapAndWrapComponents(\n    IERC20 _inputToken,\n    uint256 _maxAmountInputToken,\n    ComponentSwapData[] calldata _swapData,\n    ComponentWrapData[] calldata _wrapData,\n    address[] memory _requiredComponents,\n    uint256[] memory _requiredAmounts\n  ) internal {\n    // if the required set components contain the input token, we have to make sure that the required amount\n    // for issuance is actually still left over at the end of swapping and wrapping\n    uint256 requiredLeftOverInputTokenAmount = 0;\n\n    // for each component in the swapData / wrapData / requiredComponents array:\n    // 1. swap from input token to unwrapped component (exact to buyUnderlyingAmount)\n    // 2. wrap from unwrapped component to wrapped component (unless unwrapped component == wrapped component)\n    // 3. ensure amount in contract covers required amount for issuance\n    for (uint256 i = 0; i < _requiredComponents.length; ++i) {\n      // if the required set component is the input token, no swapping or wrapping is needed\n      uint256 requiredAmount = _requiredAmounts[i];\n      if (address(_inputToken) == _requiredComponents[i]) {\n        requiredLeftOverInputTokenAmount = requiredAmount;\n        continue;\n      }\n\n      // snapshot balance of required component before swap and wrap operations\n      uint256 componentBalanceBefore = IERC20(_requiredComponents[i]).balanceOf(address(this));\n\n      // swap input token to underlying token\n      _swapToExact(\n        _inputToken, // input\n        IERC20(_swapData[i].underlyingERC20), // output\n        _swapData[i].buyUnderlyingAmount, // buy amount: must come from flash mint caller, we do not know the exchange rate wrapped <> unwrapped\n        _maxAmountInputToken, // maximum spend amount: _maxAmountInputToken as transferred by the flash mint caller\n        _swapData[i].dexData // dex path fees data etc.\n      );\n\n      // transform underlying token into wrapped version (unless it's the same)\n      if (_swapData[i].underlyingERC20 != _requiredComponents[i]) {\n        _wrapComponent(\n          _wrapData[i],\n          _swapData[i].buyUnderlyingAmount,\n          _swapData[i].underlyingERC20,\n          _requiredComponents[i]\n        );\n      }\n\n      // ensure obtained component amount covers required component amount for issuance\n      // this is not already covered through _swapToExact because it does not take wrapping into consideration\n      uint256 componentBalanceAfter = IERC20(_requiredComponents[i]).balanceOf(address(this));\n      uint256 componentAmountObtained = componentBalanceAfter.sub(componentBalanceBefore);\n      require(componentAmountObtained >= requiredAmount, \"FlashMint: UNDERBOUGHT_COMPONENT\");\n    }\n\n    // ensure left over input token amount covers issuance for component if input token is one of the Set components\n    require(\n      IERC20(_inputToken).balanceOf(address(this)) >= requiredLeftOverInputTokenAmount,\n      \"FlashMint: NOT_ENOUGH_INPUT\"\n    );\n  }\n\n  /**\n   * Unwraps and then swaps each _redeemComponents sequentially based on _swapData and _unwrapData\n   *\n   * @param _outputToken                Output token that will be bought\n   * @param _swapData                   ComponentSwapData (underlyingERC20 -> output token) for each _redeemComponents in the same order\n   * @param _unwrapData                 ComponentWrapData (wrapped Set component -> underlyingERC20) for each _redeemComponents in the same order\n   * @param _redeemComponents           redemption components gotten from IDebtIssuanceModule.getRequiredComponentRedemptionUnits()\n   * @param _redeemAmounts              redemption units gotten from IDebtIssuanceModule.getRequiredComponentRedemptionUnits()\n   *\n   * @return totalOutputTokenObtained   total output token amount obtained\n   */\n  function _unwrapAndSwapComponents(\n    IERC20 _outputToken,\n    ComponentSwapData[] calldata _swapData,\n    ComponentWrapData[] calldata _unwrapData,\n    address[] memory _redeemComponents,\n    uint256[] memory _redeemAmounts\n  ) internal returns (uint256 totalOutputTokenObtained) {\n    // for each component in the swapData / wrapData / redeemComponents array:\n    // 1. unwrap from wrapped set component to unwrapped underlyingERC20 in swapData\n    // 2. swap from underlyingERC20 token to output token (exact from obtained underlyingERC20 amount)\n\n    for (uint256 i = 0; i < _redeemComponents.length; ++i) {\n      // default redeemed amount is maximum possible amount that was redeemed for this component\n      // this is recomputed if the redeemed amount is unwrapped to the actual unwrapped amount\n      uint256 redeemedAmount = _redeemAmounts[i];\n\n      // if the set component is the output token, no swapping or wrapping is needed\n      if (address(_outputToken) == _redeemComponents[i]) {\n        // add maximum possible amount that was redeemed for this component to totalOutputTokenObtained (=redeemedAmount)\n        totalOutputTokenObtained = totalOutputTokenObtained.add(redeemedAmount);\n        continue;\n      }\n\n      // transform wrapped token into unwrapped version (unless it's the same)\n      if (_swapData[i].underlyingERC20 != _redeemComponents[i]) {\n        // snapshot unwrapped balance before to compute the actual redeemed amount of underlying token (due to unknown exchange rate)\n        uint256 unwrappedBalanceBefore = IERC20(_swapData[i].underlyingERC20).balanceOf(\n          address(this)\n        );\n\n        _unwrapComponent(\n          _unwrapData[i],\n          redeemedAmount,\n          _swapData[i].underlyingERC20,\n          _redeemComponents[i]\n        );\n\n        // recompute actual redeemed amount to the underlyingERC20 token amount obtained through unwrapping\n        uint256 unwrappedBalanceAfter = IERC20(_swapData[i].underlyingERC20).balanceOf(\n          address(this)\n        );\n        redeemedAmount = unwrappedBalanceAfter.sub(unwrappedBalanceBefore);\n      }\n\n      // swap redeemed and unwrapped component to output token\n      uint256 boughtOutputTokenAmount = _swapFromExact(\n        IERC20(_swapData[i].underlyingERC20), // input\n        _outputToken, // output\n        redeemedAmount, // sell amount of input token\n        _swapData[i].dexData // dex path fees data etc.\n      );\n\n      totalOutputTokenObtained = totalOutputTokenObtained.add(boughtOutputTokenAmount);\n    }\n  }\n\n  /**\n   * Swaps _inputToken to exact _amount to _outputToken through _swapDexData\n   *\n   * @param _inputToken           Input token that will be sold\n   * @param _outputToken          Output token that will be bought\n   * @param _amount               Amount that will be bought\n   * @param _maxAmountIn          Maximum aount of input token that can be spent\n   * @param _swapDexData          DEXAdapterV3.SwapData with path, fees, etc. for inputToken -> outputToken swap\n   *\n   * @return Amount of spent _inputToken\n   */\n  function _swapToExact(\n    IERC20 _inputToken,\n    IERC20 _outputToken,\n    uint256 _amount,\n    uint256 _maxAmountIn,\n    DEXAdapterV3.SwapData calldata _swapDexData\n  )\n    internal\n    isValidPath(_swapDexData.path, address(_inputToken), address(_outputToken))\n    returns (uint256)\n  {\n    // safe approves are done right in the dexAdapter library\n    // swaps are skipped there too if inputToken == outputToken (depending on path)\n    return dexAdapter.swapTokensForExactTokens(_amount, _maxAmountIn, _swapDexData);\n  }\n\n  /**\n   * Swaps exact _amount of _inputToken to _outputToken through _swapDexData\n   *\n   * @param _inputToken           Input token that will be sold\n   * @param _outputToken          Output token that will be bought\n   * @param _amount               Amount that will be sold\n   * @param _swapDexData          DEXAdapterV3.SwapData with path, fees, etc. for inputToken -> outputToken swap\n   *\n   * @return amount of received _outputToken\n   */\n  function _swapFromExact(\n    IERC20 _inputToken,\n    IERC20 _outputToken,\n    uint256 _amount,\n    DEXAdapterV3.SwapData calldata _swapDexData\n  )\n    internal\n    isValidPath(_swapDexData.path, address(_inputToken), address(_outputToken))\n    returns (uint256)\n  {\n    // safe approves are done right in the dexAdapter library\n    return\n      dexAdapter.swapExactTokensForTokens(\n        _amount,\n        // _minAmountOut is 0 here since we don't know what to check against because for wrapped components\n        // we only have the required amounts for the wrapped component, but not for the underlying we swap to here\n        // This is covered indirectly in later checks though\n        // e.g. directly through the issue call (not enough _outputToken -> wrappedComponent -> issue will fail)\n        0,\n        _swapDexData\n      );\n  }\n\n  /**\n   * Wraps _wrapAmount of _underlyingToken to _wrappedComponent component\n   *\n   * @param _wrapData                   ComponentWrapData including integration name and optional wrap calldata bytes\n   * @param _wrapAmount                 amount of _underlyingToken to wrap\n   * @param _underlyingToken            underlying (unwrapped) token to wrap from (e.g. DAI)\n   * @param _wrappedToken               wrapped token to wrap to\n   */\n  function _wrapComponent(\n    ComponentWrapData calldata _wrapData,\n    uint256 _wrapAmount,\n    address _underlyingToken,\n    address _wrappedToken\n  ) internal {\n    // 1. get the wrap adapter directly from the integration registry\n\n    // Note we could get the address of the adapter directly in the params instead of the integration name \n    // but that would allow integrators to use their own potentially somehow malicious WrapAdapter\n    // by directly fetching it from our IntegrationRegistry we can be sure that it behaves as expected\n    IWrapV2Adapter _wrapAdapter = IWrapV2Adapter(_getAndValidateAdapter(_wrapData.integrationName));\n\n    // 2. get wrap call info from adapter\n    (address _wrapCallTarget, uint256 _wrapCallValue, bytes memory _wrapCallData) = _wrapAdapter\n      .getWrapCallData(\n        _underlyingToken,\n        _wrappedToken,\n        _wrapAmount,\n        address(this),\n        _wrapData.wrapData\n      );\n\n    // 3. approve token transfer from this to _wrapCallTarget\n    DEXAdapterV3._safeApprove(\n      IERC20(_underlyingToken),\n      _wrapCallTarget,\n      _wrapAmount\n    );\n\n    // 4. invoke wrap function call. we can't check any response value because the implementation might be different \n    // between wrapCallTargets... e.g. compoundV2 would return uint256 with value 0 if successful\n    _wrapCallTarget.functionCallWithValue(_wrapCallData, _wrapCallValue);\n  }\n\n  /**\n   * Unwraps _unwrapAmount of _wrappedToken to _underlyingToken\n   *\n   * @param _unwrapData                 ComponentWrapData including integration name and optional wrap calldata bytes\n   * @param _unwrapAmount                 amount of _underlyingToken to wrap\n   * @param _underlyingToken            underlying (unwrapped) token to unwrap to (e.g. DAI)\n   * @param _wrappedToken               wrapped token to unwrap from\n   */\n  function _unwrapComponent(\n    ComponentWrapData calldata _unwrapData,\n    uint256 _unwrapAmount,\n    address _underlyingToken,\n    address _wrappedToken\n  ) internal {\n    // 1. get the wrap adapter directly from the integration registry\n\n    // Note we could get the address of the adapter directly in the params instead of the integration name \n    // but that would allow integrators to use their own potentially somehow malicious WrapAdapter\n    // by directly fetching it from our IntegrationRegistry we can be sure that it behaves as expected\n    IWrapV2Adapter _wrapAdapter = IWrapV2Adapter(_getAndValidateAdapter(_unwrapData.integrationName));\n\n    // 2. get unwrap call info from adapter\n    (address _wrapCallTarget, uint256 _wrapCallValue, bytes memory _wrapCallData) = _wrapAdapter\n      .getUnwrapCallData(\n        _underlyingToken,\n        _wrappedToken,\n        _unwrapAmount,\n        address(this),\n        _unwrapData.wrapData\n      );\n\n    // 3. invoke unwrap function call. we can't check any response value because the implementation might be different \n    // between wrapCallTargets... e.g. compoundV2 would return uint256 with value 0 if successful\n    _wrapCallTarget.functionCallWithValue(_wrapCallData, _wrapCallValue);\n  }\n\n  /**\n   * Validates that not more than the requested max amount of the input token has been spent\n   *\n   * @param _inputToken                 Address of the input token to return\n   * @param _inputTokenBalanceBefore    input token balance before at the beginning of the operation\n   * @param _maxAmountInputToken        maximum amount that could be spent\n\n   * @return spentInputTokenAmount      actual spent amount of the input token\n   */\n  function _validateMaxAmountInputToken(\n    IERC20 _inputToken,\n    uint256 _inputTokenBalanceBefore,\n    uint256 _maxAmountInputToken\n  ) internal view returns (uint256 spentInputTokenAmount) {\n    uint256 inputTokenBalanceAfter = _inputToken.balanceOf(address(this));\n\n    // _maxAmountInputToken amount has been transferred to this contract after _inputTokenBalanceBefore snapshot\n    spentInputTokenAmount = _inputTokenBalanceBefore.add(_maxAmountInputToken).sub(\n      inputTokenBalanceAfter\n    );\n\n    require(spentInputTokenAmount <= _maxAmountInputToken, \"FlashMint: OVERSPENT_INPUT_TOKEN\");\n  }\n\n  /**\n   * Returns excess input token\n   *\n   * @param _inputToken         Address of the input token to return\n   * @param _receivedAmount     Amount received by the caller\n   * @param _spentAmount        Amount spent for issuance\n   * @param _returnETH          Boolean flag to identify if ETH should be returned or the input token\n   */\n  function _returnExcessInput(\n    IERC20 _inputToken,\n    uint256 _receivedAmount,\n    uint256 _spentAmount,\n    bool _returnETH\n  ) internal {\n    uint256 amountTokenReturn = _receivedAmount.sub(_spentAmount);\n    if (amountTokenReturn > 0) {\n      if (_returnETH) {\n        // unwrap from WETH -> ETH and send ETH amount back to sender\n        IWETH(dexAdapter.weth).withdraw(amountTokenReturn);\n        (payable(msg.sender)).sendValue(amountTokenReturn);\n      } else {\n        _inputToken.safeTransfer(msg.sender, amountTokenReturn);\n      }\n    }\n  }\n\n  /**\n   * Sends the obtained amount of output token / ETH to msg.sender\n   *\n   * @param _outputToken         Address of the output token to return\n   * @param _amount              Amount to transfer\n   * @param _redeemToETH         Boolean flag to identify if ETH or the output token should be sent\n   */\n  function _sendObtainedOutputToSender(\n    IERC20 _outputToken,\n    uint256 _amount,\n    bool _redeemToETH\n  ) internal {\n    if (_redeemToETH) {\n      // unwrap from WETH -> ETH and send ETH amount back to sender\n      IWETH(dexAdapter.weth).withdraw(_amount);\n      (payable(msg.sender)).sendValue(_amount);\n    } else {\n      _outputToken.safeTransfer(msg.sender, _amount);\n    }\n  }\n\n  /**\n   * Gets the integration for the passed in integration name listed on the wrapModule. Validates that the address is not empty\n   *\n   * @param _integrationName      Name of wrap adapter integration (mapping on integration registry)\n   *\n   * @return adapter              address of the wrap adapter\n   */\n  function _getAndValidateAdapter(string memory _integrationName)\n    internal\n    view\n    returns (address adapter)\n  {\n    // integration registry has resourceId 0, see library ResourceIdentifier\n    // @dev could also be accomplished with using ResourceIdentifier for IController but this results in less bloat in the repo\n    IIntegrationRegistry integrationRegistry = IIntegrationRegistry(setController.resourceId(0));\n\n    adapter = integrationRegistry.getIntegrationAdapterWithHash(\n      wrapModule,\n      keccak256(bytes(_integrationName))\n    );\n\n    require(adapter != address(0), \"FlashMint: WRAP_ADAPTER_INVALID\");\n  }\n}\n"
    },
    "contracts/interfaces/IController.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\npragma solidity 0.6.10;\n\ninterface IController {\n    function addSet(address _setToken) external;\n    function feeRecipient() external view returns(address);\n    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\n    function isModule(address _module) external view returns(bool);\n    function isSet(address _setToken) external view returns(bool);\n    function isSystemContract(address _contractAddress) external view returns (bool);\n    function isResource(address _resource) external view returns(bool);\n    function resourceId(uint256 _id) external view returns(address);\n    function owner() external view returns(address);\n    function addFactory(address _factory) external;\n    function addModule(address _module) external;\n}\n"
    },
    "contracts/interfaces/IDebtIssuanceModule.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\npragma solidity >=0.6.10;\n\nimport { ISetToken } from \"./ISetToken.sol\";\nimport { IManagerIssuanceHook } from \"./IManagerIssuanceHook.sol\";\n\ninterface IDebtIssuanceModule {\n    function getRequiredComponentIssuanceUnits(\n        ISetToken _setToken,\n        uint256 _quantity\n    ) external view returns (address[] memory, uint256[] memory, uint256[] memory);\n    function getRequiredComponentRedemptionUnits(\n        ISetToken _setToken,\n        uint256 _quantity\n    ) external view returns (address[] memory, uint256[] memory, uint256[] memory);\n    function issue(ISetToken _setToken, uint256 _quantity, address _to) external;\n    function redeem(ISetToken _token, uint256 _quantity, address _to) external;\n    function initialize(\n        ISetToken _setToken,\n        uint256 _maxManagerFee,\n        uint256 _managerIssueFee,\n        uint256 _managerRedeemFee,\n        address _feeRecipient,\n        IManagerIssuanceHook _managerIssuanceHook\n    ) external;\n}\n"
    },
    "contracts/interfaces/IIntegrationRegistry.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\npragma solidity 0.6.10;\n\ninterface IIntegrationRegistry {\n  function addIntegration(\n    address _module,\n    string memory _id,\n    address _wrapper\n  ) external;\n\n  function getIntegrationAdapter(address _module, string memory _id)\n    external\n    view\n    returns (address);\n\n  function getIntegrationAdapterWithHash(address _module, bytes32 _id)\n    external\n    view\n    returns (address);\n\n  function isValidIntegration(address _module, string memory _id) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IManagerIssuanceHook.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\npragma solidity 0.6.10;\n\nimport { ISetToken } from \"./ISetToken.sol\";\n\ninterface IManagerIssuanceHook {\n    function invokePreIssueHook(ISetToken _setToken, uint256 _issueQuantity, address _sender, address _to) external;\n    function invokePreRedeemHook(ISetToken _setToken, uint256 _redeemQuantity, address _sender, address _to) external;\n}"
    },
    "contracts/interfaces/IQuoter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.6.10;\npragma experimental ABIEncoderV2;\n\n/// @title Quoter Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IQuoter {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param fee The fee of the token pool to consider for the pair\n    /// @param amountIn The desired input amount\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    function quoteExactInputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountIn,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountOut);\n\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    /// @param amountOut The amount of the last token to receive\n    /// @return amountIn The amount of first token required to be paid\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\n\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param fee The fee of the token pool to consider for the pair\n    /// @param amountOut The desired output amount\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n    function quoteExactOutputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountOut,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountIn);\n}"
    },
    "contracts/interfaces/ISetToken.sol": {
      "content": "// SPDX-License-Identifier: Apache License, Version 2.0\npragma solidity 0.6.10;\npragma experimental \"ABIEncoderV2\";\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title ISetToken\n * @author Set Protocol\n *\n * Interface for operating with SetTokens.\n */\ninterface ISetToken is IERC20 {\n\n    /* ============ Enums ============ */\n\n    enum ModuleState {\n        NONE,\n        PENDING,\n        INITIALIZED\n    }\n\n    /* ============ Structs ============ */\n    /**\n     * The base definition of a SetToken Position\n     *\n     * @param component           Address of token in the Position\n     * @param module              If not in default state, the address of associated module\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\n     * @param positionState       Position ENUM. Default is 0; External is 1\n     * @param data                Arbitrary data\n     */\n    struct Position {\n        address component;\n        address module;\n        int256 unit;\n        uint8 positionState;\n        bytes data;\n    }\n\n    /**\n     * A struct that stores a component's cash position details and external positions\n     * This data structure allows O(1) access to a component's cash position units and\n     * virtual units.\n     *\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\n     *                                  by dividing a \"real\" value by the \"positionMultiplier\"\n     * @param componentIndex\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\n     *                                  maps to an external position\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\n     */\n    struct ComponentPosition {\n      int256 virtualUnit;\n      address[] externalPositionModules;\n      mapping(address => ExternalPosition) externalPositions;\n    }\n\n    /**\n     * A struct that stores a component's external position details including virtual unit and any\n     * auxiliary data.\n     *\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\n     * @param data              Arbitrary data\n     */\n    struct ExternalPosition {\n      int256 virtualUnit;\n      bytes data;\n    }\n\n\n    /* ============ Functions ============ */\n\n    function controller() external view returns (address);\n\n    function addComponent(address _component) external;\n    function removeComponent(address _component) external;\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\n    function addExternalPositionModule(address _component, address _positionModule) external;\n    function removeExternalPositionModule(address _component, address _positionModule) external;\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\n\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\n\n    function editPositionMultiplier(int256 _newMultiplier) external;\n\n    function mint(address _account, uint256 _quantity) external;\n    function burn(address _account, uint256 _quantity) external;\n\n    function lock() external;\n    function unlock() external;\n\n    function addModule(address _module) external;\n    function removeModule(address _module) external;\n    function initializeModule() external;\n\n    function setManager(address _manager) external;\n\n    function manager() external view returns (address);\n    function moduleStates(address _module) external view returns (ModuleState);\n    function getModules() external view returns (address[] memory);\n\n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\n    function getComponents() external view returns(address[] memory);\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\n    function isComponent(address _component) external view returns(bool);\n\n    function positionMultiplier() external view returns (int256);\n    function getPositions() external view returns (Position[] memory);\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\n\n    function isInitializedModule(address _module) external view returns(bool);\n    function isPendingModule(address _module) external view returns(bool);\n    function isLocked() external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: Apache License, Version 2.0\npragma solidity >=0.6.10;\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n"
    },
    "contracts/interfaces/IWrapModuleV2.sol": {
      "content": "/*\n    Copyright 2022 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\n\npragma solidity 0.6.10;\npragma experimental \"ABIEncoderV2\";\n\nimport { ISetToken } from \"./ISetToken.sol\";\nimport { IWETH } from \"./IWETH.sol\";\n\ninterface IWrapModuleV2 {\n    function weth() external view returns(IWETH);\n\n    function initialize(ISetToken _setToken) external;\n\n    function wrap(\n        ISetToken _setToken,\n        address _underlyingToken,\n        address _wrappedToken,\n        uint256 _underlyingUnits,\n        string calldata _integrationName,\n        bytes memory _wrapData\n    ) external;\n\n    function wrapWithEther(\n        ISetToken _setToken,\n        address _wrappedToken,\n        uint256 _underlyingUnits,\n        string calldata _integrationName,\n        bytes memory _wrapData\n    ) external;\n\n    function unwrap(\n        ISetToken _setToken,\n        address _underlyingToken,\n        address _wrappedToken,\n        uint256 _wrappedUnits,\n        string calldata _integrationName,\n        bytes memory _unwrapData\n    ) external;\n\n    function unwrapWithEther(\n        ISetToken _setToken,\n        address _wrappedToken,\n        uint256 _wrappedUnits,\n        string calldata _integrationName,\n        bytes memory _unwrapData\n    ) external;\n}\n"
    },
    "contracts/interfaces/IWrapV2Adapter.sol": {
      "content": "/*\n    Copyright 2021 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\npragma solidity 0.6.10;\n\n/**\n * @title IWrapV2Adapter\n * @author Set Protocol\n */\ninterface IWrapV2Adapter {\n  function ETH_TOKEN_ADDRESS() external view returns (address);\n\n  function getWrapCallData(\n    address _underlyingToken,\n    address _wrappedToken,\n    uint256 _underlyingUnits,\n    address _to,\n    bytes memory _wrapData\n  )\n    external\n    view\n    returns (\n      address _subject,\n      uint256 _value,\n      bytes memory _calldata\n    );\n\n  function getUnwrapCallData(\n    address _underlyingToken,\n    address _wrappedToken,\n    uint256 _wrappedTokenUnits,\n    address _to,\n    bytes memory _unwrapData\n  )\n    external\n    view\n    returns (\n      address _subject,\n      uint256 _value,\n      bytes memory _calldata\n    );\n\n  function getSpenderAddress(address _underlyingToken, address _wrappedToken)\n    external\n    view\n    returns (address);\n}\n"
    },
    "contracts/interfaces/external/ICurveAddressProvider.sol": {
      "content": "/*\n    Copyright 2022 Index Cooperative\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\npragma solidity 0.6.10;\npragma experimental ABIEncoderV2;\n\n// Implementation: https://etherscan.io/address/0x0000000022d53366457f9d5e68ec105046fc4383#readContract\ninterface ICurveAddressProvider {\n    function get_registry() external view returns(address);\n    function get_address(uint256 _id) external view returns(address);\n}\n"
    },
    "contracts/interfaces/external/ICurveCalculator.sol": {
      "content": "/*\n    Copyright 2022 Index Cooperative\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\npragma solidity 0.6.10;\npragma experimental ABIEncoderV2;\n\n// Implementation: https://etherscan.io/address/0xc1DB00a8E5Ef7bfa476395cdbcc98235477cDE4E#readContract\ninterface ICurveCalculator {\n    function get_dx(\n        int128 n_coins,\n        uint256[8] memory balances,\n        uint256 amp,\n        uint256 fee,\n        uint256[8] memory rates,\n        uint256[8] memory precisions,\n        bool underlying,\n        int128 i,\n        int128 j,\n        uint256 dy\n    ) external view returns(uint256);\n\n    function get_dy(\n        int128 n_coins,\n        uint256[8] memory balances,\n        uint256 amp,\n        uint256 fee,\n        uint256[8] memory rates,\n        uint256[8] memory precisions,\n        bool underlying,\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns(uint256);\n}\n"
    },
    "contracts/interfaces/external/ICurvePool.sol": {
      "content": "\n/*\n    Copyright 2022 Index Cooperative\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\npragma solidity 0.6.10;\npragma experimental ABIEncoderV2;\n\n// Implementation: https://etherscan.io/address/0x8e764bE4288B842791989DB5b8ec067279829809#writeContract\ninterface ICurvePool {\n    function exchange(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external payable returns (uint256);\n\n    function get_dy(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/external/ICurvePoolRegistry.sol": {
      "content": "/*\n    Copyright 2022 Index Cooperative\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\npragma solidity 0.6.10;\npragma experimental ABIEncoderV2;\n\n// Implementation: https://etherscan.io/address/0x90E00ACe148ca3b23Ac1bC8C240C2a7Dd9c2d7f5#readContract\ninterface ICurvePoolRegistry {\n    // amplification factor\n    function get_A(address _pool) external view returns(uint256);\n    function get_balances(address _pool) external view returns(uint256[8] memory);\n    function get_coins(address _pool) external view returns(address[8] memory);\n    function get_coin_indices(address _pool, address _from, address _to) external view returns(int128, int128, bool);\n    function get_decimals(address _pool) external view returns(uint256[8] memory);\n    function get_n_coins(address _pool) external view returns(uint256[2] memory);\n    function get_fees(address _pool) external view returns(uint256[2] memory);\n    function get_rates(address _pool) external view returns(uint256[8] memory);\n}\n"
    },
    "contracts/interfaces/external/ISwapRouter02.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.6.10;\npragma experimental ABIEncoderV2;\n\ninterface ISwapRouter02 {\n    struct IncreaseLiquidityParams {\n        address token0;\n        address token1;\n        uint256 tokenId;\n        uint256 amount0Min;\n        uint256 amount1Min;\n    }\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n    }\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    function WETH9() external view returns (address);\n    function approveMax(address token) external payable;\n    function approveMaxMinusOne(address token) external payable;\n    function approveZeroThenMax(address token) external payable;\n    function approveZeroThenMaxMinusOne(address token) external payable;\n    function callPositionManager(bytes memory data) external payable returns (bytes memory result);\n    function checkOracleSlippage(\n        bytes[] memory paths,\n        uint128[] memory amounts,\n        uint24 maximumTickDivergence,\n        uint32 secondsAgo\n    ) external view;\n    function checkOracleSlippage(bytes memory path, uint24 maximumTickDivergence, uint32 secondsAgo) external view;\n    function exactInput(ExactInputParams memory params) external payable returns (uint256 amountOut);\n    function exactInputSingle(ExactInputSingleParams memory params) external payable returns (uint256 amountOut);\n    function exactOutput(ExactOutputParams memory params) external payable returns (uint256 amountIn);\n    function exactOutputSingle(ExactOutputSingleParams memory params) external payable returns (uint256 amountIn);\n    function factory() external view returns (address);\n    function factoryV2() external view returns (address);\n    function getApprovalType(address token, uint256 amount) external returns (uint8);\n    function increaseLiquidity(IncreaseLiquidityParams memory params) external payable returns (bytes memory result);\n    function mint(MintParams memory params) external payable returns (bytes memory result);\n    function multicall(bytes32 previousBlockhash, bytes[] memory data) external payable returns (bytes[] memory);\n    function multicall(uint256 deadline, bytes[] memory data) external payable returns (bytes[] memory);\n    function multicall(bytes[] memory data) external payable returns (bytes[] memory results);\n    function positionManager() external view returns (address);\n    function pull(address token, uint256 value) external payable;\n    function refundETH() external payable;\n    function selfPermit(address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n    external\n    payable;\n    function selfPermitAllowed(address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)\n    external\n    payable;\n    function selfPermitAllowedIfNecessary(address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)\n    external\n    payable;\n    function selfPermitIfNecessary(address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n    external\n    payable;\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] memory path, address to)\n    external\n    payable\n    returns (uint256 amountOut);\n    function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] memory path, address to)\n    external\n    payable\n    returns (uint256 amountIn);\n    function sweepToken(address token, uint256 amountMinimum, address recipient) external payable;\n    function sweepToken(address token, uint256 amountMinimum) external payable;\n    function sweepTokenWithFee(address token, uint256 amountMinimum, uint256 feeBips, address feeRecipient)\n    external\n    payable;\n    function sweepTokenWithFee(\n        address token,\n        uint256 amountMinimum,\n        address recipient,\n        uint256 feeBips,\n        address feeRecipient\n    ) external payable;\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes memory _data) external;\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n    function unwrapWETH9(uint256 amountMinimum) external payable;\n    function unwrapWETH9WithFee(uint256 amountMinimum, address recipient, uint256 feeBips, address feeRecipient)\n    external\n    payable;\n    function unwrapWETH9WithFee(uint256 amountMinimum, uint256 feeBips, address feeRecipient) external payable;\n    function wrapETH(uint256 value) external payable;\n}\n"
    },
    "contracts/interfaces/external/balancer-v2/IVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.6.10 <0.9.0;\npragma experimental ABIEncoderV2;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IFlashLoanRecipient {\n    /**\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\n     *\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\n     * Vault, or else the entire flash loan will revert.\n     *\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\n     */\n    function receiveFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external;\n}\n\n/**\n * Stripped down interface of IVault.\n * https://github.com/balancer/balancer-v2-monorepo/blob/master/pkg/interfaces/contracts/vault/IVault.sol\n */\ninterface IVault {\n  // Swaps\n  //\n  // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\n  // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\n  // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\n  //\n  // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\n  // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\n  // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\n  // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\n  // individual swaps.\n  //\n  // There are two swap kinds:\n  //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\n  // `onSwap` hook) the amount of tokens out (to send to the recipient).\n  //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\n  // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\n  //\n  // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\n  // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\n  // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\n  // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\n  // the final intended token.\n  //\n  // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\n  // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\n  // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\n  // much less gas than they would otherwise.\n  //\n  // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\n  // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\n  // updating the Pool's internal accounting).\n  //\n  // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\n  // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\n  // minimum amount of tokens to receive (by passing a negative value) is specified.\n  //\n  // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\n  // this point in time (e.g. if the transaction failed to be included in a block promptly).\n  //\n  // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\n  // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\n  // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\n  // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\n  //\n  // Finally, Internal Balance can be used when either sending or receiving tokens.\n\n  enum SwapKind {\n    GIVEN_IN,\n    GIVEN_OUT\n  }\n\n  /**\n   * @dev Performs a swap with a single Pool.\n   *\n   * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n   * taken from the Pool, which must be greater than or equal to `limit`.\n   *\n   * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n   * sent to the Pool, which must be less than or equal to `limit`.\n   *\n   * Internal Balance usage and the recipient are determined by the `funds` struct.\n   *\n   * Emits a `Swap` event.\n   */\n  function swap(\n    SingleSwap memory singleSwap,\n    FundManagement memory funds,\n    uint256 limit,\n    uint256 deadline\n  ) external payable returns (uint256);\n\n  /**\n   * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\n   * the `kind` value.\n   *\n   * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\n   * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\n   *\n   * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n   * used to extend swap behavior.\n   */\n  struct SingleSwap {\n    bytes32 poolId;\n    SwapKind kind;\n    address assetIn;\n    address assetOut;\n    uint256 amount;\n    bytes userData;\n  }\n\n  /**\n   * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\n   * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\n   *\n   * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n   * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n   * the same index in the `assets` array.\n   *\n   * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\n   * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\n   * `amountOut` depending on the swap kind.\n   *\n   * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\n   * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\n   * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\n   *\n   * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\n   * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\n   * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\n   * or unwrapped from WETH by the Vault.\n   *\n   * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\n   * the minimum or maximum amount of each token the vault is allowed to transfer.\n   *\n   * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\n   * equivalent `swap` call.\n   *\n   * Emits `Swap` events.\n   */\n  function batchSwap(\n    SwapKind kind,\n    BatchSwapStep[] memory swaps,\n    address[] memory assets,\n    FundManagement memory funds,\n    int256[] memory limits,\n    uint256 deadline\n  ) external payable returns (int256[] memory);\n\n  /**\n   * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\n   * `assets` array passed to that function, and ETH assets are converted to WETH.\n   *\n   * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\n   * from the previous swap, depending on the swap kind.\n   *\n   * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n   * used to extend swap behavior.\n   */\n  struct BatchSwapStep {\n    bytes32 poolId;\n    uint256 assetInIndex;\n    uint256 assetOutIndex;\n    uint256 amount;\n    bytes userData;\n  }\n\n  /**\n   * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\n   */\n  event Swap(\n    bytes32 indexed poolId,\n    IERC20 indexed tokenIn,\n    IERC20 indexed tokenOut,\n    uint256 amountIn,\n    uint256 amountOut\n  );\n\n  /**\n   * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\n   * `recipient` account.\n   *\n   * If the caller is not `sender`, it must be an authorized relayer for them.\n   *\n   * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\n   * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\n   * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\n   * `joinPool`.\n   *\n   * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\n   * transferred. This matches the behavior of `exitPool`.\n   *\n   * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\n   * revert.\n   */\n  struct FundManagement {\n    address sender;\n    bool fromInternalBalance;\n    address payable recipient;\n    bool toInternalBalance;\n  }\n\n  /**\n   * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n   * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n   *\n   * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n   * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n   * receives are the same that an equivalent `batchSwap` call would receive.\n   *\n   * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\n   * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\n   * approve them for the Vault, or even know a user's address.\n   *\n   * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\n   * eth_call instead of eth_sendTransaction.\n   */\n  function queryBatchSwap(\n    SwapKind kind,\n    BatchSwapStep[] memory swaps,\n    address[] memory assets,\n    FundManagement memory funds\n  ) external returns (int256[] memory assetDeltas);\n\n      // Flash Loans\n\n    /**\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\n     *\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\n     * for each token contract. `tokens` must be sorted in ascending order.\n     *\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\n     * `receiveFlashLoan` call.\n     *\n     * Emits `FlashLoan` events.\n     */\n    function flashLoan(\n        IFlashLoanRecipient recipient,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        bytes memory userData\n    ) external;\n\n    /**\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\n     */\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\n\n}"
    },
    "contracts/lib/PreciseUnitMath.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\n\npragma solidity 0.6.10;\npragma experimental ABIEncoderV2;\n\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport { SignedSafeMath } from \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\n/**\n * @title PreciseUnitMath\n * @author Set Protocol\n *\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\n * dYdX's BaseMath library.\n *\n * CHANGELOG:\n * - 9/21/20: Added safePower function\n */\nlibrary PreciseUnitMath {\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    // The number One in precise units.\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\n\n    // Max unsigned integer value\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\n    // Max and min signed integer value\n    int256 constant internal MAX_INT_256 = type(int256).max;\n    int256 constant internal MIN_INT_256 = type(int256).min;\n\n    /**\n     * @dev Getter function since constants can't be read directly from libraries.\n     */\n    function preciseUnit() internal pure returns (uint256) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @dev Getter function since constants can't be read directly from libraries.\n     */\n    function preciseUnitInt() internal pure returns (int256) {\n        return PRECISE_UNIT_INT;\n    }\n\n    /**\n     * @dev Getter function since constants can't be read directly from libraries.\n     */\n    function maxUint256() internal pure returns (uint256) {\n        return MAX_UINT_256;\n    }\n\n    /**\n     * @dev Getter function since constants can't be read directly from libraries.\n     */\n    function maxInt256() internal pure returns (int256) {\n        return MAX_INT_256;\n    }\n\n    /**\n     * @dev Getter function since constants can't be read directly from libraries.\n     */\n    function minInt256() internal pure returns (int256) {\n        return MIN_INT_256;\n    }\n\n    /**\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\n     * of a number with 18 decimals precision.\n     */\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a.mul(b).div(PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\n     * significand of a number with 18 decimals precision.\n     */\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\n        return a.mul(b).div(PRECISE_UNIT_INT);\n    }\n\n    /**\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\n     * of a number with 18 decimals precision.\n     */\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\n    }\n\n    /**\n     * @dev Divides value a by value b (result is rounded down).\n     */\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a.mul(PRECISE_UNIT).div(b);\n    }\n\n\n    /**\n     * @dev Divides value a by value b (result is rounded towards 0).\n     */\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\n        return a.mul(PRECISE_UNIT_INT).div(b);\n    }\n\n    /**\n     * @dev Divides value a by value b (result is rounded up or away from 0).\n     */\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"Cant divide by 0\");\n\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\n    }\n\n    /**\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\n     */\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"Cant divide by 0\");\n        require(a != MIN_INT_256 || b != -1, \"Invalid input\");\n\n        int256 result = a.div(b);\n        if (a ^ b < 0 && a % b != 0) {\n            result -= 1;\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Multiplies value a by value b where rounding is towards the lesser number. \n     * (positive values are rounded towards zero and negative values are rounded away from 0). \n     */\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\n    }\n\n    /**\n     * @dev Divides value a by value b where rounding is towards the lesser number. \n     * (positive values are rounded towards zero and negative values are rounded away from 0). \n     */\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\n    }\n\n    /**\n    * @dev Performs the power on a specified value, reverts on overflow.\n    */\n    function safePower(\n        uint256 a,\n        uint256 pow\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        require(a > 0, \"Value must be positive\");\n\n        uint256 result = 1;\n        for (uint256 i = 0; i < pow; i++){\n            uint256 previousResult = result;\n\n            // Using safemath multiplication prevents overflows\n            result = previousResult.mul(a);\n        }\n\n        return result;\n    }\n}\n"
    }
  }
}}