{{
  "language": "Solidity",
  "sources": {
    "V1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// Written by Gatsby to enable advanced trading functionality with stop-loss, limit orders, and liquidity management.\r\n// This contract allows users to execute secure and automated trades on decentralized exchanges.\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface IUniswapV3 {\r\n    function exactInputSingle() external returns (uint256 amountOut);\r\n}\r\n\r\ninterface IPriceOracle {\r\n    function getLatestPrice() external view returns (uint256);\r\n}\r\n\r\ncontract GatsbyAdvancedTradingV1 is ReentrancyGuard, Ownable {\r\n    IUniswapV3 public uniswapV3Router;\r\n    IPriceOracle public priceOracle;\r\n    \r\n    event TradeExecuted(\r\n        address indexed trader, \r\n        uint256 amountIn, \r\n        uint256 amountOut, \r\n        string orderType, \r\n        uint256 executionPrice\r\n    );\r\n    \r\n    event PriceSlippageDetected(uint256 requestedPrice, uint256 actualPrice);\r\n    event OracleUpdate(address newOracle);\r\n\r\n    constructor(address _uniswapV3Router, address _priceOracle, address _initialOwner) Ownable(_initialOwner) {\r\n        uniswapV3Router = IUniswapV3(_uniswapV3Router);\r\n        priceOracle = IPriceOracle(_priceOracle);\r\n    }\r\n\r\n    modifier validatePrice(uint256 targetPrice) {\r\n        uint256 currentPrice = getPriceFromOracle();\r\n        require(currentPrice >= targetPrice, \"Price mismatch: slippage too high\");\r\n        if (currentPrice != targetPrice) {\r\n            emit PriceSlippageDetected(targetPrice, currentPrice);\r\n        }\r\n        _;\r\n    }\r\n\r\n    function executeLimitOrder(uint256 amountIn, uint256 amountOutMin, uint256 targetPrice) \r\n        public nonReentrant validatePrice(targetPrice) \r\n    {\r\n        uint256 amountOut = uniswapV3Router.exactInputSingle();\r\n        require(amountOut >= amountOutMin, \"Insufficient output: Slippage too high\");\r\n\r\n        emit TradeExecuted(msg.sender, amountIn, amountOut, \"Limit Order\", targetPrice);\r\n    }\r\n\r\n    function executeStopLossOrder(uint256 amountIn, uint256 stopLossPrice) public nonReentrant {\r\n        uint256 currentPrice = getPriceFromOracle();\r\n        require(currentPrice <= stopLossPrice, \"Stop-loss price not met\");\r\n\r\n        uint256 amountOut = uniswapV3Router.exactInputSingle();\r\n\r\n        emit TradeExecuted(msg.sender, amountIn, amountOut, \"Stop-Loss Order\", currentPrice);\r\n    }\r\n\r\n    function getPriceFromOracle() internal view returns (uint256) {\r\n        uint256 latestPrice = priceOracle.getLatestPrice();\r\n        require(latestPrice > 0, \"Invalid price from Oracle\");\r\n        return latestPrice;\r\n    }\r\n\r\n    function updatePriceOracle(address _newOracle) public onlyOwner {\r\n        priceOracle = IPriceOracle(_newOracle);\r\n        emit OracleUpdate(_newOracle);\r\n    }\r\n\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}