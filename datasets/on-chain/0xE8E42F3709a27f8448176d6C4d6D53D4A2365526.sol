{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/voltargetBTC/common/HoldTime.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Every.finance Contracts\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @dev Implementation of the contract HoldTime.\n * It allows to update average hold time of the yield-bearing token.\n */\n\ncontract HoldTime is Ownable {\n\taddress public token;\n\tmapping(address => uint256) private holdTimes;\n\n\tevent UpdateToken(address indexed token_);\n\tevent UpdateHoldTime(\n\t\taddress indexed account_,\n\t\tuint256 oldHoldTime_,\n\t\tuint256 newHoldTime_\n\t);\n\n\t/**\n\t * @dev Update token.\n\t * @param token_ token's address\n\t * @notice Emits a {UpdateToken} event indicating the updated token `token_`.\n\t */\n\tfunction updateToken(address token_) external onlyOwner {\n\t\trequire(token_ != address(0), \"Every.finance: zero address\");\n\t\trequire(token_ != token, \"Every.finance: no change\");\n\t\ttoken = token_;\n\t\temit UpdateToken(token_);\n\t}\n\n\t/**\n\t * @dev update HoldTimes.\n\t * @param account_ account's address.\n\t * @param amount_  token amount.\n\t * Emits a {UpdateHoldTime} event with `account_`, `oldHoldTime_` and `newHoldTime_`.\n\t */\n\tfunction updateHoldTime(address account_, uint256 amount_) external {\n\t\trequire(msg.sender == token, \"Every.finance: caller is not token\");\n\t\tuint256 oldAmount_ = IERC20(token).balanceOf(account_);\n\t\tuint256 oldHoldTime_ = holdTimes[account_];\n\t\tuint256 newHoldTime_ = (oldAmount_ *\n\t\t\toldHoldTime_ +\n\t\t\tblock.timestamp *\n\t\t\tamount_) / (oldAmount_ + amount_);\n\t\tholdTimes[account_] = newHoldTime_;\n\t\temit UpdateHoldTime(account_, oldHoldTime_, newHoldTime_);\n\t}\n\n\t/**\n\t * @dev get hold time.\n\t * @param account_ investor's address.\n\t * @return time_ hold time.\n\t */\n\tfunction getHoldTime(address account_) public view returns (uint256 time_) {\n\t\ttime_ = holdTimes[account_];\n\t}\n}\n"
    },
    "contracts/voltargetBTC/common/Investment.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Every.finance Contracts\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"../libraries/FeeMinter.sol\";\nimport \"./Management.sol\";\nimport \"./Proof.sol\";\nimport \"./Token.sol\";\n\n/**\n * @dev Implementation of the contract Investment.\n * It allows the investor to depositProof/withdraw funds and the manager to validate\n * the depositProof/withdrawalProof investor requests.\n */\n\ncontract Investment is AccessControlEnumerable, Pausable {\n\tusing Math for uint256;\n\tbytes32 public constant PROOF = keccak256(\"PROOF\");\n\tbytes32 public constant MANAGER = keccak256(\"MANAGER\");\n\tuint256 public constant MAX_PRICE = type(uint256).max;\n\tstruct Oracle {\n\t\taddress oracle0;\n\t\taddress oracle1;\n\t}\n\tuint256 public currentEventId;\n\tuint256 public tokenPrice;\n\tuint256 public tokenPriceMean;\n\tuint256 public managementFeeLastTime;\n\tuint256 public depositProofTokenId;\n\tuint256 public withdrawalProofTokenId;\n\tuint256 public eventBatchSize;\n\tuint256 public lastPerformanceFee;\n\tuint256 public lastManagementFee;\n\tuint256 public totalPerformanceFee;\n\tuint256 public totalManagementFee;\n\taddress public asset;\n\tToken public token;\n\tManagement public management;\n\tProof public depositProof;\n\tProof public withdrawalProof;\n\tmapping(address => bool) public allowedAssetsForDeposit;\n\tmapping(address => bool) public allowedAssetsForWithdrawal;\n\tmapping(address => uint256) public totalDepositedAsset;\n\tmapping(address => Oracle) public oracles;\n\tmapping(address => bool) public privateInvestors;\n\tevent UpdateManagement(address indexed management_);\n\tevent UpdateDepositProof(address indexed depositProof_);\n\tevent UpdateWithdrawalProof(address indexed withdrawalProof_);\n\tevent UpdateManagementParity(address indexed managementParity_);\n\tevent UpdateToken(address indexed token_);\n\tevent UpdateAsset(address indexed asset_);\n\tevent UpdateAssetForDeposit(address indexed asset_, bool state_);\n\tevent UpdateAssetForWithdrawal(address indexed asset_, bool state_);\n\tevent UpdateOracle(\n\t\taddress indexed asset_,\n\t\taddress oracle0_,\n\t\taddress oracle1_\n\t);\n\tevent UpdatePrivateInvestor(address indexed account_, bool state_);\n\tevent UpdateEventBatchSize(uint256 eventBatchSize_);\n\tevent DepositRequest(\n\t\taddress indexed account_,\n\t\taddress indexed asset_,\n\t\tuint256 amount_\n\t);\n\tevent CancelDepositRequest(\n\t\taddress indexed account_,\n\t\taddress indexed asset_,\n\t\tuint256 amount_\n\t);\n\tevent WithdrawalRequest(address indexed account_, uint256 amount_);\n\tevent CancelWithdrawalRequest(address indexed account_, uint256 amount_);\n\tevent StartNextEvent(uint256 tokenPrice, uint256 currentEventId);\n\n\tevent Validatedeposit(\n\t\tuint256 indexed tokenId_,\n\t\tuint256 validatedAmount_,\n\t\tuint256 mintedAmount_\n\t);\n\tevent Validatewithdrawal(\n\t\tuint256 indexed tokenId_,\n\t\tuint256 validatedAmount_,\n\t\tuint256 SentAmount_\n\t);\n\tevent MintPerformanceFee(uint256 performanceFee_);\n\tevent MintManagementFee(uint256 managementFee_);\n\tevent MintOrBurnInvestmentFee(\n\t\tuint256 amount_,\n\t\tbool isFee_,\n\t\tuint256 remainingAmount_\n\t);\n\n\tconstructor(\n\t\taddress token_,\n\t\taddress asset_,\n\t\taddress management_,\n\t\taddress depositProof_,\n\t\taddress withdrawalProof_,\n\t\taddress admin_\n\t) payable {\n\t\trequire(token_ != address(0), \"Every.finance: zero address\");\n\t\trequire(management_ != address(0), \"Every.finance: zero address\");\n\t\trequire(depositProof_ != address(0), \"Every.finance: zero address\");\n\t\trequire(withdrawalProof_ != address(0), \"Every.finance: zero address\");\n\t\trequire(admin_ != address(0), \"Every.finance: zero address\");\n\t\ttoken = Token(token_);\n\t\tmanagement = Management(management_);\n\t\tdepositProof = Proof(depositProof_);\n\t\twithdrawalProof = Proof(withdrawalProof_);\n\t\tif (asset_ != address(0)) {\n\t\t\t(bool success_, uint8 assetDecimals_) = AssetTransfer\n\t\t\t\t.tryGetAssetDecimals(IERC20(asset_));\n\t\t\trequire(success_, \"Every.finance: no decimal\");\n\t\t\trequire(assetDecimals_ <= uint8(18), \"Every.finance: max decimal\");\n\t\t}\n\t\tasset = asset_;\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, admin_);\n\t\t_setupRole(PROOF, address(depositProof_));\n\t\t_setupRole(PROOF, address(withdrawalProof_));\n\t}\n\n\treceive() external payable {}\n\n\t/**\n\t * @dev Update management.\n\t * @param management_ management contract address\n\t * Emits an {UpdateManagement} event indicating the updated management contract.\n\t */\n\tfunction updateManagement(\n\t\taddress management_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\trequire(management_ != address(0), \"Every.finance: zero address\");\n\t\trequire(management_ != address(management), \"Every.finance: no change\");\n\t\tmanagement = Management(management_);\n\t\temit UpdateManagement(management_);\n\t}\n\n\t/**\n\t * @dev Update depositProof.\n\t * @param depositProof_ depositProof contract address\n\t * Emits an {UpdateDepositProof} event indicating the updated depositProof contract.\n\t */\n\tfunction updateDepositProof(\n\t\taddress depositProof_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\trequire(depositProof_ != address(0), \"Every.finance: zero address\");\n\t\trequire(\n\t\t\tdepositProof_ != address(depositProof),\n\t\t\t\"Every.finance: no change\"\n\t\t);\n\t\t_revokeRole(PROOF, address(depositProof));\n\t\t_grantRole(PROOF, depositProof_);\n\t\tdepositProof = Proof(depositProof_);\n\t\temit UpdateDepositProof(depositProof_);\n\t}\n\n\t/**\n\t * @dev Update withdrawalProof.\n\t * @param withdrawalProof_ withdrawalProof contract address\n\t * Emits an {UpdateWithdrawalProof} event indicating the updated withdrawalProof contract.\n\t */\n\tfunction updateWithdrawalProof(\n\t\taddress withdrawalProof_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\trequire(withdrawalProof_ != address(0), \"Every.finance: zero address\");\n\t\trequire(\n\t\t\twithdrawalProof_ != address(withdrawalProof),\n\t\t\t\"Every.finance: no change\"\n\t\t);\n\t\t_revokeRole(PROOF, address(withdrawalProof));\n\t\t_grantRole(PROOF, withdrawalProof_);\n\t\twithdrawalProof = Proof(withdrawalProof_);\n\t\temit UpdateWithdrawalProof(withdrawalProof_);\n\t}\n\n\t/**\n\t * @dev Update the yield-bearing token address.\n\t * @param token_ token's address.\n\t * Emits an {UpdateToken} event indicating the updated token's address.\n\t */\n\tfunction updateToken(address token_) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\trequire(token_ != address(0), \"Every.finance: zero address\");\n\t\trequire(token_ != address(token), \"Every.finance: no change\");\n\t\ttoken = Token(token_);\n\t\temit UpdateToken(token_);\n\t}\n\n\t/**\n\t * @dev Update the reference asset.\n\t * @param asset_ asset's address.\n\t * Emits an {UpdateAsset} event indicating the updated asset's address.\n\t */\n\tfunction updateAsset(address asset_) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\trequire(asset_ != asset, \"Every.finance: no change\");\n\t\tif (asset_ != address(0)) {\n\t\t\t(bool success_, uint8 assetDecimals_) = AssetTransfer\n\t\t\t\t.tryGetAssetDecimals(IERC20(asset_));\n\t\t\trequire(success_, \"Every.finance: no decimal\");\n\t\t\trequire(assetDecimals_ <= uint8(18), \"Every.finance: max decimal\");\n\t\t}\n\t\tasset = asset_;\n\t\temit UpdateAsset(asset_);\n\t}\n\n\t/**\n\t * @dev Update the underlying asset that investors can deposit.\n\t * @param asset_ asset's address.\n\t * @param state_  true to add an asset and false to remove it.\n\t * Emits an {UpdateAssetForDeposit} event indicating the updated asset `asset_`.\n\t */\n\tfunction updateAssetForDeposit(\n\t\taddress asset_,\n\t\tbool state_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\tallowedAssetsForDeposit[asset_] = state_;\n\t\temit UpdateAssetForDeposit(asset_, state_);\n\t}\n\n\t/**\n\t * @dev Update the underlying asset that investors can withdraw.\n\t * @param asset_ asset's address.\n\t * @param state_  true to add an asset and false to remove it.\n\t * Emits an {UpdateAssetForWithdrawal} event indicating the updated asset `asset_`.\n\t */\n\tfunction updateAssetForWithdrawal(\n\t\taddress asset_,\n\t\tbool state_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\tallowedAssetsForWithdrawal[asset_] = state_;\n\t\temit UpdateAssetForWithdrawal(asset_, state_);\n\t}\n\n\t/**\n\t * @dev Update asset's oracle.\n\t * @param asset_ asset's address.\n\t * @param oracle0_ first asset's oracle using an intermediate asset to get the final price in dollar.\n\t * It should be the zero address if there is no intermediate asset.\n\t * @param oracle1_ second asset's oracle using an intermediate asset to get the final price in dollar.\n\t * Emits an {UpdateOracle} event indicating the updated asset's oracles `oracle0_` and `oracle1_.\n\t */\n\tfunction updateOracle(\n\t\taddress asset_,\n\t\taddress oracle0_,\n\t\taddress oracle1_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\trequire(oracle1_ != address(0), \"Every.finance: zero address\");\n\t\toracles[asset_] = Oracle(oracle0_, oracle1_);\n\t\temit UpdateOracle(asset_, oracle0_, oracle1_);\n\t}\n\n\t/**\n\t * @dev Update privateInvestors.\n\t * @param account_ investor's address.\n\t * @param state_  is true to add _account, false to remove it.\n\t * Emits an {UpdatePrivateInvestor} event indicating  `account_` and `state_`.\n\t */\n\tfunction updatePrivateInvestor(\n\t\taddress account_,\n\t\tbool state_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\tprivateInvestors[account_] = state_;\n\t\temit UpdatePrivateInvestor(account_, state_);\n\t}\n\n\t/**\n\t * @dev Update eventBatchSize (maximum  number of investors to be validate by batch).\n\t * @param eventBatchSize_  new eventBatchSize number.\n\t * Emits an {UpdateEventBatchSize} event indicating the updated eventBatchSize `eventBatchSize_`.\n\t */\n\tfunction updateEventBatchSize(\n\t\tuint256 eventBatchSize_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\trequire(eventBatchSize_ != 0, \"Every.finance: zero value\");\n\t\teventBatchSize = eventBatchSize_;\n\t\temit UpdateEventBatchSize(eventBatchSize_);\n\t}\n\n\t/**\n\t * @dev Update ManagementFeeLastTime.\n\t */\n\tfunction updateManagementFeeLastTime(\n\t\tuint256 managementFeeLastTime_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\tmanagementFeeLastTime = managementFeeLastTime_;\n\t}\n\n\t/**\n\t * @dev Update TokenPriceMean.\n\t */\n\tfunction updateTokenPriceMean(\n\t\tuint256 tokenPriceMean_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\ttokenPriceMean = tokenPriceMean_;\n\t}\n\n\t/**\n\t * @dev start new event (manager cycle validation).\n\t * Emits an {UpdateStartNextEvent} event with token price `tokenPrice` and next event id `currentEventId`.\n\t *\n\t */\n\tfunction startNextEvent() external onlyRole(MANAGER) {\n\t\t(tokenPrice, ) = management.tokenPrice();\n\t\tcurrentEventId += 1;\n\t\temit StartNextEvent(tokenPrice, currentEventId);\n\t}\n\n\t/**\n\t * @dev validate investor deposit requests by the manager.\n\t * The deposit request consists of minting the required amount of yield-bearing token for the investor, and\n\t * decreasing his pending request amount by an equivalent amount.\n\t * If the deposit request is fully validated (the pending request amount is zero), the corresponding proof is burned.\n\t * @param tokenIds_ array of Proof tokens ids.\n\t * @param maxdeposit_  max total amount of deposit asset to validate.\n\t * Emits an {Validatedeposit} event with token id `tokenId_`, validate deposit asset amount\n\t * `amountAsset_` and minted token amount `amountToken_`.\n\t */\n\tfunction validateDeposits(\n\t\tuint256[] calldata tokenIds_,\n\t\tuint256 maxdeposit_\n\t)\n\t\texternal\n\t\twhenNotPaused\n\t\tonlyRole(MANAGER)\n\t\treturns (uint256 newMaxdeposit_)\n\t{\n\t\trequire(tokenPrice != 0, \"Every.finance: zero token price\");\n\t\tuint256 totalSupplyToken_ = token.totalSupply();\n\t\t(\n\t\t\tuint256 amountAssetTotal_,\n\t\t\tuint256 amountTokenTotal_\n\t\t) = _validateDeposits(tokenIds_, maxdeposit_);\n\n\t\tunchecked {\n\t\t\tnewMaxdeposit_ = maxdeposit_ - amountAssetTotal_;\n\t\t}\n\t\tif (amountTokenTotal_ != 0) {\n\t\t\ttokenPriceMean =\n\t\t\t\t((totalSupplyToken_ * tokenPriceMean) +\n\t\t\t\t\t(amountTokenTotal_ * tokenPrice)) /\n\t\t\t\t(totalSupplyToken_ + amountTokenTotal_);\n\t\t}\n\t\tif (managementFeeLastTime == 0) {\n\t\t\tmanagementFeeLastTime = block.timestamp;\n\t\t}\n\t}\n\n\t/**\n\t * @dev validate investor withdrawal requests by the manager.\n\t * The deposit request consists of sending the required amount of asset to the investor, and\n\t * burning the equivalent amount in yield-bearing token.\n\t * If the withdrawal request is fully validated (the pending request amount is zero), the corresponding proof is burned.\n\t * @param tokenIds_ array of Proof tokens ids.\n\t * @param maxwithdrawal_  max total amount of withdrawal to validate.\n\t * Emits an {ValidateWithdrawal} event with token id `tokenId_`, validate withdrawal asset amount\n\t * `amountAsset_` and burned token amount `amountToken_`.\n\t */\n\tfunction validateWithdrawals(\n\t\tuint256[] calldata tokenIds_,\n\t\tuint256 maxwithdrawal_\n\t)\n\t\texternal\n\t\twhenNotPaused\n\t\tonlyRole(MANAGER)\n\t\treturns (uint256 _newMaxwithdrawal)\n\t{\n\t\trequire(tokenPrice != 0, \"Every.finance: zero token price\");\n\t\tuint256 amountTokenTotal_ = _validateWithdrawals(\n\t\t\ttokenIds_,\n\t\t\tmaxwithdrawal_\n\t\t);\n\t\tunchecked {\n\t\t\t_newMaxwithdrawal = maxwithdrawal_ - amountTokenTotal_;\n\t\t}\n\n\t\tif ((amountTokenTotal_) != 0) {\n\t\t\ttoken.burn(address(this), amountTokenTotal_);\n\t\t}\n\t}\n\n\t/**\n\t * @dev make a deposit request by the investor.\n\t * the investor sends an amount of asset to the smart contracts and deposit fee to the treasury.\n\t * the investor receives or updates his deposit Proof {ERC721}.\n\t * @param account_ investor'address.\n\t * @param asset_ asset'address.\n\t * @param tokenId_ token id of the deposit Proof (if tokenId_ == 0, then a new token is minted).\n\t * @param amount_ amount of asset to deposit.\n\t * @param minPrice_ minimum price of yield-bearing token to be accepted.\n\t * @param maxPrice_ maximum price of yield-bearing token to be accepted.\n\t * @param maxFee_ maximum deposit fee to be accepted.\n\t * Emits an {DepositRequest} event with account `account_` and  amount `amount_`.\n\t */\n\tfunction depositRequest(\n\t\taddress account_,\n\t\taddress asset_,\n\t\tuint256 tokenId_,\n\t\tuint256 amount_,\n\t\tuint256 minPrice_,\n\t\tuint256 maxPrice_,\n\t\tuint256 maxFee_\n\t) external payable whenNotPaused {\n\t\tuint256 fee_;\n\t\trequire(amount_ != 0, \"Every.finance: zero amount\");\n\t\trequire(\n\t\t\tallowedAssetsForDeposit[asset_],\n\t\t\t\"Every.finance: not allowed asset\"\n\t\t);\n\t\trequire(\n\t\t\tamount_ >= getDepositMinAmount(asset_),\n\t\t\t\"Every.finance: min depositProof Amount\"\n\t\t);\n\t\tuint256 totalDepositedAsset_ = totalDepositedAsset[asset_];\n\t\tif (!privateInvestors[msg.sender]) {\n\t\t\tfee_ = getDepositFee(asset_, amount_);\n\t\t\trequire(fee_ <= maxFee_, \"Every.finance: max allowed fee\");\n\t\t\tamount_ -= fee_;\n\t\t}\n\t\trequire(\n\t\t\ttotalDepositedAsset_ + amount_ <= management.assetCap(asset_),\n\t\t\t\"Every.finance: cap asset\"\n\t\t);\n\t\trequire(\n\t\t\t(minPrice_ <= maxPrice_) && (maxPrice_ != 0),\n\t\t\t\"Every.finance: wrong prices\"\n\t\t);\n\t\ttotalDepositedAsset[asset_] = totalDepositedAsset_ + amount_;\n\t\tif (tokenId_ == 0) {\n\t\t\tdepositProofTokenId += 1;\n\t\t\tdepositProof.mint(\n\t\t\t\taccount_,\n\t\t\t\tasset_,\n\t\t\t\tdepositProofTokenId,\n\t\t\t\tamount_,\n\t\t\t\tminPrice_,\n\t\t\t\tmaxPrice_,\n\t\t\t\tcurrentEventId\n\t\t\t);\n\t\t} else {\n\t\t\trequire(\n\t\t\t\tdepositProof.ownerOf(tokenId_) == account_,\n\t\t\t\t\"Every.finance: account is not owner\"\n\t\t\t);\n\n\t\t\tif (account_ != _msgSender()) {\n\t\t\t\t(\n\t\t\t\t\t,\n\t\t\t\t\t,\n\t\t\t\t\tuint256 minPriceOld_,\n\t\t\t\t\tuint256 maxPriceOld_,\n\t\t\t\t\t,\n\t\t\t\t\taddress existedAsset_\n\t\t\t\t) = depositProof.pendingRequests(tokenId_);\n\t\t\t\trequire(\n\t\t\t\t\t(minPrice_ == minPriceOld_) && (maxPrice_ == maxPriceOld_),\n\t\t\t\t\t\"Every.finance: prices don't match\"\n\t\t\t\t);\n\t\t\t\trequire(\n\t\t\t\t\tasset_ == existedAsset_,\n\t\t\t\t\t\"Every.finance: existing asset is different\"\n\t\t\t\t);\n\t\t\t}\n\t\t\tdepositProof.increasePendingRequest(\n\t\t\t\ttokenId_,\n\t\t\t\tamount_,\n\t\t\t\tminPrice_,\n\t\t\t\tmaxPrice_,\n\t\t\t\tcurrentEventId,\n\t\t\t\tasset_\n\t\t\t);\n\t\t}\n\t\tif (asset_ != address(0)) {\n\t\t\tAssetTransfer.transferFrom(\n\t\t\t\t_msgSender(),\n\t\t\t\taddress(this),\n\t\t\t\tamount_ + fee_,\n\t\t\t\tIERC20(asset_)\n\t\t\t);\n\t\t} else {\n\t\t\trequire(\n\t\t\t\t(msg.value == amount_ + fee_),\n\t\t\t\t\"Every.finance: no required amount\"\n\t\t\t);\n\t\t}\n\t\tif (fee_ > 0) {\n\t\t\tAssetTransfer.transfer(management.treasury(), fee_, asset_);\n\t\t}\n\t\temit DepositRequest(account_, asset_, amount_);\n\t}\n\n\t/**\n\t * @dev cancel a deposit request by the investor.\n\t * the investor can cancel a full or partial amount of his deposit.\n\t * the investor burns or updates his deposit Proof {ERC721}.\n\t * @param tokenId_ token id of the deposit Proof (if tokenId_ == 0, then a new token is minted).\n\t * @param amount_ amount of asset to cancel.\n\t * Emits an {CancelDepositRequest} event with the caller and  amount `amount_`.\n\t */\n\tfunction cancelDepositRequest(\n\t\tuint256 tokenId_,\n\t\tuint256 amount_\n\t) external whenNotPaused {\n\t\trequire(\n\t\t\tmanagement.isCancelDeposit(),\n\t\t\t\"Every.finance: no deposit cancel\"\n\t\t);\n\t\trequire(amount_ != 0, \"Every.finance: zero amount\");\n\t\trequire(\n\t\t\tdepositProof.ownerOf(tokenId_) == _msgSender(),\n\t\t\t\"Every.finance: caller is not owner\"\n\t\t);\n\t\t(, , , , , address asset_) = depositProof.pendingRequests(tokenId_);\n\t\ttotalDepositedAsset[asset_] -= amount_;\n\t\tdepositProof.decreasePendingRequest(\n\t\t\ttokenId_,\n\t\t\tamount_,\n\t\t\tcurrentEventId,\n\t\t\tasset_\n\t\t);\n\t\tAssetTransfer.transfer(_msgSender(), amount_, asset_);\n\t\temit CancelDepositRequest(_msgSender(), asset_, amount_);\n\t}\n\n\t/**\n\t * @dev make a withdrawal request by the investor.\n\t * the investor sends an amount of yield-bearing token to the smart contracts and withdrawal fee to the treasury.\n\t * the investor receives or updates his withdrawal Proof {ERC721}.\n\t * @param tokenId_ token id of the withdrawal Proof (if tokenId_ == 0, then a new token is minted).\n\t * @param amount_ amount of yield-bearing token to withdraw.\n\t * @param minPrice_ minimum price of yield-bearing token to be accepted.\n\t * @param maxPrice_ maximum price of yield-bearing token to be accepted.\n\t * @param maxFee_ maximum withdrawal fee to be accepted.\n\t * Emits an {WithdrawalRequest} event with account `account_` and  amount `amount_`.\n\t */\n\tfunction withdrawalRequest(\n\t\tuint256 tokenId_,\n\t\taddress asset_,\n\t\tuint256 amount_,\n\t\tuint256 minPrice_,\n\t\tuint256 maxPrice_,\n\t\tuint256 maxFee_\n\t) external whenNotPaused {\n\t\trequire(amount_ != 0, \"Every.finance: zero amount\");\n\t\trequire(\n\t\t\tallowedAssetsForWithdrawal[asset_],\n\t\t\t\"Every.finance: not allowed asset\"\n\t\t);\n\t\tuint256 fee_;\n\t\trequire(\n\t\t\ttoken.balanceOf(_msgSender()) >= amount_,\n\t\t\t\"Every.finance: amount exceeds balance\"\n\t\t);\n\t\tif (!privateInvestors[msg.sender]) {\n\t\t\tuint256 holdTime_ = token.getHoldTime(_msgSender());\n\t\t\tif (management.isMinLockUpPeriod()) {\n\t\t\t\trequire(\n\t\t\t\t\tblock.timestamp - holdTime_ >= management.minLockUpPeriod(),\n\t\t\t\t\t\"Every.Finance: min lokup period\"\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tfee_ =\n\t\t\t\t(management.getWithdrawalFeeRate(holdTime_) * amount_) /\n\t\t\t\tFeeMinter.SCALING_FACTOR_FEE;\n\n\t\t\trequire(fee_ <= maxFee_, \"Every.finance: max allowed fee\");\n\t\t\tamount_ = amount_ - fee_;\n\t\t}\n\t\trequire(\n\t\t\t(minPrice_ <= maxPrice_) && (maxPrice_ != 0),\n\t\t\t\"Every.finance: wrong prices\"\n\t\t);\n\t\tif (tokenId_ == 0) {\n\t\t\twithdrawalProofTokenId += 1;\n\t\t\twithdrawalProof.mint(\n\t\t\t\t_msgSender(),\n\t\t\t\tasset_,\n\t\t\t\twithdrawalProofTokenId,\n\t\t\t\tamount_,\n\t\t\t\tminPrice_,\n\t\t\t\tmaxPrice_,\n\t\t\t\tcurrentEventId\n\t\t\t);\n\t\t} else {\n\t\t\trequire(\n\t\t\t\twithdrawalProof.ownerOf(tokenId_) == _msgSender(),\n\t\t\t\t\"Every.finance: caller is not owner\"\n\t\t\t);\n\n\t\t\twithdrawalProof.increasePendingRequest(\n\t\t\t\ttokenId_,\n\t\t\t\tamount_,\n\t\t\t\tminPrice_,\n\t\t\t\tmaxPrice_,\n\t\t\t\tcurrentEventId,\n\t\t\t\tasset_\n\t\t\t);\n\t\t}\n\t\ttoken.transferFrom(_msgSender(), address(this), amount_);\n\t\tif (fee_ != 0) {\n\t\t\ttoken.transferFrom(_msgSender(), management.treasury(), fee_);\n\t\t}\n\t\temit WithdrawalRequest(_msgSender(), amount_);\n\t}\n\n\t/**\n\t * @dev cancel a withdrawal request by the investor.\n\t * the investor can cancel a full or partial amount of his withdrawal.\n\t * the investor burns or updates his withdrawal Proof {ERC721}.\n\t * @param tokenId_ token id of the withdrawal Proof (if tokenId_ == 0, then a new token is minted).\n\t * @param amount_ amount of yield-bearing token to cancel.\n\t * Emits an {CancelWithdrawalRequest} event with the caller and  amount `amount_`.\n\t */\n\tfunction cancelWithdrawalRequest(\n\t\tuint256 tokenId_,\n\t\tuint256 amount_\n\t) external whenNotPaused {\n\t\trequire(\n\t\t\tmanagement.isCancelWithdrawal(),\n\t\t\t\"Every.finance: no withdrawal cancel\"\n\t\t);\n\t\trequire(amount_ != 0, \"Every.finance: zero amount\");\n\t\trequire(\n\t\t\twithdrawalProof.ownerOf(tokenId_) == _msgSender(),\n\t\t\t\"Every.finance: caller is not owner\"\n\t\t);\n\t\t(, , , , , address asset_) = withdrawalProof.pendingRequests(tokenId_);\n\t\twithdrawalProof.decreasePendingRequest(\n\t\t\ttokenId_,\n\t\t\tamount_,\n\t\t\tcurrentEventId,\n\t\t\tasset_\n\t\t);\n\t\ttoken.transfer(_msgSender(), amount_);\n\t\temit CancelWithdrawalRequest(_msgSender(), amount_);\n\t}\n\n\t/**\n\t * @dev Send asset to the SafeHouse by the manager.\n\t * @param amount_ amount to send.\n\t * @param asset_  asset's address.\n\t */\n\tfunction sendToSafeHouse(\n\t\tuint256 amount_,\n\t\taddress asset_\n\t) external whenNotPaused onlyRole(MANAGER) {\n\t\trequire(amount_ != 0, \"Every.finance: zero amount\");\n\t\taddress safeHouse_ = management.safeHouse();\n\t\trequire(safeHouse_ != address(0), \"Every.finance: zero address\");\n\t\tAssetTransfer.transfer(safeHouse_, amount_, asset_);\n\t}\n\n\t/**\n\t * @dev mint Performance fee by the manager\n\t * performance fee are minted in yield-bearing token.\n\t */\n\tfunction mintPerformanceFee() external onlyRole(MANAGER) {\n\t\t(uint256 tokenPrice_, ) = management.tokenPrice();\n\t\tuint256 performanceFeeRate_ = management.performanceFeeRate();\n\t\taddress treasury_ = management.treasury();\n\t\tuint256 performanceFee_;\n\t\t(tokenPriceMean, performanceFee_) = FeeMinter.mintPerformanceFee(\n\t\t\ttokenPrice_,\n\t\t\ttokenPriceMean,\n\t\t\tperformanceFeeRate_,\n\t\t\ttreasury_,\n\t\t\taddress(token)\n\t\t);\n\t\tlastPerformanceFee = performanceFee_;\n\t\ttotalPerformanceFee += performanceFee_;\n\t\temit MintPerformanceFee(performanceFee_);\n\t}\n\n\t/**\n\t * @dev mint management fee by the manager\n\t * management fee are minted in yield-bearing token.\n\t */\n\tfunction mintManagementFee() external onlyRole(MANAGER) {\n\t\tuint256 managementFeeRate_ = management.managementFeeRate();\n\t\taddress treasury_ = management.treasury();\n\t\tuint256 managementFee_;\n\t\t(managementFeeLastTime, managementFee_) = FeeMinter.mintManagementFee(\n\t\t\tmanagementFeeLastTime,\n\t\t\tmanagementFeeRate_,\n\t\t\ttreasury_,\n\t\t\taddress(token)\n\t\t);\n\t\tlastManagementFee = managementFee_;\n\t\ttotalManagementFee += managementFee_;\n\t\temit MintManagementFee(managementFee_);\n\t}\n\n\t/**\n\t * @dev mint or burn Investment fee by the manager\n\t * Investment fee are minted (negative fee) Or bunred (positive fee) in yield-bearing token.\n\t * @param amount_ amount of negative/positive fee.\n\t * @param isFee_ true if negative fee, false otherwise.\n\t */\n\tfunction mintOrBurnInvestmentFee(\n\t\tuint256 amount_,\n\t\tbool isFee_\n\t) external payable onlyRole(MANAGER) returns (uint256 remainingAmount_) {\n\t\t(uint256 tokenPrice_, ) = management.tokenPrice();\n\t\taddress treasury_ = management.treasury();\n\t\tremainingAmount_ = FeeMinter.MintInvestmentFee(\n\t\t\tamount_,\n\t\t\ttokenPrice_,\n\t\t\tisFee_,\n\t\t\tpayable(treasury_),\n\t\t\taddress(token),\n\t\t\tasset\n\t\t);\n\n\t\temit MintOrBurnInvestmentFee(amount_, isFee_, remainingAmount_);\n\t}\n\n\t/**\n\t * @dev get deposit fee for a deposit amount `amount_` of asset `asset_`\n\t * @param asset_ asset's address to deposit by the investor.\n\t * @param amount_ amount in asset to deposit by the investor.\n\t */\n\tfunction getDepositFee(\n\t\taddress asset_,\n\t\tuint256 amount_\n\t) public view returns (uint256 fee_) {\n\t\t(uint256 price_, uint256 decimal_) = getLatestPrice(asset_);\n\t\tamount_ = (amount_ * price_) / 10 ** decimal_;\n\t\tfee_ = management.getDepositFee(amount_);\n\t\tfee_ = (fee_ * 10 ** decimal_) / price_;\n\t\treturn fee_;\n\t}\n\n\t/**\n\t * @dev get  yield-bearing token price.\n\t */\n\tfunction getTokenPrice() public view returns (uint256 price_) {\n\t\t(price_, ) = management.tokenPrice();\n\t}\n\n\t/**\n\t * @dev get minimum deposit amount.\n\t */\n\n\tfunction getDepositMinAmount(\n\t\taddress asset_\n\t) public view returns (uint256 amount_) {\n\t\tamount_ = management.minDepositAmount();\n\t\t(uint256 price_, uint256 decimal_) = getLatestPrice(asset_);\n\t\tamount_ = (amount_ * 10 ** decimal_) / price_;\n\t}\n\n\t/**\n\t * @dev verify if the price bounds of deposit/withdrawal pending request are valid.\n\t * @param proof_ Proof contract'address.\n\t * @param tokenId_  token id of the pending request.\n\t * @return isValid_ true if price bounds are valid , fase otherwise.\n\t */\n\tfunction isValidPrice(\n\t\tProof proof_,\n\t\tuint256 tokenId_\n\t) public view returns (bool isValid_) {\n\t\t(, , uint256 minPrice_, uint256 maxPrice_, , ) = proof_.pendingRequests(\n\t\t\ttokenId_\n\t\t);\n\t\tisValid_ = (minPrice_ <= tokenPrice) && (maxPrice_ >= tokenPrice);\n\t}\n\n\tfunction getLatestPrice(\n\t\taddress asset_\n\t) public view returns (uint256, uint256) {\n\t\tOracle memory oracle_ = oracles[asset_];\n\n\t\tAggregatorV3Interface priceFeed1_ = AggregatorV3Interface(\n\t\t\toracle_.oracle1\n\t\t);\n\t\t(\n\t\t\t,\n\t\t\t/*uint80 roundID*/ int price1_ /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\n\t\t\t,\n\t\t\t,\n\n\t\t) = priceFeed1_.latestRoundData();\n\t\trequire(price1_ > 0, \"Every.finance: invalid price\");\n\t\tuint8 decimals1_ = priceFeed1_.decimals();\n\t\tif (oracle_.oracle0 == address(0)) {\n\t\t\treturn (uint256(price1_), decimals1_);\n\t\t} else {\n\t\t\tAggregatorV3Interface priceFeed0_ = AggregatorV3Interface(\n\t\t\t\toracle_.oracle0\n\t\t\t);\n\t\t\t(\n\t\t\t\t,\n\t\t\t\t/*uint80 roundID*/ int price0_ /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\n\t\t\t\t,\n\t\t\t\t,\n\n\t\t\t) = priceFeed0_.latestRoundData();\n\t\t\trequire(price0_ > 0, \"Every.finance: invalid price\");\n\t\t\tuint8 decimals0_ = priceFeed0_.decimals();\n\t\t\treturn (\n\t\t\t\tuint256(price0_) * uint256(price1_),\n\t\t\t\tdecimals0_ + decimals1_\n\t\t\t);\n\t\t}\n\t}\n\n\tfunction _validateDeposits(\n\t\tuint256[] calldata tokenIds_,\n\t\tuint256 maxdeposit_\n\t) internal returns (uint256 amountAssetTotal_, uint256 amountTokenTotal_) {\n\t\tuint256 amountAsset_;\n\t\tuint256 amountToken_;\n\t\tuint256 price_;\n\t\tuint256 decimal_;\n\t\tuint256 size_ = tokenIds_.length;\n\t\taddress owner_;\n\t\taddress asset_;\n\t\trequire(size_ != 0, \"Every.finance: size is zero\");\n\t\trequire(size_ <= eventBatchSize, \"Every.finance: max size\");\n\t\tfor (uint256 i = 0; i < size_; ) {\n\t\t\towner_ = depositProof.ownerOf(tokenIds_[i]);\n\t\t\trequire(owner_ != address(0), \"Every.finance: zero address\");\n\t\t\tif (!isValidPrice(depositProof, tokenIds_[i])) {\n\t\t\t\tdepositProof.updateEventId(tokenIds_[i], currentEventId);\n\t\t\t} else {\n\t\t\t\tif (maxdeposit_ <= amountAssetTotal_) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdepositProof.preValidatePendingRequest(\n\t\t\t\t\ttokenIds_[i],\n\t\t\t\t\tcurrentEventId\n\t\t\t\t);\n\t\t\t\t(amountAsset_, , , , , asset_) = depositProof.pendingRequests(\n\t\t\t\t\ttokenIds_[i]\n\t\t\t\t);\n\t\t\t\t(price_, decimal_) = getLatestPrice(asset_);\n\t\t\t\tamountAsset_ = Math.mulDiv(\n\t\t\t\t\tamountAsset_,\n\t\t\t\t\tprice_,\n\t\t\t\t\t10 ** decimal_\n\t\t\t\t);\n\t\t\t\tamountAsset_ = Math.min(\n\t\t\t\t\tmaxdeposit_ - amountAssetTotal_,\n\t\t\t\t\tamountAsset_\n\t\t\t\t);\n\n\t\t\t\tunchecked {\n\t\t\t\t\tamountAssetTotal_ += amountAsset_;\n\t\t\t\t}\n\t\t\t\tamountToken_ = Math.mulDiv(\n\t\t\t\t\tamountAsset_,\n\t\t\t\t\tFeeMinter.SCALING_FACTOR_PRICE,\n\t\t\t\t\ttokenPrice\n\t\t\t\t);\n\n\t\t\t\tif (amountToken_ != 0) {\n\t\t\t\t\ttoken.mint(owner_, amountToken_);\n\t\t\t\t\tamountTokenTotal_ += amountToken_;\n\t\t\t\t}\n\n\t\t\t\tamountAsset_ = Math.mulDiv(\n\t\t\t\t\tamountAsset_,\n\t\t\t\t\t10 ** decimal_,\n\t\t\t\t\tprice_\n\t\t\t\t);\n\t\t\t\tdepositProof.validatePendingRequest(\n\t\t\t\t\ttokenIds_[i],\n\t\t\t\t\tamountAsset_,\n\t\t\t\t\tcurrentEventId,\n\t\t\t\t\tasset_\n\t\t\t\t);\n\n\t\t\t\temit Validatedeposit(tokenIds_[i], amountAsset_, amountToken_);\n\t\t\t}\n\t\t\tunchecked {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _validateWithdrawals(\n\t\tuint256[] calldata tokenIds_,\n\t\tuint256 maxwithdrawal_\n\t) internal returns (uint256 amountTokenTotal_) {\n\t\tuint256 amountToken_;\n\t\tuint256 amountAsset_;\n\t\tuint256 size_ = tokenIds_.length;\n\t\tuint256 tokenId_;\n\t\taddress owner_;\n\t\taddress asset_;\n\t\tuint256 price_;\n\t\tuint256 decimal_;\n\t\trequire(size_ != 0, \"Every.finance: size is zero\");\n\t\trequire(size_ <= eventBatchSize, \"Every.finance: max size\");\n\t\tuint256 amountTotal_ = withdrawalProof.totalAmount();\n\t\tfor (uint256 i = 0; i < size_; ) {\n\t\t\ttokenId_ = tokenIds_[i];\n\t\t\towner_ = withdrawalProof.ownerOf(tokenId_);\n\t\t\trequire(owner_ != address(0), \"Every.finance: zero address\");\n\t\t\tif (!isValidPrice(withdrawalProof, tokenId_)) {\n\t\t\t\twithdrawalProof.updateEventId(tokenId_, currentEventId);\n\t\t\t} else {\n\t\t\t\twithdrawalProof.preValidatePendingRequest(\n\t\t\t\t\ttokenId_,\n\t\t\t\t\tcurrentEventId\n\t\t\t\t);\n\t\t\t\t(amountToken_, , , , , asset_) = withdrawalProof\n\t\t\t\t\t.pendingRequests(tokenId_);\n\t\t\t\tamountToken_ = Math.min(\n\t\t\t\t\tMath.mulDiv(maxwithdrawal_, amountToken_, amountTotal_),\n\t\t\t\t\tamountToken_\n\t\t\t\t);\n\t\t\t\tunchecked {\n\t\t\t\t\tamountTokenTotal_ += amountToken_;\n\t\t\t\t}\n\n\t\t\t\twithdrawalProof.validatePendingRequest(\n\t\t\t\t\ttokenId_,\n\t\t\t\t\tamountToken_,\n\t\t\t\t\tcurrentEventId,\n\t\t\t\t\tasset_\n\t\t\t\t);\n\t\t\t\tamountAsset_ = Math.mulDiv(\n\t\t\t\t\tamountToken_,\n\t\t\t\t\ttokenPrice,\n\t\t\t\t\tFeeMinter.SCALING_FACTOR_PRICE\n\t\t\t\t);\n\n\t\t\t\t(price_, decimal_) = getLatestPrice(asset_);\n\t\t\t\tamountAsset_ = Math.mulDiv(\n\t\t\t\t\tamountAsset_,\n\t\t\t\t\t10 ** decimal_,\n\t\t\t\t\tprice_\n\t\t\t\t);\n\n\t\t\t\tif (amountAsset_ != 0) {\n\t\t\t\t\tAssetTransfer.transfer(owner_, amountAsset_, asset_);\n\t\t\t\t}\n\n\t\t\t\temit Validatewithdrawal(tokenId_, amountToken_, amountAsset_);\n\t\t\t}\n\t\t\tunchecked {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction pause() public onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\t_pause();\n\t}\n\n\tfunction unpause() public onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\t_unpause();\n\t}\n}\n"
    },
    "contracts/voltargetBTC/common/Management.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Every.finance Contracts\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n/**\n * @dev Implementation of the contract Management.\n * It allows the manager to set the different parameters of the product.\n */\ncontract Management is AccessControlEnumerable {\n\tbytes32 public constant MANAGER = keccak256(\"MANAGER\");\n\tbytes32 public constant ORACLE = keccak256(\"ORACLE\");\n\tuint256 public constant SCALING_FACTOR = 1e8;\n\n\tstruct Fee {\n\t\tuint256 rate;\n\t\tuint256 time;\n\t}\n\n\tstruct Price {\n\t\tuint256 value;\n\t\tuint256 time;\n\t}\n\n\tstruct DepositFee {\n\t\tuint256 rate;\n\t\tuint256 minValue;\n\t\tuint256 maxValue;\n\t}\n\n\tuint256 public managementFeeRate;\n\tuint256 public performanceFeeRate;\n\tuint256 public minDepositAmount;\n\tuint256 public minLockUpPeriod;\n\tPrice public tokenPrice;\n\tDepositFee public depositFee;\n\tFee[] public withdrawalFee;\n\tbool public isCancelDeposit;\n\tbool public isCancelWithdrawal;\n\tbool public isMinLockUpPeriod;\n\taddress public treasury;\n\taddress public safeHouse;\n\tmapping(address => uint256) public assetCap;\n\n\tevent UpdateTreasury(address indexed treasury_);\n\tevent UpdateSafeHouse(address indexed safeHouse_);\n\tevent UpdateIsCancelDeposit(bool iscancelDeposit_);\n\tevent UpdateIsCancelWithdrawal(bool isWithdrawalCancel_);\n\tevent UpdateIsMinLockUpPeriod(bool isMinLockUpPeriod_);\n\tevent UpdateMinLockUpPeriod(uint256 minLockUpPeriod_);\n\tevent UpdateDepositFee(uint256 rate_, uint256 minValue_, uint256 maxValue_);\n\tevent UpdateManagementFeeRate(uint256 managementFeeRate_);\n\tevent UpdatePerformanceFeeRate(uint256 performanceFeeRate_);\n\tevent UpdateMinDepositAmount(uint256 minDepositAmount_);\n\tevent UpdateTokenPrice(Price price_);\n\tevent AddWithdrawalFee(uint256 rate_, uint256 time_);\n\tevent UpdateWithdrawalFee(uint256 index_, uint256 rate_, uint256 time_);\n\tevent DeleteLastWithdrawalFee(uint256 rate_, uint256 time_);\n\tevent UpdateAssetCap(address indexed asset_, uint256 cap_);\n\n\tconstructor(address admin_, address manager_, address treasury_) {\n\t\trequire(admin_ != address(0), \"Every.finance: zero address\");\n\t\trequire(manager_ != address(0), \"Every.finance: zero address\");\n\t\trequire(treasury_ != address(0), \"Every.finance: zero address\");\n\t\ttreasury = treasury_;\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, admin_);\n\t\t_setupRole(MANAGER, manager_);\n\t}\n\n\t/**\n\t * @dev Update treasury.\n\t * @param treasury_.\n\t * Emits an {UpdateTreasury} event indicating the updated treasury `treasury_`.\n\t */\n\tfunction updateTreasury(\n\t\taddress treasury_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\trequire(treasury_ != address(0), \"Every.finance: zero address\");\n\t\trequire(treasury != treasury_, \"Every.finance: no change\");\n\t\ttreasury = treasury_;\n\t\temit UpdateTreasury(treasury_);\n\t}\n\n\t/**\n\t * @dev Update safeHouse.\n\t * @param safeHouse_.\n\t * Emits an {UpdateSafeHouse} event indicating the updated safeHouse `safeHouse_`.\n\t */\n\tfunction updateSafeHouse(\n\t\taddress safeHouse_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\trequire(safeHouse_ != address(0), \"Every.finance: zero address\");\n\t\trequire(safeHouse != safeHouse_, \"Every.finance: no change\");\n\t\tsafeHouse = safeHouse_;\n\t\temit UpdateSafeHouse(safeHouse_);\n\t}\n\n\t/**\n\t * @dev Update isCancelDeposit.\n\t * @param  isCancelDeposit_.\n\t * Emits an {UpdateIsCancelDeposit} event indicating the updated  isCancelDeposit ` isCancelDeposit_`.\n\t */\n\tfunction updateIsCancelDeposit(\n\t\tbool isCancelDeposit_\n\t) external onlyRole(MANAGER) {\n\t\trequire(\n\t\t\tisCancelDeposit_ != isCancelDeposit,\n\t\t\t\"Every.finance: no change\"\n\t\t);\n\t\tisCancelDeposit = isCancelDeposit_;\n\t\temit UpdateIsCancelDeposit(isCancelDeposit_);\n\t}\n\n\t/**\n\t * @dev Update isCancelWithdrawal.\n\t * @param  isCancelWithdrawal_.\n\t * Emits an {UpdateIsCancelWithdrawal} event indicating the updated  isCancelWithdrawal ` isCancelWithdrawal_`.\n\t */\n\tfunction updateIsCancelWithdrawal(\n\t\tbool isCancelWithdrawal_\n\t) external onlyRole(MANAGER) {\n\t\trequire(\n\t\t\tisCancelWithdrawal_ != isCancelWithdrawal,\n\t\t\t\"Every.finance: no change\"\n\t\t);\n\t\tisCancelWithdrawal = isCancelWithdrawal_;\n\t\temit UpdateIsCancelWithdrawal(isCancelWithdrawal_);\n\t}\n\n\t/**\n\t * @dev Update isMinLockUpPeriod.\n\t * @param  isMinLockUpPeriod_.\n\t * Emits an {UpdateIsMinLockUpPeriod} event indicating the updated  isMinLockUpPeriod ` isMinLockUpPeriod_`.\n\t */\n\tfunction updateIsMinLockUpPeriod(\n\t\tbool isMinLockUpPeriod_\n\t) external onlyRole(MANAGER) {\n\t\trequire(\n\t\t\tisMinLockUpPeriod_ != isMinLockUpPeriod,\n\t\t\t\"Every.finance: no change\"\n\t\t);\n\t\tisMinLockUpPeriod = isMinLockUpPeriod_;\n\t\temit UpdateIsMinLockUpPeriod(isMinLockUpPeriod_);\n\t}\n\n\t/**\n\t * @dev Update minLockUpPeriod.\n\t * @param  minLockUpPeriod_ minimum locked up period\n\t * Emits an {UpdateMinLockUpPeriod_} event indicating the updated minLockUpPeriod_ `minLockUpPeriod_`\n\t * and max value `maxValue_`\n\t */\n\tfunction updateMinLockUpPeriod(\n\t\tuint256 minLockUpPeriod_\n\t) external onlyRole(MANAGER) {\n\t\tminLockUpPeriod = minLockUpPeriod_;\n\t\temit UpdateMinLockUpPeriod(minLockUpPeriod_);\n\t}\n\n\t/**\n\t * @dev Update depositFee.\n\t * @param  rate_.\n\t * @param  minValue_.\n\t * @param  maxValue_.\n\t * Emits an {UpdateDepositFee} event indicating the updated rate `rate_`, min value `minValue_`\n\t * and max value `maxValue_`\n\t */\n\tfunction updateDepositFee(\n\t\tuint256 rate_,\n\t\tuint256 minValue_,\n\t\tuint256 maxValue_\n\t) external onlyRole(MANAGER) {\n\t\trequire(rate_ <= SCALING_FACTOR, \"Every.finance: out of range\");\n\t\trequire(minValue_ <= maxValue_, \"Every.finance: wrong min max values\");\n\t\tdepositFee = DepositFee(rate_, minValue_, maxValue_);\n\t\temit UpdateDepositFee(rate_, minValue_, maxValue_);\n\t}\n\n\t/**\n\t * @dev Update managementFeeRate.\n\t * @param managementFeeRate_.\n\t * Emits an {UpdateManagementFeeRate} event indicating the updated managementFeeRate `managementFeeRate_`.\n\t */\n\n\tfunction updateManagementFeeRate(\n\t\tuint256 managementFeeRate_\n\t) external onlyRole(MANAGER) {\n\t\trequire(\n\t\t\tmanagementFeeRate_ <= SCALING_FACTOR,\n\t\t\t\"Every.finance: out of range\"\n\t\t);\n\t\tmanagementFeeRate = managementFeeRate_;\n\t\temit UpdateManagementFeeRate(managementFeeRate_);\n\t}\n\n\t/**\n\t * @dev Update performanceFeeRate.\n\t * @param performanceFeeRate_.\n\t * Emits an {UpdatePerformanceFeeRate} event indicating the updated performanceFeeRate `performanceFeeRate_`.\n\t */\n\n\tfunction updatePerformanceFeeRate(\n\t\tuint256 performanceFeeRate_\n\t) external onlyRole(MANAGER) {\n\t\trequire(\n\t\t\tperformanceFeeRate_ <= SCALING_FACTOR,\n\t\t\t\"Every.finance: out of range\"\n\t\t);\n\t\tperformanceFeeRate = performanceFeeRate_;\n\t\temit UpdatePerformanceFeeRate(performanceFeeRate_);\n\t}\n\n\t/**\n\t * @dev Update MinDepositAmount.\n\t * @param minDepositAmount_.\n\t * Emits an {UpdateMinDepositAmount} event indicating the updated minDepositAmount `minDepositAmount_`.\n\t */\n\n\tfunction updateMinDepositAmount(\n\t\tuint256 minDepositAmount_\n\t) external onlyRole(MANAGER) {\n\t\trequire(\n\t\t\tdepositFee.minValue <= minDepositAmount_,\n\t\t\t\"Every.finance: lower than min deposit fee\"\n\t\t);\n\t\tminDepositAmount = minDepositAmount_;\n\t\temit UpdateMinDepositAmount(minDepositAmount_);\n\t}\n\n\t/**\n\t * @dev Update tokenPrice.\n\t * @param price_.\n\t * Emits an {UpdateTokenPrice} event indicating the updated tokenPrice.\n\t */\n\tfunction updateTokenPrice(uint256 price_) external onlyRole(ORACLE) {\n\t\trequire(price_ != 0, \"Every.finance: zero price\");\n\t\ttokenPrice = Price(price_, block.timestamp);\n\t\temit UpdateTokenPrice(tokenPrice);\n\t}\n\n\t/**\n\t * @dev add a new withdrawal fee.\n\t * @param rate_.\n\t * @param time_.\n\t * Emits an {AddWithdrawalFee} event with feeRate `rate_` and feePeriod `time_`.\n\t */\n\n\tfunction addWithdrawalFee(\n\t\tuint256 rate_,\n\t\tuint256 time_\n\t) external onlyRole(MANAGER) {\n\t\trequire(rate_ <= SCALING_FACTOR, \"Every.finance: out of range\");\n\t\tuint256 size_ = withdrawalFee.length;\n\t\tif (size_ != 0) {\n\t\t\trequire(\n\t\t\t\twithdrawalFee[size_ - 1].time < time_,\n\t\t\t\t\"Every.finance: times don't match\"\n\t\t\t);\n\t\t\trequire(\n\t\t\t\twithdrawalFee[size_ - 1].rate > rate_,\n\t\t\t\t\"Every.finance: fee rates don't match\"\n\t\t\t);\n\t\t}\n\t\twithdrawalFee.push(Fee(rate_, time_));\n\t\temit AddWithdrawalFee(rate_, time_);\n\t}\n\n\t/**\n\t * @dev Update withdrawal fee.\n\t * @param index_ index of array withdrawalFee to be updated.\n\t * @param rate_ new fee.\n\t * @param time_ new period.\n\t * Emits an {UpdateWithdrawalFee} event with `index_`, `rate_`, and 'time_'.\n\t */\n\n\tfunction updateWithdrawalFee(\n\t\tuint256 index_,\n\t\tuint256 rate_,\n\t\tuint256 time_\n\t) external onlyRole(MANAGER) {\n\t\trequire(rate_ <= SCALING_FACTOR, \"Every.finance: out of range\");\n\t\tuint256 size_ = withdrawalFee.length;\n\t\trequire(index_ < size_, \"Every.finance: out of size\");\n\t\tif (index_ != 0) {\n\t\t\trequire(\n\t\t\t\twithdrawalFee[index_ - 1].time < time_,\n\t\t\t\t\"Every.finance: times don't match\"\n\t\t\t);\n\t\t\trequire(\n\t\t\t\twithdrawalFee[index_ - 1].rate > rate_,\n\t\t\t\t\"Every.finance: fee rates don't match\"\n\t\t\t);\n\t\t}\n\t\tif (index_ < size_ - 1) {\n\t\t\trequire(\n\t\t\t\twithdrawalFee[index_ + 1].time > time_,\n\t\t\t\t\"Every.finance: times don't match\"\n\t\t\t);\n\t\t\trequire(\n\t\t\t\twithdrawalFee[index_ + 1].rate < rate_,\n\t\t\t\t\"Every.finance: fee rates don't match\"\n\t\t\t);\n\t\t}\n\t\twithdrawalFee[index_] = Fee(rate_, time_);\n\t\temit UpdateWithdrawalFee(index_, rate_, time_);\n\t}\n\n\t/**\n\t * @dev delete last fee from  withdrawalFee.\n\t * Emits an {DeleteLastWithdrawalFee} event with the removed fee.\n\t */\n\n\tfunction deleteLastWithdrawalFee() external onlyRole(MANAGER) {\n\t\tuint256 size_ = withdrawalFee.length;\n\t\trequire(size_ != 0, \"Every.finance. array is empty\");\n\t\tFee memory fee_ = withdrawalFee[size_ - 1];\n\t\twithdrawalFee.pop();\n\t\temit DeleteLastWithdrawalFee(fee_.rate, fee_.time);\n\t}\n\n\t/**\n\t * @dev calculate withdrawal fee rate.\n\t * @param holdTime_ hold time of the yield-bearing tokens.\n\t */\n\n\tfunction calculateWithdrawalFeeRate(\n\t\tuint256 holdTime_\n\t) public view returns (uint256) {\n\t\tuint256 size_ = withdrawalFee.length;\n\t\trequire(block.timestamp >= holdTime_, \"Every.finance: max time\");\n\t\tuint256 deltaTime_;\n\t\tunchecked {\n\t\t\tdeltaTime_ = block.timestamp - holdTime_;\n\t\t}\n\t\tif (size_ == 0) {\n\t\t\treturn 0;\n\t\t} else if (deltaTime_ <= withdrawalFee[0].time) {\n\t\t\treturn withdrawalFee[0].rate;\n\t\t} else if (deltaTime_ > withdrawalFee[size_ - 1].time) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tuint256 time_;\n\t\t\tFee memory fee_;\n\t\t\tfor (uint256 i = 0; i < size_ - 1; ) {\n\t\t\t\ttime_ = withdrawalFee[i].time;\n\t\t\t\tfee_ = withdrawalFee[i + 1];\n\t\t\t\tif ((deltaTime_ > time_) && (deltaTime_ <= fee_.time)) {\n\t\t\t\t\treturn fee_.rate;\n\t\t\t\t}\n\t\t\t\tunchecked {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Update  asset's cap.\n\t * @param asset_ asset's cap.\n\t * @param cap_  asset's cap.\n\t * Emits an {UpdateAssetCap} event indicating the updated asset's cap `cap_`.\n\t */\n\tfunction updateAssetCap(\n\t\taddress asset_,\n\t\tuint256 cap_\n\t) external onlyRole(MANAGER) {\n\t\tassetCap[asset_] = cap_;\n\t\temit UpdateAssetCap(asset_, cap_);\n\t}\n\n\t/**\n\t * @dev get deposit fee.\n\t * @param amount_ deposit amount.\n\t * @return fee_ deposit fee.\n\t */\n\tfunction getDepositFee(uint256 amount_) public view returns (uint256 fee_) {\n\t\tDepositFee memory depositFee_ = depositFee;\n\t\tfee_ = Math.max(\n\t\t\tMath.mulDiv(depositFee_.rate, amount_, SCALING_FACTOR),\n\t\t\tdepositFee_.minValue\n\t\t);\n\t\tfee_ = Math.min(fee_, depositFee_.maxValue);\n\t}\n\n\t/**\n\t * @dev get token price.\n\t */\n\tfunction getTokenPrice() public view returns (Price memory) {\n\t\treturn tokenPrice;\n\t}\n\n\t/**\n\t * @dev get withdrawal fee rate.\n\t * @param holdTime_ hold time of the yield-bearing tokens.\n\t * @return feeRate_ withdrawal fee rate.\n\t */\n\tfunction getWithdrawalFeeRate(\n\t\tuint256 holdTime_\n\t) public view returns (uint256 feeRate_) {\n\t\tfeeRate_ = calculateWithdrawalFeeRate(holdTime_);\n\t}\n\n\t/**\n\t * @dev get withdrawal fee.\n\t * @param index_ index of array withdrawal fee.\n\t * @return fee_ withdrawal fee.\n\t */\n\tfunction getWithdrawalFee(\n\t\tuint256 index_\n\t) public view returns (Fee memory fee_) {\n\t\trequire(index_ < withdrawalFee.length, \"Every.finance. out of size\");\n\t\tfee_ = withdrawalFee[index_];\n\t}\n\n\t/**\n\t * @dev get withdrawalFee size.\n\t */\n\n\tfunction getWithdrawalFeeSize() public view returns (uint256) {\n\t\treturn withdrawalFee.length;\n\t}\n}\n"
    },
    "contracts/voltargetBTC/common/Proof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Every.finance Contracts\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"../libraries/PendingRequest.sol\";\nimport \"../interfaces/IMetadata.sol\";\n\n/**\n * @dev Implementation of the investor's proof token {ERC721}.\n * We distinguish between deposit proof token and withdrawal proof token.\n * The investor receives the deposit/withdrawal proof token when he makes his deposit/withdrawal\n * request, waiting to be validated by the manager.\n */\n\ncontract Proof is ERC721Enumerable, Ownable, AccessControlEnumerable {\n\tusing Strings for uint256;\n\tusing PendingRequest for PendingRequestData;\n\n\tbytes32 public constant INVESTMENT = keccak256(\"INVESTMENT\");\n\tuint256 public constant TOLERANCE_MAX = 1000; // To handel rounding errors\n\tuint256 public tolerance;\n\tuint8 public immutable id;\n\tbool public isOnChainMetadata;\n\tstring public baseURI;\n\taddress public investment;\n\tuint256 public totalAmount;\n\tmapping(uint256 => PendingRequestData) public pendingRequests;\n\tmapping(uint256 => uint256) public pendingIdIndex;\n\tmapping(address => uint256) public totalAmountPerAsset;\n\tuint256[] public pendingIds;\n\tIMetadata public metadata;\n\n\tevent UpdateInvestment(address indexed investment_);\n\tevent UpdateMetadata(address indexed metadata_);\n\tevent UpdateBaseURI(string baseURI_);\n\tevent UpdateTolerance(uint256 tolerance_);\n\tevent UpdateIsOnChainMetadata(bool isOnChainMetadata_);\n\tevent Mint(address indexed account_, uint256 tokenId_, uint256 amount_);\n\tevent Burn(uint256 tokenId_);\n\n\tconstructor(\n\t\tstring memory name_,\n\t\tstring memory symbol_,\n\t\tuint8 id_,\n\t\taddress admin_\n\t) ERC721(name_, symbol_) {\n\t\trequire(id_ <= 1, \"Every.finance: out of range\");\n\t\trequire(admin_ != address(0), \"Every.finance: zero address\");\n\t\tid = id_;\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, admin_);\n\t}\n\n\t/**\n\t * @dev get the size of array pendingIds.\n\t */\n\tfunction getPendingIdsSize() public view returns (uint256) {\n\t\treturn pendingIds.length;\n\t}\n\n\t/**\n\t * @dev Update investment.\n\t * @param investment_.\n\t * Emits an {UpdateInvestment} event indicating the updated investment `investment_`.\n\t */\n\tfunction updateInvestment(\n\t\taddress investment_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\trequire(investment_ != address(0), \"Every.finance: zero address\");\n\t\trequire(investment_ != investment, \"Every.finance: no change\");\n\t\t_revokeRole(INVESTMENT, investment);\n\t\t_grantRole(INVESTMENT, investment_);\n\t\tinvestment = investment_;\n\t\temit UpdateInvestment(investment_);\n\t}\n\n\t/**\n\t * @dev Update metadata.\n\t * @param metadata_.\n\t * Emits an {UpdateMetadata} event indicating the updated metadata `metadata_`.\n\t */\n\tfunction updateMetadata(\n\t\taddress metadata_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\trequire(metadata_ != address(0), \"Every.finance: zero address\");\n\t\trequire(metadata_ != address(metadata), \"Every.finance: no change\");\n\t\tmetadata = IMetadata(metadata_);\n\t\temit UpdateMetadata(metadata_);\n\t}\n\n\t/**\n\t * @dev Update baseURI.\n\t * @param uri_ new baseURI.\n\t * Emits an {UpdateBaseURI} event indicating the updated baseURI `uri_`.\n\t */\n\tfunction setBaseURI(\n\t\tstring calldata uri_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\tbaseURI = uri_;\n\t\temit UpdateBaseURI(uri_);\n\t}\n\n\t/**\n\t * @dev Update tolerance.\n\t * @param tolerance_.\n\t * Emits an {UpdateTolerance} event indicating the updated tolerance `tolerance_`.\n\t */\n\tfunction updateTolerance(\n\t\tuint256 tolerance_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\trequire(tolerance_ <= TOLERANCE_MAX, \"Every.finance: tolerance max\");\n\t\trequire(tolerance_ != tolerance, \"Every.finance: no change\");\n\t\ttolerance = tolerance_;\n\t\temit UpdateTolerance(tolerance_);\n\t}\n\n\t/**\n\t * @dev Update isOnChainMetadata.\n\t * @param isOnChainMetadata_.\n\t * Emits an {UpdateIsOnChainMetadata} event indicating the updated isOnChainMetadata `isOnChainMetadata_`.\n\t */\n\tfunction updateIsOnChainMetadata(\n\t\tbool isOnChainMetadata_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\trequire(\n\t\t\tisOnChainMetadata != isOnChainMetadata_,\n\t\t\t\"Every.finance: no change\"\n\t\t);\n\t\tisOnChainMetadata = isOnChainMetadata_;\n\t\temit UpdateIsOnChainMetadata(isOnChainMetadata_);\n\t}\n\n\t/**\n\t * @dev mint a Proof token.\n\t * The investor receives a proof Token when he makes\n\t * a deposit/withdrawal request.\n\t * @param account_ investor's address.\n\t * @param asset_ asset's address.\n\t * @param tokenId_  id of the token.\n\t * @param amount_ amount to mint.\n\t * @param minPrice_ minimum price of the yield-bearing token.\n\t * @param maxPrice_ maximum price  of the yield-bearing token\n\t * @param currentEventId_  id of the next manager event (process).\n\t * Emits an {Mint} event with `account_`, `tokenId_`, and `amount`.\n\t */\n\tfunction mint(\n\t\taddress account_,\n\t\taddress asset_,\n\t\tuint256 tokenId_,\n\t\tuint256 amount_,\n\t\tuint256 minPrice_,\n\t\tuint256 maxPrice_,\n\t\tuint256 currentEventId_\n\t) external onlyRole(INVESTMENT) {\n\t\t_safeMint(account_, tokenId_);\n\t\tpendingIds.push(tokenId_);\n\t\tpendingIdIndex[tokenId_] = pendingIds.length - 1;\n\t\t_increasePendingRequest(\n\t\t\ttokenId_,\n\t\t\tamount_,\n\t\t\tminPrice_,\n\t\t\tmaxPrice_,\n\t\t\tcurrentEventId_,\n\t\t\tasset_\n\t\t);\n\t\tpendingRequests[tokenId_].asset = asset_;\n\t\temit Mint(account_, tokenId_, amount_);\n\t}\n\n\t/**\n\t * @dev increase the pending request balance of token `tokenId_` by `amount`.\n\t * @param tokenId_  id of the token.\n\t * @param amount_ amount to add.\n\t * @param minPrice_ minimum price of the yield-bearing token.\n\t * @param maxPrice_ maximum price  of the yield-bearing token\n\t * @param currentEventId_  id of the next manager event (process).\n\t * @param asset_ asset's address.\n\t */\n\n\tfunction increasePendingRequest(\n\t\tuint256 tokenId_,\n\t\tuint256 amount_,\n\t\tuint256 minPrice_,\n\t\tuint256 maxPrice_,\n\t\tuint256 currentEventId_,\n\t\taddress asset_\n\t) external onlyRole(INVESTMENT) {\n\t\t_increasePendingRequest(\n\t\t\ttokenId_,\n\t\t\tamount_,\n\t\t\tminPrice_,\n\t\t\tmaxPrice_,\n\t\t\tcurrentEventId_,\n\t\t\tasset_\n\t\t);\n\t}\n\n\t/**\n\t * @dev decrease the pending request balance of token `tokenId_` by `amount`.\n\t * @param tokenId_  id of the token.\n\t * @param amount_ amount to remove.\n\t * @param currentEventId_  id of the next manager event (process).\n\t * @param asset_ asset's address.\n\t */\n\tfunction decreasePendingRequest(\n\t\tuint256 tokenId_,\n\t\tuint256 amount_,\n\t\tuint256 currentEventId_,\n\t\taddress asset_\n\t) external onlyRole(INVESTMENT) {\n\t\t_decreasePendingRequest(tokenId_, amount_, currentEventId_, asset_);\n\t}\n\n\t/**\n\t * @dev update event Id\n\t * @param tokenId_  id of the token.\n\t * @param currentEventId_  current event Id.\n\t */\n\tfunction updateEventId(\n\t\tuint256 tokenId_,\n\t\tuint256 currentEventId_\n\t) external onlyRole(INVESTMENT) {\n\t\tpendingRequests[tokenId_].updateEventId(currentEventId_);\n\t}\n\n\t/**\n\t * @dev update the locked and available pending balances before the manager validation.\n\t * @param tokenId_  id of the token.\n\t * @param currentEventId_  id of the next manager event (process).\n\t */\n\tfunction preValidatePendingRequest(\n\t\tuint256 tokenId_,\n\t\tuint256 currentEventId_\n\t) external onlyRole(INVESTMENT) {\n\t\tpendingRequests[tokenId_].preValidate(currentEventId_);\n\t}\n\n\t/**\n\t * @dev update the locked pending balance after the manager validation.\n\t * @param tokenId_  id of the token.\n\t * @param amount_  amount to remove from the locked pending balance.\n\t * @param currentEventId_  id of the next manager event (process).\n\t * @param asset_ asset's address.\n\t */\n\tfunction validatePendingRequest(\n\t\tuint256 tokenId_,\n\t\tuint256 amount_,\n\t\tuint256 currentEventId_,\n\t\taddress asset_\n\t) external onlyRole(INVESTMENT) {\n\t\tpendingRequests[tokenId_].validate(amount_, currentEventId_);\n\t\t_decreasetotalAmountPerAsset(tokenId_, amount_, asset_);\n\t}\n\n\t/**\n\t * @dev  get tokenURI of token `tokenId`.\n\t * If `isOnChainMetadata`, the token metadata is generated on chain.\n\t *  Otherwise, see {IERC721Metadata-tokenURI}.\n\t * @param tokenId  token id .\n\t */\n\tfunction tokenURI(\n\t\tuint256 tokenId\n\t) public view virtual override returns (string memory) {\n\t\t_requireMinted(tokenId);\n\t\tif (isOnChainMetadata) {\n\t\t\treturn metadata.render(tokenId);\n\t\t} else {\n\t\t\tstring memory string_ = _baseURI();\n\t\t\treturn\n\t\t\t\tbytes(string_).length > 0\n\t\t\t\t\t? string(abi.encodePacked(string_, tokenId.toString()))\n\t\t\t\t\t: \"\";\n\t\t}\n\t}\n\n\t/**\n\t * @dev See {IERC165-supportsInterface}.\n\t */\n\tfunction supportsInterface(\n\t\tbytes4 interfaceId\n\t)\n\t\tpublic\n\t\tview\n\t\toverride(ERC721Enumerable, AccessControlEnumerable)\n\t\treturns (bool)\n\t{\n\t\treturn\n\t\t\tERC721Enumerable.supportsInterface(interfaceId) ||\n\t\t\tAccessControlEnumerable.supportsInterface(interfaceId);\n\t}\n\n\t/**\n\t * @dev increase the pending request balance of token `tokenId_` by `amount`.\n\t * This internal function is called when an investor makes a deposit/withdrawal request.\n\t * @param tokenId_  id of the token.\n\t * @param amount_ amount to add.\n\t * @param minPrice_ minimum price of the yield-bearing token.\n\t * @param maxPrice_ maximum price  of the yield-bearing token\n\t * @param currentEventId_  id of the next manager event (process).\n\t * @param asset_ asset's address.\n\t */\n\n\tfunction _increasePendingRequest(\n\t\tuint256 tokenId_,\n\t\tuint256 amount_,\n\t\tuint256 minPrice_,\n\t\tuint256 maxPrice_,\n\t\tuint256 currentEventId_,\n\t\taddress asset_\n\t) internal {\n\t\tpendingRequests[tokenId_].increase(\n\t\t\tamount_,\n\t\t\tminPrice_,\n\t\t\tmaxPrice_,\n\t\t\tcurrentEventId_\n\t\t);\n\t\ttotalAmountPerAsset[asset_] += amount_;\n\t\tif (id == 0) {\n\t\t\ttotalAmount += amount_;\n\t\t}\n\t}\n\n\t/**\n\t * @dev decrease the pending request balance of token `tokenId_` by `amount`.\n\t * This internal function is called when an investor cancel a deposit/withdrawal request.\n\t * @param tokenId_  id of the token.\n\t * @param amount_ amount to remove.\n\t * @param currentEventId_  id of the next manager event (process).\n\t * @param asset_ asset's address.\n\t */\n\tfunction _decreasePendingRequest(\n\t\tuint256 tokenId_,\n\t\tuint256 amount_,\n\t\tuint256 currentEventId_,\n\t\taddress asset_\n\t) internal {\n\t\tpendingRequests[tokenId_].decrease(amount_, currentEventId_);\n\t\t_decreasetotalAmountPerAsset(tokenId_, amount_, asset_);\n\t}\n\n\t/**\n\t * @dev burn token `tokenId_.\n\t * a proof token is burned when its corresponding investor pending request is fully validated by the manager.\n\t * @param tokenId_  id of the token.\n\t * Emits a {Burn} event with `owner_` and `tokenId_ `.\n\t */\n\tfunction burn(uint256 tokenId_) internal {\n\t\t_burn(tokenId_);\n\t\t_deleteId(tokenId_);\n\t\temit Burn(tokenId_);\n\t}\n\n\tfunction _deleteId(uint256 id_) internal {\n\t\tuint256 index_ = pendingIdIndex[id_];\n\t\tuint256 lastId_ = pendingIds[pendingIds.length - 1];\n\t\tpendingIds[index_] = lastId_;\n\t\tpendingIds.pop();\n\t\tpendingIdIndex[lastId_] = index_;\n\t\tdelete pendingIdIndex[id_];\n\t\tdelete pendingRequests[id_];\n\t}\n\n\t/**\n\t * @dev decrease totalAmountPerAsset at least by `amount`.\n\t * This internal function decreases totalAmountPerAsset at least by `amount` when an investor cancels his\n\t * deposit/withdrawal request `tokenId_` or the manager validates it.\n\t * If the remaining pending request balance of `tokenId_` is lower than `tolerance`,\n\t * the proof token `tokenId_` is burned and this remaining balance amount is removed also from totalAmountPerAsset.\n\t * @param tokenId_  id of the token.\n\t * @param amount_ amount of asset.\n\t * @param asset_ asset's address.\n\t */\n\tfunction _decreasetotalAmountPerAsset(\n\t\tuint256 tokenId_,\n\t\tuint256 amount_,\n\t\taddress asset_\n\t) internal {\n\t\tuint256 amountToRemove_ = amount_;\n\t\tuint256 remainingAmount_ = pendingRequests[tokenId_].lockedAmount +\n\t\t\tpendingRequests[tokenId_].availableAmount;\n\n\t\tif (remainingAmount_ <= tolerance) {\n\t\t\tamountToRemove_ += remainingAmount_;\n\t\t\tburn(tokenId_);\n\t\t}\n\t\trequire(\n\t\t\ttotalAmountPerAsset[asset_] >= amountToRemove_,\n\t\t\t\"Every.finance: max amount\"\n\t\t);\n\t\tunchecked {\n\t\t\ttotalAmountPerAsset[asset_] -= amountToRemove_;\n\t\t}\n\n\t\tif (id == 0) {\n\t\t\tunchecked {\n\t\t\t\ttotalAmount -= amountToRemove_;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _baseURI() internal view override returns (string memory) {\n\t\treturn baseURI;\n\t}\n}\n"
    },
    "contracts/voltargetBTC/common/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Every.finance Contracts\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"./HoldTime.sol\";\n\n/**\n * @dev Implementation of the yield-bearing tokens {ERC20}.\n */\n\ncontract Token is ERC20, AccessControlEnumerable {\n\tbytes32 public constant INVESTMENT = keccak256(\"INVESTMENT\");\n\taddress public investment;\n\tmapping(address => bool) public whitelist;\n\tHoldTime public holdTime;\n\n\tevent UpdateInvestment(address indexed investment_);\n\tevent UpdateHoldTime(address indexed holdTime_);\n\tevent AddToWhiteList(address indexed address_);\n\tevent RemoveFromWhiteList(address indexed address_);\n\tevent Mint(address indexed to_, uint256 amount_);\n\tevent Burn(address indexed account_, uint256 amount_);\n\n\tconstructor(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\taddress holdTime_,\n\t\taddress admin_\n\t) ERC20(_name, _symbol) {\n\t\trequire(holdTime_ != address(0), \"Every.finance: zero address\");\n\t\trequire(admin_ != address(0), \"Every.finance: zero address\");\n\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, admin_);\n\t\tholdTime = HoldTime(holdTime_);\n\t}\n\n\t/**\n\t * @dev Update investment.\n\t * @param investment_.\n\t * Emits an {UpdateInvestment} event indicating the updated investment `investment_`.\n\t */\n\tfunction updateInvestment(\n\t\taddress investment_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\trequire(investment_ != address(0), \"Every.finance: zero address\");\n\t\trequire(investment_ != investment, \"Every.finance: no change\");\n\t\t_revokeRole(INVESTMENT, investment);\n\t\t_grantRole(INVESTMENT, investment_);\n\t\twhitelist[investment] = false;\n\t\twhitelist[investment_] = true;\n\t\tinvestment = investment_;\n\t\temit UpdateInvestment(investment_);\n\t}\n\n\t/**\n\t * @dev Update holdTime.\n\t * @param holdTime_.\n\t * Emits an {UpdateHoldTime} event indicating the updated holdTime `holdTime_`.\n\t */\n\tfunction updateHoldTime(\n\t\taddress holdTime_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\trequire(holdTime_ != address(0), \"Every.finance: zero address\");\n\t\trequire(holdTime_ != address(holdTime), \"Every.finance: no change\");\n\t\tholdTime = HoldTime(holdTime_);\n\t\temit UpdateHoldTime(holdTime_);\n\t}\n\n\t/**\n\t * @dev Add `account_` to `whitelist `.\n\t * @param account_ .\n\t * Emits an {AddToWhiteList} event indicating the addedd address `account_`.\n\t */\n\tfunction addToWhiteList(\n\t\taddress account_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\trequire(account_ != address(0), \"Every.finance: zero address\");\n\t\trequire(!whitelist[account_], \"Every.finance: address exists\");\n\t\twhitelist[account_] = true;\n\t\temit AddToWhiteList(account_);\n\t}\n\n\t/**\n\t * @dev remove `account_` from `whitelist `.\n\t * @param account_ .\n\t * Emits an {RemoveFromWhiteList} event indicating the deleted address `account_`.\n\t */\n\tfunction removeFromWhiteList(\n\t\taddress account_\n\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\trequire(whitelist[account_], \"Every.finance: address doesn't exist\");\n\t\twhitelist[account_] = false;\n\t\temit RemoveFromWhiteList(account_);\n\t}\n\n\t/**\n\t * @dev mint `amount_`Token for `to_`\n\t * @param to_ receiver's address.\n\t * @param amount_  amount to mint.\n\t * Emits an {Mint} event with `to_`, and `amount_`.\n\t */\n\tfunction mint(address to_, uint256 amount_) external onlyRole(INVESTMENT) {\n\t\t_mint(to_, amount_);\n\t\temit Mint(to_, amount_);\n\t}\n\n\t/**\n\t * @dev burn `amount_`Token for `from_`\n\t * @param from_ user's address.\n\t * @param amount_ amount to burn.\n\t * Emits an {Burn} event with `from_`, and `amount_`.\n\t */\n\tfunction burn(\n\t\taddress from_,\n\t\tuint256 amount_\n\t) external onlyRole(INVESTMENT) {\n\t\trequire(amount_ != 0, \"Every.finance: zero amount\");\n\t\t_burn(from_, amount_);\n\t\temit Burn(from_, amount_);\n\t}\n\n\t/**\n\t * @dev get the average token hold time of `account_`\n\t * @param account_  user's address.\n\t * @return time_ average token hold time.\n\t */\n\tfunction getHoldTime(address account_) public view returns (uint256 time_) {\n\t\ttime_ = holdTime.getHoldTime(account_);\n\t}\n\n\t/**\n\t * @dev update the average token hold time for `account_`.\n\t * @param account_ user's address.\n\t * @param amount_  new received token amount.\n\t */\n\n\tfunction _updateHoldTime(address account_, uint256 amount_) internal {\n\t\trequire(amount_ != 0, \"Every.finance: zero amount\");\n\t\tholdTime.updateHoldTime(account_, amount_);\n\t}\n\n\t/**\n\t * @dev Hook that is called before any transfer of tokens. This includes\n\t * minting and burning. It permits to update the hold time of the receiver `to_` if :\n\t *  - the receiver's address `from_` is not zero nor whitelisted  and the sender is not whitelisted\n\t * @param from sender's address.\n\t * @param to receiver's address.\n\t * @param amount transferred amount.\n\t */\n\tfunction _beforeTokenTransfer(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 amount\n\t) internal virtual override {\n\t\tif ((to != address(0)) && (!whitelist[from]) && (!whitelist[to])) {\n\t\t\t_updateHoldTime(to, amount);\n\t\t}\n\t}\n}\n"
    },
    "contracts/voltargetBTC/common/Treasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Every.finance Contracts\npragma solidity ^0.8.4;\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"../libraries/AssetTransfer.sol\";\n\n/**\n * @author Every.finance.\n * @notice Implementation of Treasury contract.\n */\n\ncontract Treasury is AccessControlEnumerable {\n\tbytes32 public constant WITHDRAWER = keccak256(\"WITHDRAWER\");\n\n\tevent SendTo(address indexed to_, uint256 amount_, address asset_);\n\n\tconstructor(address admin_) payable {\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, admin_);\n\t}\n\n\treceive() external payable {}\n\n\t/**\n\t * @dev Send asset `asset_` from the contract to address `to_`.\n\t * @param to_ receiver.\n\t * @param amount_ amount to send.\n\t * @param asset_ asset's address.\n\t * Emits an {SendTo} event with `to_`, `amount_` and `asset_`.\n\t */\n\n\tfunction sendTo(\n\t\taddress to_,\n\t\tuint256 amount_,\n\t\taddress asset_\n\t) public onlyRole(WITHDRAWER) {\n\t\trequire(to_ != address(0), \"Every.finance: zero address\");\n\t\tAssetTransfer.transfer(to_, amount_, asset_);\n\t\temit SendTo(to_, amount_, asset_);\n\t}\n}\n"
    },
    "contracts/voltargetBTC/interfaces/IMetadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IMetadata {\n\tfunction render(uint256 _tokenId) external view returns (string memory);\n}\n"
    },
    "contracts/voltargetBTC/libraries/AssetTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Every.finance Contracts\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @dev Implementation of the library AssetTransfer that proposes functions to transfer Ether/ERC20 asset.\n */\nlibrary AssetTransfer {\n\tusing SafeERC20 for IERC20;\n\n\t/**\n\t * @dev transfer `amount_` of asset `asset_` from `from_` to `to_`.\n\t * @param from_ sender'address.\n\t * @param to_ receiver'address.\n\t * @param amount_ amount to send.\n\t * @param asset_ asset's IERC20 interface to send.Its decimal has to be lower than 18,\n\t * if it is ERC20.\n\t */\n\tfunction transferFrom(\n\t\taddress from_,\n\t\taddress to_,\n\t\tuint256 amount_,\n\t\tIERC20 asset_\n\t) internal {\n\t\t(bool success_, uint8 assetDecimals_) = tryGetAssetDecimals(asset_);\n\t\trequire(success_, \"Every.finance: no decimal\");\n\t\trequire(assetDecimals_ <= uint8(18), \"Every.finance: max decimal\");\n\t\tunchecked {\n\t\t\tassetDecimals_ = uint8(18) - assetDecimals_;\n\t\t}\n\t\tamount_ = amount_ / 10 ** assetDecimals_;\n\t\trequire(amount_ != 0, \"Every.finance: zero amount\");\n\t\tasset_.safeTransferFrom(from_, to_, amount_);\n\t}\n\n\t/**\n\t * @dev transfer `amount_` of asset `asset_` to `to_`.\n\t * @param to_ receiver'address.\n\t * @param amount_ amount to send.\n\t * @param asset_ asset's address to send. Its decimal has to be lower than 18,\n\t * if it is ERC20.\n\t */\n\tfunction transfer(address to_, uint256 amount_, address asset_) internal {\n\t\tif (asset_ != address(0)) {\n\t\t\t(bool success_, uint8 assetDecimals_) = tryGetAssetDecimals(\n\t\t\t\tIERC20(asset_)\n\t\t\t);\n\t\t\trequire(success_, \"Every.finance: no decimal\");\n\t\t\tassetDecimals_ = uint8(18) - assetDecimals_;\n\t\t\tamount_ = amount_ / 10 ** assetDecimals_;\n\t\t\trequire(amount_ != 0, \"Every.finance: zero amount\");\n\t\t\tIERC20(asset_).safeTransfer(to_, amount_);\n\t\t} else {\n\t\t\trequire(\n\t\t\t\taddress(this).balance >= amount_,\n\t\t\t\t\"Every.finance: amount exceeds balance\"\n\t\t\t);\n\t\t\tpayable(to_).transfer(amount_);\n\t\t}\n\t}\n\n\t/**\n\t * @dev get asset's decimal.\n\t * @param asset_ asset's IERC20 interface.\n\t */\n\tfunction tryGetAssetDecimals(\n\t\tIERC20 asset_\n\t) internal view returns (bool, uint8) {\n\t\t(bool success, bytes memory encodedDecimals) = address(asset_)\n\t\t\t.staticcall(\n\t\t\t\tabi.encodeWithSelector(IERC20Metadata.decimals.selector)\n\t\t\t);\n\t\tif (success && encodedDecimals.length >= 32) {\n\t\t\tuint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\n\t\t\tif (returnedDecimals <= type(uint8).max) {\n\t\t\t\treturn (true, uint8(returnedDecimals));\n\t\t\t}\n\t\t}\n\t\treturn (false, 0);\n\t}\n}\n"
    },
    "contracts/voltargetBTC/libraries/FeeMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Every.finance Contracts\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"./AssetTransfer.sol\";\nimport \"../common/Treasury.sol\";\nimport \"../common/Token.sol\";\n\n/**\n * @dev Implementation of the library FeeMinter that proposes functions to calculate and mint different fee.\n */\n\nlibrary FeeMinter {\n\tuint256 public constant SCALING_FACTOR_FEE = 1e8;\n\tuint256 public constant SCALING_FACTOR_PRICE = 1e18;\n\tuint256 public constant SECONDES_PER_YEAR = 365 days;\n\n\t/**\n\t * @dev calculate and mint performance fee.\n\t * performance fee is generated when the current price is above the average price.\n\t * Performance fee is minted in yield-bearing token for the treasury.\n\t * @param tokenPrice_ current price of the yield-bearing token.\n\t * @param tokenPriceMean_ average price of the yield-bearing token.\n\t * @param performanceFeeRate_ performance fee rate. Its precision factor is SCALING_FACTOR.\n\t * @param treasury_ treasury\n\t * @param token_  yield-bearing token's address.\n\t */\n\tfunction mintPerformanceFee(\n\t\tuint256 tokenPrice_,\n\t\tuint256 tokenPriceMean_,\n\t\tuint256 performanceFeeRate_,\n\t\taddress treasury_,\n\t\taddress token_\n\t) internal returns (uint256, uint256) {\n\t\tToken tokenERC20_ = Token(token_);\n\t\tuint256 performanceFee_;\n\t\tif (tokenPrice_ > tokenPriceMean_) {\n\t\t\tuint256 deltaPrice_;\n\t\t\tunchecked {\n\t\t\t\tdeltaPrice_ = tokenPrice_ - tokenPriceMean_;\n\t\t\t\ttokenPriceMean_ = tokenPrice_;\n\t\t\t}\n\t\t\tperformanceFee_ = Math.mulDiv(\n\t\t\t\ttokenERC20_.totalSupply(),\n\t\t\t\t(deltaPrice_ * performanceFeeRate_),\n\t\t\t\t(tokenPrice_ * SCALING_FACTOR_FEE)\n\t\t\t);\n\n\t\t\ttokenERC20_.mint(treasury_, performanceFee_);\n\t\t}\n\t\treturn (tokenPriceMean_, performanceFee_);\n\t}\n\n\t/**\n\t * @dev calculate and mint management fee.\n\t * management fee is minted in yield-bearing token for the treasury.\n\t * @param managementFeeLastTime_  last time at wich the management fee is calculated.\n\t * @param managementFeeRate_ management fee rate. Its precision factor is SCALING_FACTOR.\n\t * @param treasury_ treasury\n\t * @param token_  yield-bearing token's address.\n\t */\n\tfunction mintManagementFee(\n\t\tuint256 managementFeeLastTime_,\n\t\tuint256 managementFeeRate_,\n\t\taddress treasury_,\n\t\taddress token_\n\t) internal returns (uint256, uint256) {\n\t\tuint256 managementFee_;\n\t\tif (managementFeeLastTime_ != 0) {\n\t\t\tToken tokenERC20_ = Token(token_);\n\t\t\tuint256 deltaTime_ = block.timestamp - managementFeeLastTime_;\n\t\t\tmanagementFee_ = Math.mulDiv(\n\t\t\t\ttokenERC20_.totalSupply(),\n\t\t\t\t(managementFeeRate_ * deltaTime_),\n\t\t\t\t(SCALING_FACTOR_FEE * SECONDES_PER_YEAR)\n\t\t\t);\n\t\t\tmanagementFeeLastTime_ = block.timestamp;\n\t\t\ttokenERC20_.mint(treasury_, managementFee_);\n\t\t}\n\t\treturn (managementFeeLastTime_, managementFee_);\n\t}\n\n\t/**\n\t * @dev calculate and mint investment fee (ie. slippage fee)\n\t * investment fee is minted in yield-bearing token for the treasury.\n\t * investment fee can be negative (cost: isFee == true) or positive (profit: isFee == false).\n\t * if investment fee is negative, the manager can verify if he can get from the treasury the underlying  asset ,\n\t * and mint for it the equivalent amount in yield-bearing token.\n\t * if investment fee is positive, the manager can verify if he can send to the treasury the underlying  asset ,\n\t * and burn form it the equivalent amount in yield-bearing token.\n\t * @param amount_ amount of fee in yield-bearing token.\n\t * @param tokenPrice_ current token price.\n\t * @param isFee_ true if positive fee, false otherwise.\n\t * @param treasury_ treasury\n\t * @param token_  yield-bearing token's address.\n\t * @param asset_  asset's address.\n\t */\n\tfunction MintInvestmentFee(\n\t\tuint256 amount_,\n\t\tuint256 tokenPrice_,\n\t\tbool isFee_,\n\t\taddress payable treasury_,\n\t\taddress token_,\n\t\taddress asset_\n\t) internal returns (uint256) {\n\t\trequire(amount_ != 0, \"Every.finance: zero amount\");\n\n\t\tuint256 assetBalanceTreasury_ = _getBalance(asset_, treasury_);\n\t\tuint256 tokenBalanceTreasury_ = IERC20(token_).balanceOf(treasury_);\n\n\t\tif (isFee_) {\n\t\t\treturn\n\t\t\t\t_mintNegativeInvestmentFee(\n\t\t\t\t\tamount_,\n\t\t\t\t\tassetBalanceTreasury_,\n\t\t\t\t\ttokenPrice_,\n\t\t\t\t\ttreasury_,\n\t\t\t\t\taddress(token_),\n\t\t\t\t\tasset_\n\t\t\t\t);\n\t\t} else {\n\t\t\treturn\n\t\t\t\t_burnPositiveInvestmentFee(\n\t\t\t\t\tamount_,\n\t\t\t\t\ttokenBalanceTreasury_,\n\t\t\t\t\ttokenPrice_,\n\t\t\t\t\ttreasury_,\n\t\t\t\t\taddress(token_),\n\t\t\t\t\tasset_\n\t\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @dev get asset's balance of the treasury.\n\t * @param asset_  asset's addres.\n\t * @param treasury_ treasury\n\t */\n\tfunction _getBalance(\n\t\taddress asset_,\n\t\taddress treasury_\n\t) internal view returns (uint256 balance_) {\n\t\tif (asset_ == address(0)) {\n\t\t\tbalance_ = treasury_.balance;\n\t\t} else {\n\t\t\tbalance_ = IERC20(asset_).balanceOf(treasury_);\n\n\t\t\t(bool success_, uint8 assetDecimals_) = AssetTransfer\n\t\t\t\t.tryGetAssetDecimals(IERC20(asset_));\n\t\t\trequire(success_, \"Every.finance: no decimal\");\n\t\t\trequire(assetDecimals_ <= uint8(18), \"Every.finance: max decimal\");\n\t\t\tunchecked {\n\t\t\t\tassetDecimals_ = uint8(18) - assetDecimals_;\n\t\t\t}\n\t\t\tbalance_ = balance_ * 10 ** assetDecimals_;\n\t\t}\n\t}\n\n\t/**\n\t * @dev calculate and mint negative investment fee (ie. slippage fee)\n\t * investment fee is minted in yield-bearing token for the treasury.\n\t * the function verifies if it's possible to get from the treasury the underlying  asset ,\n\t * and mint for it the equivalent amount in yield-bearing token.\n\t * @param amount_ amount of fee in yield-bearing token.\n\t * @param assetBalanceTreasury_ asset's balance of the treasury.\n\t * @param tokenPrice_ current token price.\n\t * @param treasury_ treasury\n\t * @param token_ yield-bearing token's address.\n\t * @param asset_ asset's address.\n\t */\n\tfunction _mintNegativeInvestmentFee(\n\t\tuint256 amount_,\n\t\tuint256 assetBalanceTreasury_,\n\t\tuint256 tokenPrice_,\n\t\taddress payable treasury_,\n\t\taddress token_,\n\t\taddress asset_\n\t) internal returns (uint256 remainingAmount_) {\n\t\tuint256 deltaAmount_ = Math.min(amount_, assetBalanceTreasury_);\n\t\tif (deltaAmount_ != 0) {\n\t\t\tToken tokenERC20_ = Token(token_);\n\t\t\tTreasury(treasury_).sendTo(address(this), deltaAmount_, asset_);\n\t\t\tuint256 tokenAmount_ = Math.mulDiv(\n\t\t\t\tdeltaAmount_,\n\t\t\t\tSCALING_FACTOR_PRICE,\n\t\t\t\ttokenPrice_\n\t\t\t);\n\t\t\ttokenERC20_.mint(treasury_, tokenAmount_);\n\t\t\tunchecked {\n\t\t\t\tremainingAmount_ = amount_ - deltaAmount_;\n\t\t\t}\n\t\t} else {\n\t\t\tremainingAmount_ = amount_;\n\t\t}\n\t}\n\n\t/**\n\t * @dev calculate and burn positive investment fee (ie. slippage fee)\n\t * investment fee is burned in yield-bearing token from the treasury.\n\t * the function verifies if it's possible to send to the treasury the underlying  asset ,\n\t * and burn  from it the equivalent amount in yield-bearing token.\n\t * @param amount_ amount of fee in yield-bearing token.\n\t * @param tokenBalanceTreasury_ yield-bearing token's balance of the treasury.\n\t * @param tokenPrice_ current token price.\n\t * @param treasury_ treasury\n\t * @param token_ yield-bearing token's address.\n\t * @param asset_ asset's address.\n\t */\n\tfunction _burnPositiveInvestmentFee(\n\t\tuint256 amount_,\n\t\tuint256 tokenBalanceTreasury_,\n\t\tuint256 tokenPrice_,\n\t\taddress treasury_,\n\t\taddress token_,\n\t\taddress asset_\n\t) internal returns (uint256 remainingAmount_) {\n\t\tuint256 tokenAmount_ = Math.mulDiv(\n\t\t\tamount_,\n\t\t\tSCALING_FACTOR_PRICE,\n\t\t\ttokenPrice_\n\t\t);\n\t\ttokenAmount_ = Math.min(tokenAmount_, tokenBalanceTreasury_);\n\t\tuint256 deltaAmount_;\n\t\tif (tokenAmount_ != 0) {\n\t\t\tToken tokenERC20_ = Token(token_);\n\t\t\tdeltaAmount_ = Math.mulDiv(\n\t\t\t\ttokenAmount_,\n\t\t\t\ttokenPrice_,\n\t\t\t\tSCALING_FACTOR_PRICE\n\t\t\t);\n\t\t\tAssetTransfer.transfer(treasury_, deltaAmount_, asset_);\n\t\t\ttokenERC20_.burn(treasury_, tokenAmount_);\n\t\t}\n\t\tunchecked {\n\t\t\tremainingAmount_ = amount_ - deltaAmount_;\n\t\t}\n\t}\n}\n"
    },
    "contracts/voltargetBTC/libraries/PendingRequest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Every.finance Contracts\npragma solidity ^0.8.4;\n\nstruct PendingRequestData {\n\tuint256 lockedAmount;\n\tuint256 availableAmount;\n\tuint256 minPrice;\n\tuint256 maxPrice;\n\tuint256 eventId;\n\taddress asset;\n}\n\n/**\n * @dev Implementation of the library PendingRequest that proposes functions to update for an investor a struct PendingRequestData.\n */\nlibrary PendingRequest {\n\t/**\n\t * @dev Modifier that checks if the new price bounds are valid.\n\t * It reverts when introducing new price bounds during a manager event validation.\n\t * It prevents the investor to modify the price bounds of his deposit/withdrawal request\n\t * during a manager event validation.\n\t */\n\tmodifier CheckPrice(\n\t\tPendingRequestData storage request,\n\t\tuint256 minPrice_,\n\t\tuint256 maxPrice_,\n\t\tuint256 currentEventId_\n\t) {\n\t\tif ((request.minPrice != 0) || (request.maxPrice != 0)) {\n\t\t\tif (currentEventId_ > request.eventId) {\n\t\t\t\trequire(\n\t\t\t\t\t(minPrice_ == request.minPrice) &&\n\t\t\t\t\t\t(maxPrice_ == request.maxPrice),\n\t\t\t\t\t\"Every.finance: price don't match\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Modifier that update for an investor his pending request data\n\t * to be synchronized with the current event id.\n\t */\n\tmodifier syncWithEventId(\n\t\tPendingRequestData storage request,\n\t\tuint256 currentEventId_\n\t) {\n\t\tif (currentEventId_ > request.eventId) {\n\t\t\trequest.lockedAmount += request.availableAmount;\n\t\t\trequest.availableAmount = 0;\n\t\t\trequest.eventId = currentEventId_;\n\t\t}\n\t\t_;\n\t}\n\n\t/**\n\t * @dev increase a pending request `request` by `amount`.\n\t * This function is called when an investor makes a deposit/withdrawal request.\n\t * @param request  pending request.\n\t * @param amount_ amount to add.\n\t * @param minPrice_ minimum price of the yield-bearing token.\n\t * @param maxPrice_ maximum price  of the yield-bearing token\n\t * @param currentEventId_  id of the next manager event (process).\n\t */\n\tfunction increase(\n\t\tPendingRequestData storage request,\n\t\tuint256 amount_,\n\t\tuint256 minPrice_,\n\t\tuint256 maxPrice_,\n\t\tuint256 currentEventId_\n\t)\n\t\tinternal\n\t\tCheckPrice(request, minPrice_, maxPrice_, currentEventId_)\n\t\tsyncWithEventId(request, currentEventId_)\n\t{\n\t\trequest.availableAmount += amount_;\n\t\trequest.minPrice = minPrice_;\n\t\trequest.maxPrice = maxPrice_;\n\t}\n\n\t/**\n\t * @dev decrease a pending request `request` by `amount`.\n\t * This function is called when an investor cancels a deposit/withdrawal request.\n\t * @param request  pending request.\n\t * @param amount_ amount to remove.\n\t * @param currentEventId_  id of the next manager event (process).\n\t */\n\tfunction decrease(\n\t\tPendingRequestData storage request,\n\t\tuint256 amount_,\n\t\tuint256 currentEventId_\n\t) internal syncWithEventId(request, currentEventId_) {\n\t\trequire(\n\t\t\trequest.availableAmount >= amount_,\n\t\t\t\"Every.finance: max amount\"\n\t\t);\n\t\tunchecked {\n\t\t\trequest.availableAmount -= amount_;\n\t\t}\n\t}\n\n\t/**\n\t * @dev update event Id\n\t *\n\t * @param request pending request.\n\t * @param currentEventId_  id of the next manager event (process).\n\t */\n\tfunction updateEventId(\n\t\tPendingRequestData storage request,\n\t\tuint256 currentEventId_\n\t) internal {\n\t\trequest.eventId = currentEventId_;\n\t}\n\n\t/**\n\t * @dev update the locked and available pending balances of `request` before the manager validation.\n\t * @param request pending request.\n\t * @param currentEventId_  id of the next manager event (process).\n\t */\n\tfunction preValidate(\n\t\tPendingRequestData storage request,\n\t\tuint256 currentEventId_\n\t) internal syncWithEventId(request, currentEventId_) {}\n\n\t/**\n\t * @dev decrease the locked pending balance of `request` after the manager validation by `amount`.\n\t * @param request pending request.\n\t * @param currentEventId_  id of the next manager event (process).\n\t */\n\tfunction validate(\n\t\tPendingRequestData storage request,\n\t\tuint256 amount_,\n\t\tuint256 currentEventId_\n\t) internal syncWithEventId(request, currentEventId_) {\n\t\trequire(request.lockedAmount >= amount_, \"Every.finance: max amount\");\n\t\tunchecked {\n\t\t\trequest.lockedAmount -= amount_;\n\t\t}\n\t}\n}\n"
    },
    "contracts/voltargetBTC/sigmaBTC/InvestmentSigmaBTC.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"../common/Investment.sol\";\n\n/**\n * @author Every.finance.\n * @notice Implementation of the contract InvestmentSigmaBTC.\n */\n\ncontract InvestmentSigmaBTC is Investment {\n\tconstructor(\n\t\taddress token_,\n\t\taddress asset_,\n\t\taddress management_,\n\t\taddress deposit_,\n\t\taddress withdrawal_,\n\t\taddress admin_\n\t) Investment(token_, asset, management_, deposit_, withdrawal_, admin_) {}\n}\n"
    }
  }
}}