{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/layer2/OperatorManagerStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @title\n/// @notice\ncontract OperatorManagerStorage {\n    address public rollupConfig;\n    address public layer2Manager;\n    address public depositManager;\n    address public ton;\n    address public wton;\n\n    address public manager;\n\n    modifier onlyManager() {\n        require(msg.sender == manager, \"not manager\");\n        _;\n    }\n\n    modifier nonZeroAddress(address addr) {\n        require(addr != address(0), \"zero address\");\n        _;\n    }\n}"
    },
    "contracts/layer2/OperatorManagerV1_1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./OperatorManagerStorage.sol\";\n\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nerror ZeroAddressError();\nerror AlreadySetError();\nerror NotOperatorError();\nerror InsufficientBalanceError();\nerror TransferEthError();\nerror ParameterError();\nerror SameAddressError();\nerror SameError();\n\ninterface IWTON {\n     function swapToTON(uint256 wtonAmount) external returns (bool);\n}\n\ninterface IRollupConfig {\n    function owner() external view returns (address);\n}\n\ninterface ILayer2Manager {\n    function candidateAddOnOfOperator(address operator) external view returns (address);\n    function checkL1Bridge(address _rollupConfig) external view returns (bool result, address l1Bridge, address portal, address l2Ton);\n    function checkL1BridgeDetail(address _rollupConfig) external view returns\n        (bool result, address l1Bridge, address portal, address l2Ton,\n        uint8 _type, uint8 status, bool rejectedSeigs, bool rejectedL2Deposit);\n}\n\ninterface IDepositManager {\n    function deposit(address layer2, uint256 amount) external returns (bool);\n    function deposit(address layer2, address to, uint256 amount) external returns (bool);\n    function requestWithdrawal(address layer2, uint256 amount) external returns (bool);\n    function processRequest(address layer2, bool receiveTON) external returns (bool);\n    function processRequests(address layer2, uint256 n, bool receiveTON) external returns (bool);\n}\n\n/// @title\n/// @notice\ncontract OperatorManagerV1_1 is Ownable, OperatorManagerStorage {\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice Event occurs when the transfer manager\n     * @param previousManager   the previous manager address\n     * @param newManager        the new manager address\n     */\n    event TransferredManager(address previousManager, address newManager);\n\n    /**\n     * @notice Event occurs when adding the operator\n     * @param operator  the operator address\n     */\n    event AddedOperator(address operator);\n\n    /**\n     * @notice Event occurs when deleting the operator\n     * @param operator  the operator address\n     */\n    event DeletedOperator(address operator);\n\n    /**\n     * @notice Event occurs when setting the addresses\n     * @param _layer2Manager    the _layer2Manager address\n     * @param _depositManager   the _depositManager address\n     * @param _ton              the TON address\n     * @param _wton             the WTON address\n     */\n    event SetAddresses(address _layer2Manager, address _depositManager, address _ton, address _wton);\n\n    /**\n     * @notice Event occurs when the claim token\n     * @param token     the token address, if token address is address(0), it is ETH\n     * @param caller    the caller address\n     * @param to        the address received token\n     * @param amount    the received token amount\n     */\n    event Claimed(address token, address caller, address to, uint256 amount);\n\n    /**\n     * @notice Event occurs when setting the additional notesl2Info\n     * @param _additionalNotesl2Info the additional notesl2Info\n     */\n    event SetAdditionalNotes(string _additionalNotesl2Info);\n\n    /**\n     * @notice Event occurs when requesting withdraw of staked ton\n     * @param candidate     the candidate address\n     * @param amount        the amount requesting withdrawal\n     */\n    event RequestWithdrawal(address candidate, uint256 amount);\n\n    /**\n     * @notice Event occurs when processing requesting withdrawal\n     * @param candidate     the candidate address\n     */\n    event ProcessRequest(address candidate);\n\n    /**\n     * @notice Event occurs when processing requesting withdrawals\n     * @param candidate     the candidate\n     * @param n             the number of requests\n     */\n    event ProcessRequests(address candidate, uint256 n);\n\n    constructor() { }\n\n    modifier onlyOwnerOrManager() {\n        require(owner() == msg.sender || msg.sender == manager, \"not onlyOwnerOrManager\");\n        _;\n    }\n\n    modifier onlyCandidateAddOn() {\n        require(msg.sender == ILayer2Manager(layer2Manager).candidateAddOnOfOperator(address(this)), \"not onlyCandidateAddOn\");\n        _;\n    }\n\n    /**\n     * @notice Set the addresses\n     * @param _layer2Manager    the _layer2Manager address\n     * @param _depositManager   the _depositManager address\n     * @param _ton              the TON address\n     * @param _wton             the WTON address\n     */\n    function setAddresses(address _layer2Manager, address _depositManager, address _ton, address _wton)\n        external\n        nonZeroAddress(_layer2Manager) nonZeroAddress(_depositManager)\n        nonZeroAddress(_ton) nonZeroAddress(_wton) onlyOwner\n    {\n        _alreadySet(layer2Manager);\n\n        layer2Manager = _layer2Manager;\n        depositManager = _depositManager;\n        ton = _ton;\n        wton = _wton;\n\n        emit SetAddresses(_layer2Manager, _depositManager, _ton, _wton);\n    }\n\n    /* ========== onlyOwnerOrManager ========== */\n\n    /**\n     * @notice Transfer the manager\n     * @param newManager    the new manager address\n     */\n    function transferManager(address newManager) external nonZeroAddress(newManager) onlyOwnerOrManager {\n        if (manager == newManager) revert SameAddressError();\n\n        emit TransferredManager(manager, newManager);\n        manager = newManager;\n    }\n\n    /**\n     * @notice  Give ETH to a manager through the manager(or owner) claim\n     */\n    function claimETH() external onlyOwnerOrManager {\n        _claim(address(0), manager, address(this).balance);\n    }\n\n    /**\n     * @notice  Give ERC20 to a manager through the manager(or owner) claim\n     * @param token     the token address\n     * @param amount    the amount claimed token\n     */\n    function claimERC20(address token, uint256 amount) external onlyOwnerOrManager {\n        _claim(token, manager, amount);\n    }\n\n    /**\n     * @notice Request withdrawal the staked ton\n     * @param amount    the amount requesting withdrawal\n     */\n    function requestWithdrawal(uint256 amount) external onlyOwnerOrManager {\n        address candidate = ILayer2Manager(layer2Manager).candidateAddOnOfOperator(address(this));\n\n        require(IDepositManager(depositManager).requestWithdrawal(candidate, amount), \"fail requestWithdraw\");\n\n        emit RequestWithdrawal(candidate, amount);\n    }\n\n    function processRequest() external onlyOwnerOrManager {\n        address candidate = ILayer2Manager(layer2Manager).candidateAddOnOfOperator(address(this));\n\n        require(IDepositManager(depositManager).processRequest(candidate, false), \"fail processRequest\");\n\n        emit ProcessRequest(candidate);\n    }\n\n    function processRequests(uint256 n) external onlyOwnerOrManager {\n        address candidate = ILayer2Manager(layer2Manager).candidateAddOnOfOperator(address(this));\n\n        require(IDepositManager(depositManager).processRequests(candidate, n, false), \"fail processRequests\");\n\n        emit ProcessRequests(candidate, n);\n    }\n\n    /* ========== onlyCandidateAddOn ========== */\n\n    /**\n     * @notice Deposit wton amount to DepositManager as named manager(EOA)\n     * @param amount    the deposit wton amount (ray)\n     */\n    function depositByCandidateAddOn(uint256 amount) external onlyCandidateAddOn {\n        _depositTo(msg.sender, manager, amount);\n    }\n\n    function claimByCandidateAddOn(uint256 amount) external onlyCandidateAddOn {\n        claimByCandidateAddOn(amount, true);\n    }\n\n    /**\n     * @notice Claim WTON to a manager\n     * @param amount    the deposit wton amount (ray)\n     * @param falgTon   If it is true, claim with ton, otherwise claim with wton\n     */\n    function claimByCandidateAddOn(uint256 amount, bool falgTon) public onlyCandidateAddOn {\n\n        if (falgTon) {\n            uint256 balanceTON = IERC20(ton).balanceOf(address(this));\n            uint256 tonAmount = amount/1e9;\n            if (balanceTON < tonAmount) {\n                uint256 swapWtonToTonAmount = amount - (balanceTON * 1e9);\n\n                if (IERC20(wton).balanceOf(address(this))  < swapWtonToTonAmount) revert InsufficientBalanceError();\n                else IWTON(wton).swapToTON(swapWtonToTonAmount);\n            }\n            _claim(ton, manager, tonAmount);\n        } else {\n            _claim(wton, manager, amount);\n        }\n    }\n\n    /* ========== public ========== */\n\n    /**\n     * @notice acquire manager privileges.\n     */\n    function acquireManager() external {\n        require (msg.sender != manager, \"already manager\");\n        require (msg.sender == IRollupConfig(rollupConfig).owner(), \"not config's owner\");\n\n        emit TransferredManager(manager, msg.sender);\n        manager = msg.sender;\n    }\n\n    /**\n     * @notice Returns true if the the addr is a manager.\n     * @param addr the address to check\n     */\n    function isOperator(address addr) public view returns (bool) {\n        return (addr != address(0) && addr == manager);\n    }\n\n    /**\n     * @notice Returns the availability status of Layer 2, L1 bridge address, portal address, and L2TON address.\n     * @return result   the availability status of Layer 2\n     * @return l1Bridge the L1 bridge address\n     * @return portal   the L1 portal address\n     * @return l2Ton    the L2 TON address\n     *                  L2TON address is 0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000,\n     *                  In this case, the native token of Layer 2 is TON.\n     * @return _type    the layer 2 type ( 1: legacy optimism, 2: bedrock optimism with TON native token)\n     * @return status           status for giving seigniorage ( 0: none , 1: registered, 2: paused )\n     * @return rejectedSeigs     If it is true, Seigniorage issuance has been stopped for this layer2.\n     * @return rejectedL2Deposit If it is true, stop depositing at this layer.\n     */\n    function checkL1Bridge() public view returns (\n        bool result, address l1Bridge, address portal, address l2Ton, uint8 _type, uint8 status, bool rejectedSeigs, bool rejectedL2Deposit\n    ) {\n        return ILayer2Manager(layer2Manager).checkL1BridgeDetail(rollupConfig);\n    }\n\n    /* ========== internal ========== */\n\n    function _nonZeroAddress(address _addr) internal pure {\n        if (_addr == address(0)) revert ZeroAddressError();\n    }\n\n    function _alreadySet(address _addr) internal pure {\n        if (_addr != address(0)) revert AlreadySetError();\n    }\n\n    function _claim(address token, address to, uint256 amount) internal {\n        address thisAccount = address(this);\n        if(token == address(0)) {\n            if(thisAccount.balance < amount) revert InsufficientBalanceError();\n            (bool success, ) = to.call{value: amount}(\"\");\n            if (!success) revert TransferEthError();\n        } else {\n            if (IERC20(token).balanceOf(thisAccount) < amount) revert InsufficientBalanceError();\n            IERC20(token).safeTransfer(to, amount);\n        }\n        emit Claimed(token, msg.sender, to, amount);\n    }\n\n    function _deposit(address layer2, uint256 amount) internal {\n        address _depositManager = depositManager;\n        address _wton = wton;\n\n        uint256 allowance = IERC20(_wton).allowance(address(this), _depositManager);\n        if(allowance < amount) IERC20(_wton).approve(_depositManager, type(uint256).max);\n\n        IDepositManager(_depositManager).deposit(layer2, amount);\n    }\n\n    function _depositTo(address layer2, address to, uint256 amount) internal {\n        address _depositManager = depositManager;\n        address _wton = wton;\n\n        uint256 allowance = IERC20(_wton).allowance(address(this), _depositManager);\n        if (allowance < amount) IERC20(_wton).approve(_depositManager, type(uint256).max);\n\n        IDepositManager(_depositManager).deposit(layer2, to, amount);\n    }\n}"
    }
  }
}}