{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SignedSafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMath {\n    int256 constant private _INT256_MIN = -2**255;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n        return c;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/adapters/TargetWeightWrapExtension.sol": {
      "content": "/*\n    Copyright 2024 Index Coop\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\n\npragma solidity 0.6.10;\npragma experimental \"ABIEncoderV2\";\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { Math } from \"@openzeppelin/contracts/math/Math.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport { SafeCast } from \"@openzeppelin/contracts/utils/SafeCast.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport { BaseExtension } from \"../lib/BaseExtension.sol\";\nimport { Position } from \"../lib/Position.sol\";\nimport { PreciseUnitMath } from \"../lib/PreciseUnitMath.sol\";\nimport { IBaseManager } from \"../interfaces/IBaseManager.sol\";\nimport { IController } from \"../interfaces/IController.sol\";\nimport { ISetToken } from \"../interfaces/ISetToken.sol\";\nimport { ISetValuer } from \"../interfaces/ISetValuer.sol\";\nimport { IWrapModuleV2 } from \"../interfaces/IWrapModuleV2.sol\";\n\n/**\n * @title TargetWeightWrapExtension\n * @author Index Coop\n * @notice Extension contract for managing asset weights by wrapping a reserve asset into target assets when overweight, \n * and unwrapping target assets back into the reserve asset when underweight. Enforces weight bounds during rebalancing.\n * @dev Designed for ERC20 reserve assets.\n * @dev Designed for wrap and unwrap operations with minimal slippage.\n */\ncontract TargetWeightWrapExtension is BaseExtension, ReentrancyGuard {\n    using SafeCast for int256;\n    using SafeCast for uint256;\n    using SafeMath for uint256;\n    using Math for uint256;\n    using Position for uint256;\n    using PreciseUnitMath for uint256;\n\n    /* ============ Structs ============ */\n\n    struct RebalanceInfo {\n        address reserveAsset;        // Address of the reserve asset\n        uint256 minReserveWeight;    // Minimum weight of the reserve asset (100% = 1e18)\n        uint256 maxReserveWeight;    // Maximum weight of the reserve asset (100% = 1e18)\n        address[] targetAssets;      // Array of target assets to wrap/unwrap\n    }\n\n    struct TargetWeightWrapParams {\n        uint256 minTargetWeight;     // Minimum weight of the target asset (100% = 1e18)\n        uint256 maxTargetWeight;     // Maximum weight of the target asset (100% = 1e18)\n        string wrapAdapterName;      // Name of the wrap adapter to use\n        bytes wrapData;              // Data for wrapping\n        bytes unwrapData;            // Data for unwrapping\n    }\n\n    /* ============ Events ============ */\n\n    event RebalanceAccessUpdated(bool isRebalanceOpen);\n    event TargetsSet(\n        address indexed reserveAsset,\n        uint256 minReserveWeight,\n        uint256 maxReserveWeight,\n        address[] targetAssets,\n        TargetWeightWrapParams[] executionParams\n    );\n    event RebalancePaused();\n    event WrapModuleUpdated(address indexed wrapModule);\n    event SetValuerUpdated(address indexed setValuer);\n\n    /* ========== Immutables ========= */\n\n    ISetToken public immutable setToken;\n\n    /* ========== State Variables ========= */\n\n    IWrapModuleV2 public wrapModule;\n    ISetValuer public setValuer;\n\n    // Flag indicating if target weights are set and wrap() and unwrap() can potentially be called \n    bool public isRebalancingActive;\n    // Flag indicating if wrap() and unwrap() can be called by anyone or only the operator\n    bool public isRebalanceOpen;\n\n    // Mapping of target assets to their target weight wrap() and unwrap() execution parameters\n    mapping(address => TargetWeightWrapParams) public executionParams;\n    // Reserve asset execution parameters and target assets to rebalance\n    RebalanceInfo public rebalanceInfo;\n\n    /* ============ Modifiers ============ */\n\n    modifier onlyAllowedRebalancer() {\n        _validateOnlyAllowedRebalancer();\n        _;\n    }\n\n    /* ============ Constructor ============ */\n\n    /**\n     * @notice Initializes the extension with the required contracts and parameters.\n     * @param _manager Address of Index Manager contract\n     * @param _wrapModule Address of IWrapModuleV2 for wrapping and unwrapping reserve asset\n     * @param _setValuer Address of SetValuer for calculating valuations and weights\n     * @param _isRebalanceOpen Flag indicating if anyone can rebalance\n     */\n    constructor(\n        IBaseManager _manager,\n        IWrapModuleV2 _wrapModule,\n        ISetValuer _setValuer,\n        bool _isRebalanceOpen\n    ) public BaseExtension(_manager) {\n        manager = _manager;\n        wrapModule = _wrapModule;\n        setValuer = _setValuer;\n        isRebalanceOpen = _isRebalanceOpen;\n\n        ISetToken setToken_ = manager.setToken();\n        setToken = setToken_;\n        _setWrapModule(setToken_, _wrapModule);\n        _setSetValuer(setToken_, _setValuer);\n    }\n\n    /* ========== Rebalance Functions ========== */\n\n    /**\n     * @notice Wraps reserve asset units into the target asset. \n     * @dev Must be called when the reserve asset is overweight, rebalancing is enabled, and the caller is an allowed rebalancer. \n     * Ensures that after wrapping, the target asset does not become overweight and the reserve asset does not become underweight.\n     * @param _targetAsset Address of the target asset to wrap into.\n     * @param _reserveUnits Units of the reserve asset to wrap.\n     */\n    function wrap(\n        address _targetAsset,\n        uint256 _reserveUnits\n    )\n        external\n        nonReentrant\n        onlyAllowedRebalancer\n    {\n        require(isRebalancingActive, \"Rebalancing is not active\");\n        require(rebalanceInfo.targetAssets.contains(_targetAsset), \"Invalid target asset\");\n\n        bytes memory data = abi.encodeWithSelector(\n            wrapModule.wrap.selector,\n            setToken,\n            rebalanceInfo.reserveAsset,\n            _targetAsset,\n            _reserveUnits,\n            executionParams[_targetAsset].wrapAdapterName,\n            executionParams[_targetAsset].wrapData\n        );\n        invokeManager(address(wrapModule), data);\n\n        (uint256 targetAssetWeight, uint256 reserveWeight) = getTargetAssetAndReserveWeight(_targetAsset);\n        require(targetAssetWeight <= executionParams[_targetAsset].maxTargetWeight, \"Target asset overweight post-wrap\");\n        require(reserveWeight >= rebalanceInfo.minReserveWeight, \"Reserve asset underweight post-wrap\");\n    }\n\n    /**\n     * @notice Unwraps target asset units into the reserve asset.\n     * @dev Must be called when the reserve asset is underweight, rebalancing is enabled, and the caller is an allowed rebalancer.\n     * Ensures that after unwrapping, the target asset does not become underweight and the reserve asset does not become overweight.\n     * @param _targetAsset Address of target asset to unwrap from\n     * @param _targetUnits Units of target asset to unwrap\n     */\n    function unwrap(\n        address _targetAsset,\n        uint256 _targetUnits\n    )\n        external\n        nonReentrant\n        onlyAllowedRebalancer\n    {\n        require(isRebalancingActive, \"Rebalancing is not active\");\n        require(rebalanceInfo.targetAssets.contains(_targetAsset), \"Invalid target asset\");\n        require(isReserveUnderweight(), \"Reserve asset is not underweight\");\n\n        bytes memory data = abi.encodeWithSelector(\n            wrapModule.unwrap.selector,\n            setToken,\n            rebalanceInfo.reserveAsset,\n            _targetAsset,\n            _targetUnits,\n            executionParams[_targetAsset].wrapAdapterName,\n            executionParams[_targetAsset].unwrapData\n        );\n        invokeManager(address(wrapModule), data);\n\n        (uint256 targetAssetWeight, uint256 reserveWeight) = getTargetAssetAndReserveWeight(_targetAsset);\n        require(targetAssetWeight >= executionParams[_targetAsset].minTargetWeight, \"Target asset underweight post-unwrap\");\n        require(reserveWeight <= rebalanceInfo.maxReserveWeight, \"Reserve asset overweight post-unwrap\");\n    }\n\n    /* ========== Operator Functions ========== */\n\n    /**\n     * @notice Sets the reserve asset, target assets, and their associated execution parameters.\n     * @dev Only callable by the operator.\n     * @dev The weights are percentages where 100% equals 1e18.\n     * @param _reserveAsset Address of the reserve asset.\n     * @param _minReserveWeight Minimum allowable weight of the reserve asset.\n     * @param _maxReserveWeight Maximum allowable weight of the reserve asset.\n     * @param _targetAssets Array of target asset addresses.\n     * @param _executionParams Array of execution parameters corresponding to each target asset.\n     */\n    function setTargetWeights(\n        address _reserveAsset,\n        uint256 _minReserveWeight,\n        uint256 _maxReserveWeight,\n        address[] memory _targetAssets,\n        TargetWeightWrapParams[] memory _executionParams\n    )\n        external\n        onlyOperator\n    {\n        require(_targetAssets.length == _executionParams.length, \"Mismatched array lengths\");\n        require(_minReserveWeight <= _maxReserveWeight, \"Invalid min reserve weight\");\n        require(_maxReserveWeight <= PreciseUnitMath.preciseUnit(), \"Invalid max reserve weight\");\n\n        rebalanceInfo = RebalanceInfo({\n            reserveAsset: _reserveAsset,\n            minReserveWeight: _minReserveWeight,\n            maxReserveWeight: _maxReserveWeight,\n            targetAssets: _targetAssets\n        });\n\n        for (uint256 i = 0; i < _targetAssets.length; i++) {\n            require(_executionParams[i].minTargetWeight <= _executionParams[i].maxTargetWeight, \"Invalid min target weight\");\n            require(_executionParams[i].maxTargetWeight <= PreciseUnitMath.preciseUnit(), \"Invalid max target weight\");\n            executionParams[_targetAssets[i]] = _executionParams[i];\n        }\n\n        isRebalancingActive = true;\n\n        emit TargetsSet(_reserveAsset, _minReserveWeight, _maxReserveWeight, _targetAssets, _executionParams);\n    }\n\n    /**\n     * @notice Pauses rebalancing until targets are reconfigured.\n     * @dev Only callable by the operator.\n     */\n    function pauseRebalance() external onlyOperator {\n        isRebalancingActive = false;\n        emit RebalancePaused();\n    }\n\n    /**\n     * @notice Sets the flag to open or restrict rebalancing access through this extension.\n     * @dev This function can only be called by the operator.\n     * @param _isRebalanceOpen Flag to indicate if rebalancing is open to anyone.\n     */\n    function setIsRebalanceOpen(bool _isRebalanceOpen) external onlyOperator {\n        isRebalanceOpen = _isRebalanceOpen;\n        emit RebalanceAccessUpdated(_isRebalanceOpen);\n    }\n\n    /**\n     * @notice Sets the WrapModule contract used for wrapping and unwrapping assets.\n     * @dev This function can only be called by the operator.\n     * @param _wrapModule Address of the WrapModuleV2 contract.\n     */\n    function setWrapModule(IWrapModuleV2 _wrapModule) external onlyOperator {\n        _setWrapModule(setToken, _wrapModule);\n    }\n\n    /**\n     * @notice Sets the SetValuer contract used for calculating valuations and weights.\n     * @dev This function can only be called by the operator.\n     * @param _setValuer Address of the SetValuer contract.\n     */\n    function setSetValuer(ISetValuer _setValuer) external onlyOperator {\n        _setSetValuer(setToken, _setValuer);\n    }\n\n    /**\n     * @notice Initializes the Set Token within the Wrap Module.\n     * @dev This function can only be called by the operator.\n     */\n    function initialize() external onlyOperator {\n        bytes memory data = abi.encodeWithSelector(wrapModule.initialize.selector, setToken);\n        invokeManager(address(wrapModule), data);\n    }\n\n    /* ========== External Getters ========== */\n\n    /**\n     * @notice Gets the valuation of the reserve asset.\n     * @return reserveValuation The valuation of the reserve asset.\n     */\n    function getReserveValuation() public view returns(uint256 reserveValuation) {\n        reserveValuation = setToken.isComponent(rebalanceInfo.reserveAsset)\n            ? setValuer.calculateComponentValuation(setToken, rebalanceInfo.reserveAsset, rebalanceInfo.reserveAsset)\n            : 0;\n    }\n\n    /**\n     * @notice Gets the valuation of a specific target asset.\n     * @param _targetAsset The address of the target asset.\n     * @return targetAssetValuation The valuation of the specified target asset.\n     */\n    function getTargetAssetValuation(address _targetAsset) public view returns(uint256 targetAssetValuation) {\n        targetAssetValuation = setToken.isComponent(_targetAsset)\n            ? setValuer.calculateComponentValuation(setToken, _targetAsset, rebalanceInfo.reserveAsset)\n            : 0;\n    }\n\n    /**\n     * @notice Gets the total valuation of the SetToken.\n     * @return totalValuation The total valuation of the SetToken.\n     */\n    function getTotalValuation() public view returns(uint256 totalValuation) {\n        totalValuation = setValuer.calculateSetTokenValuation(setToken, rebalanceInfo.reserveAsset);\n    }\n\n    /**\n     * @notice Gets the weight of the reserve asset relative to the total valuation of the SetToken.\n     * @dev The weight is returned as a percentage where 100% equals 1e18.\n     * @return reserveWeight The weight of the reserve asset relative to the SetToken's total valuation.\n     */\n    function getReserveWeight() public view returns(uint256 reserveWeight) {\n        uint256 reserveValuation = getReserveValuation();\n        uint256 totalValuation = getTotalValuation();\n        reserveWeight = reserveValuation.preciseDiv(totalValuation);\n    }\n\n    /**\n     * @notice Gets the weight of a specific target asset relative to the total valuation of the SetToken.\n     * @dev The weight is returned as a percentage where 100% equals 1e18.\n     * @param _targetAsset The address of the target asset.\n     * @return targetAssetWeight The weight of the specified target asset relative to the SetToken's total valuation.\n     */\n    function getTargetAssetWeight(address _targetAsset) public view returns(uint256 targetAssetWeight) {\n        uint256 targetAssetValuation = getTargetAssetValuation(_targetAsset);\n        uint256 totalValuation = getTotalValuation();\n        targetAssetWeight = targetAssetValuation.preciseDiv(totalValuation);\n    }\n\n    /**\n     * @notice Gets the weights of both the target asset and the reserve asset relative to the total valuation of the SetToken.\n     * @dev The weights are returned as percentages where 100% equals 1e18.\n     * @param _targetAsset The address of the target asset.\n     * @return targetAssetWeight The weight of the target asset relative to the SetToken's total valuation.\n     * @return reserveWeight The weight of the reserve asset relative to the SetToken's total valuation.\n     */\n    function getTargetAssetAndReserveWeight(address _targetAsset) public view returns(uint256 targetAssetWeight, uint256 reserveWeight) {\n        uint256 targetAssetValuation = getTargetAssetValuation(_targetAsset);\n        uint256 reserveValuation = getReserveValuation();\n        uint256 totalValuation = getTotalValuation();\n        targetAssetWeight = targetAssetValuation.preciseDiv(totalValuation);\n        reserveWeight = reserveValuation.preciseDiv(totalValuation);\n    }\n\n    /**\n     * @notice Checks if the reserve asset is overweight.\n     */\n    function isReserveOverweight() public view returns(bool) {\n        return getReserveWeight() > rebalanceInfo.maxReserveWeight;\n    }\n\n    /**\n     * @notice Checks if the reserve asset is underweight.\n     */\n    function isReserveUnderweight() public view returns(bool) {\n        return getReserveWeight() < rebalanceInfo.minReserveWeight;\n    }\n\n    /**\n     * @notice Checks if the target asset is overweight.\n     * @param _targetAsset The address of the target asset.\n     */\n    function isTargetOverweight(address _targetAsset) public view returns(bool) {\n        return getTargetAssetWeight(_targetAsset) > executionParams[_targetAsset].maxTargetWeight;\n    }\n\n    /**\n     * @notice Checks if the target asset is underweight.\n     * @param _targetAsset The address of the target asset.\n     */\n    function isTargetUnderweight(address _targetAsset) public view returns(bool) {\n        return getTargetAssetWeight(_targetAsset) < executionParams[_targetAsset].minTargetWeight;\n    }\n\n    /**\n     * @notice Gets the list of target assets that can be wrapped into or unwrapped from during rebalancing.\n     * @return An array of addresses representing the target assets.\n     */\n    function getTargetAssets() external view returns(address[] memory) {\n        return rebalanceInfo.targetAssets;\n    }\n\n    /* ========== Internal Functions ========== */\n\n    /**\n     * Sets the WrapModuleV2 contract used for wrapping and unwrapping assets.\n     * @param _setToken Address of the SetToken contract.\n     * @param _wrapModule Address of the WrapModuleV2 contract.\n     */\n    function _setWrapModule(ISetToken _setToken, IWrapModuleV2 _wrapModule) internal {\n        require(_setToken.moduleStates(address(_wrapModule)) == ISetToken.ModuleState.PENDING, \"WrapModuleV2 not pending\");\n        wrapModule = _wrapModule;\n        emit WrapModuleUpdated(address(_wrapModule));\n    }\n\n    /**\n     * Sets the SetValuer contract used for calculating valuations and weights.\n     * @param _setToken Address of the SetToken contract.\n     * @param _setValuer Address of the SetValuer contract.\n     */\n    function _setSetValuer(ISetToken _setToken, ISetValuer _setValuer) internal {\n        require(IController(_setToken.controller()).isResource(address(_setValuer)), \"SetValuer not approved by controller\");\n        setValuer = _setValuer;\n        emit SetValuerUpdated(address(_setValuer));\n    }\n\n    /* ============== Modifier Helpers ===============\n     * Internal functions used to reduce bytecode size\n     */\n\n    /*\n     * Caller must be oeprator if isRebalanceOpen is false\n     */\n    function _validateOnlyAllowedRebalancer() internal {\n        if (!isRebalanceOpen) {\n            require(msg.sender == manager.operator(), \"Must be allowed rebalancer\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IBaseManager.sol": {
      "content": "/*\n    Copyright 2021 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\n\npragma solidity 0.6.10;\npragma experimental \"ABIEncoderV2\";\n\nimport { ISetToken } from \"./ISetToken.sol\";\n\ninterface IBaseManager {\n    function setToken() external returns(ISetToken);\n\n    function methodologist() external returns(address);\n\n    function operator() external returns(address);\n\n    function interactManager(address _module, bytes calldata _encoded) external;\n\n    function transferTokens(address _token, address _destination, uint256 _amount) external;\n}"
    },
    "contracts/interfaces/IController.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\npragma solidity 0.6.10;\n\ninterface IController {\n    function addSet(address _setToken) external;\n    function feeRecipient() external view returns(address);\n    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\n    function isModule(address _module) external view returns(bool);\n    function isSet(address _setToken) external view returns(bool);\n    function isSystemContract(address _contractAddress) external view returns (bool);\n    function isResource(address _resource) external view returns(bool);\n    function resourceId(uint256 _id) external view returns(address);\n    function owner() external view returns(address);\n    function addFactory(address _factory) external;\n    function addModule(address _module) external;\n}\n"
    },
    "contracts/interfaces/ISetToken.sol": {
      "content": "// SPDX-License-Identifier: Apache License, Version 2.0\npragma solidity 0.6.10;\npragma experimental \"ABIEncoderV2\";\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title ISetToken\n * @author Set Protocol\n *\n * Interface for operating with SetTokens.\n */\ninterface ISetToken is IERC20 {\n\n    /* ============ Enums ============ */\n\n    enum ModuleState {\n        NONE,\n        PENDING,\n        INITIALIZED\n    }\n\n    /* ============ Structs ============ */\n    /**\n     * The base definition of a SetToken Position\n     *\n     * @param component           Address of token in the Position\n     * @param module              If not in default state, the address of associated module\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\n     * @param positionState       Position ENUM. Default is 0; External is 1\n     * @param data                Arbitrary data\n     */\n    struct Position {\n        address component;\n        address module;\n        int256 unit;\n        uint8 positionState;\n        bytes data;\n    }\n\n    /**\n     * A struct that stores a component's cash position details and external positions\n     * This data structure allows O(1) access to a component's cash position units and\n     * virtual units.\n     *\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\n     *                                  by dividing a \"real\" value by the \"positionMultiplier\"\n     * @param componentIndex\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\n     *                                  maps to an external position\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\n     */\n    struct ComponentPosition {\n      int256 virtualUnit;\n      address[] externalPositionModules;\n      mapping(address => ExternalPosition) externalPositions;\n    }\n\n    /**\n     * A struct that stores a component's external position details including virtual unit and any\n     * auxiliary data.\n     *\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\n     * @param data              Arbitrary data\n     */\n    struct ExternalPosition {\n      int256 virtualUnit;\n      bytes data;\n    }\n\n\n    /* ============ Functions ============ */\n\n    function controller() external view returns (address);\n\n    function addComponent(address _component) external;\n    function removeComponent(address _component) external;\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\n    function addExternalPositionModule(address _component, address _positionModule) external;\n    function removeExternalPositionModule(address _component, address _positionModule) external;\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\n\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\n\n    function editPositionMultiplier(int256 _newMultiplier) external;\n\n    function mint(address _account, uint256 _quantity) external;\n    function burn(address _account, uint256 _quantity) external;\n\n    function lock() external;\n    function unlock() external;\n\n    function addModule(address _module) external;\n    function removeModule(address _module) external;\n    function initializeModule() external;\n\n    function setManager(address _manager) external;\n\n    function manager() external view returns (address);\n    function moduleStates(address _module) external view returns (ModuleState);\n    function getModules() external view returns (address[] memory);\n\n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\n    function getComponents() external view returns(address[] memory);\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\n    function isComponent(address _component) external view returns(bool);\n\n    function positionMultiplier() external view returns (int256);\n    function getPositions() external view returns (Position[] memory);\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\n\n    function isInitializedModule(address _module) external view returns(bool);\n    function isPendingModule(address _module) external view returns(bool);\n    function isLocked() external view returns (bool);\n}\n"
    },
    "contracts/interfaces/ISetValuer.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\npragma solidity 0.6.10;\n\nimport { ISetToken } from \"../interfaces/ISetToken.sol\";\n\ninterface ISetValuer {\n    function calculateSetTokenValuation(ISetToken _setToken, address _quoteAsset) external view returns (uint256);\n    function calculateComponentValuation(ISetToken _setToken, address _component, address _quoteAsset) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: Apache License, Version 2.0\npragma solidity >=0.6.10;\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n"
    },
    "contracts/interfaces/IWrapModuleV2.sol": {
      "content": "/*\n    Copyright 2022 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\n\npragma solidity 0.6.10;\npragma experimental \"ABIEncoderV2\";\n\nimport { ISetToken } from \"./ISetToken.sol\";\nimport { IWETH } from \"./IWETH.sol\";\n\ninterface IWrapModuleV2 {\n    function weth() external view returns(IWETH);\n\n    function initialize(ISetToken _setToken) external;\n\n    function wrap(\n        ISetToken _setToken,\n        address _underlyingToken,\n        address _wrappedToken,\n        uint256 _underlyingUnits,\n        string calldata _integrationName,\n        bytes memory _wrapData\n    ) external;\n\n    function wrapWithEther(\n        ISetToken _setToken,\n        address _wrappedToken,\n        uint256 _underlyingUnits,\n        string calldata _integrationName,\n        bytes memory _wrapData\n    ) external;\n\n    function unwrap(\n        ISetToken _setToken,\n        address _underlyingToken,\n        address _wrappedToken,\n        uint256 _wrappedUnits,\n        string calldata _integrationName,\n        bytes memory _unwrapData\n    ) external;\n\n    function unwrapWithEther(\n        ISetToken _setToken,\n        address _wrappedToken,\n        uint256 _wrappedUnits,\n        string calldata _integrationName,\n        bytes memory _unwrapData\n    ) external;\n}\n"
    },
    "contracts/lib/AddressArrayUtils.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\n\npragma solidity 0.6.10;\n\n/**\n * @title AddressArrayUtils\n * @author Set Protocol\n *\n * Utility functions to handle Address Arrays\n *\n * CHANGELOG:\n * - 4/27/21: Added validatePairsWithArray methods\n */\nlibrary AddressArrayUtils {\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (uint256(-1), false);\n    }\n\n    /**\n    * Returns true if the value is present in the list. Uses indexOf internally.\n    * @param A The input array to search\n    * @param a The value to find\n    * @return Returns isIn for the first occurrence starting from index 0\n    */\n    function contains(address[] memory A, address a) internal pure returns (bool) {\n        (, bool isIn) = indexOf(A, a);\n        return isIn;\n    }\n\n    /**\n    * Returns true if there are 2 elements that are the same in an array\n    * @param A The input array to search\n    * @return Returns boolean for the first occurrence of a duplicate\n    */\n    function hasDuplicate(address[] memory A) internal pure returns(bool) {\n        require(A.length > 0, \"A is empty\");\n\n        for (uint256 i = 0; i < A.length - 1; i++) {\n            address current = A[i];\n            for (uint256 j = i + 1; j < A.length; j++) {\n                if (current == A[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The address to remove\n     * @return Returns the array with the object removed.\n     */\n    function remove(address[] memory A, address a)\n        internal\n        pure\n        returns (address[] memory)\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"Address not in array.\");\n        } else {\n            (address[] memory _A,) = pop(A, index);\n            return _A;\n        }\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The address to remove\n     */\n    function removeStorage(address[] storage A, address a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"Address not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n\n    /**\n    * Removes specified index from array\n    * @param A The input array to search\n    * @param index The index to remove\n    * @return Returns the new array and the removed entry\n    */\n    function pop(address[] memory A, uint256 index)\n        internal\n        pure\n        returns (address[] memory, address)\n    {\n        uint256 length = A.length;\n        require(index < A.length, \"Index must be < A length\");\n        address[] memory newAddresses = new address[](length - 1);\n        for (uint256 i = 0; i < index; i++) {\n            newAddresses[i] = A[i];\n        }\n        for (uint256 j = index + 1; j < length; j++) {\n            newAddresses[j - 1] = A[j];\n        }\n        return (newAddresses, A[index]);\n    }\n\n    /**\n     * Returns the combination of the two arrays\n     * @param A The first array\n     * @param B The second array\n     * @return Returns A extended by B\n     */\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\n        uint256 aLength = A.length;\n        uint256 bLength = B.length;\n        address[] memory newAddresses = new address[](aLength + bLength);\n        for (uint256 i = 0; i < aLength; i++) {\n            newAddresses[i] = A[i];\n        }\n        for (uint256 j = 0; j < bLength; j++) {\n            newAddresses[aLength + j] = B[j];\n        }\n        return newAddresses;\n    }\n\n    /**\n     * Validate that address and uint array lengths match. Validate address array is not empty\n     * and contains no duplicate elements.\n     *\n     * @param A         Array of addresses\n     * @param B         Array of uint\n     */\n    function validatePairsWithArray(address[] memory A, uint[] memory B) internal pure {\n        require(A.length == B.length, \"Array length mismatch\");\n        _validateLengthAndUniqueness(A);\n    }\n\n    /**\n     * Validate that address and bool array lengths match. Validate address array is not empty\n     * and contains no duplicate elements.\n     *\n     * @param A         Array of addresses\n     * @param B         Array of bool\n     */\n    function validatePairsWithArray(address[] memory A, bool[] memory B) internal pure {\n        require(A.length == B.length, \"Array length mismatch\");\n        _validateLengthAndUniqueness(A);\n    }\n\n    /**\n     * Validate that address and string array lengths match. Validate address array is not empty\n     * and contains no duplicate elements.\n     *\n     * @param A         Array of addresses\n     * @param B         Array of strings\n     */\n    function validatePairsWithArray(address[] memory A, string[] memory B) internal pure {\n        require(A.length == B.length, \"Array length mismatch\");\n        _validateLengthAndUniqueness(A);\n    }\n\n    /**\n     * Validate that address array lengths match, and calling address array are not empty\n     * and contain no duplicate elements.\n     *\n     * @param A         Array of addresses\n     * @param B         Array of addresses\n     */\n    function validatePairsWithArray(address[] memory A, address[] memory B) internal pure {\n        require(A.length == B.length, \"Array length mismatch\");\n        _validateLengthAndUniqueness(A);\n    }\n\n    /**\n     * Validate that address and bytes array lengths match. Validate address array is not empty\n     * and contains no duplicate elements.\n     *\n     * @param A         Array of addresses\n     * @param B         Array of bytes\n     */\n    function validatePairsWithArray(address[] memory A, bytes[] memory B) internal pure {\n        require(A.length == B.length, \"Array length mismatch\");\n        _validateLengthAndUniqueness(A);\n    }\n\n    /**\n     * Validate address array is not empty and contains no duplicate elements.\n     *\n     * @param A          Array of addresses\n     */\n    function _validateLengthAndUniqueness(address[] memory A) internal pure {\n        require(A.length > 0, \"Array length must be > 0\");\n        require(!hasDuplicate(A), \"Cannot duplicate addresses\");\n    }\n}\n"
    },
    "contracts/lib/BaseExtension.sol": {
      "content": "/*\n    Copyright 2021 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\n\npragma solidity 0.6.10;\n\nimport { AddressArrayUtils } from \"../lib/AddressArrayUtils.sol\";\nimport { IBaseManager } from \"../interfaces/IBaseManager.sol\";\n\n/**\n * @title BaseExtension\n * @author Set Protocol\n *\n * Abstract class that houses common extension-related state and functions.\n */\nabstract contract BaseExtension {\n    using AddressArrayUtils for address[];\n\n    /* ============ Events ============ */\n\n    event CallerStatusUpdated(address indexed _caller, bool _status);\n    event AnyoneCallableUpdated(bool indexed _status);\n\n    /* ============ Modifiers ============ */\n\n    /**\n     * Throws if the sender is not the SetToken operator\n     */\n    modifier onlyOperator() {\n        require(msg.sender == manager.operator(), \"Must be operator\");\n        _;\n    }\n\n    /**\n     * Throws if the sender is not the SetToken methodologist\n     */\n    modifier onlyMethodologist() {\n        require(msg.sender == manager.methodologist(), \"Must be methodologist\");\n        _;\n    }\n\n    /**\n     * Throws if caller is a contract, can be used to stop flash loan and sandwich attacks\n     */\n    modifier onlyEOA() {\n        require(msg.sender == tx.origin, \"Caller must be EOA Address\");\n        _;\n    }\n\n    /**\n     * Throws if not allowed caller\n     */\n    modifier onlyAllowedCaller(address _caller) {\n        require(isAllowedCaller(_caller), \"Address not permitted to call\");\n        _;\n    }\n\n    /* ============ State Variables ============ */\n\n    // Instance of manager contract\n    IBaseManager public manager;\n\n    // Boolean indicating if anyone can call function\n    bool public anyoneCallable;\n\n    // Mapping of addresses allowed to call function\n    mapping(address => bool) public callAllowList;\n\n    /* ============ Constructor ============ */\n\n    constructor(IBaseManager _manager) public { manager = _manager; }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * OPERATOR ONLY: Toggle ability for passed addresses to call only allowed caller functions\n     *\n     * @param _callers           Array of caller addresses to toggle status\n     * @param _statuses          Array of statuses for each caller\n     */\n    function updateCallerStatus(address[] calldata _callers, bool[] calldata _statuses) external onlyOperator {\n        require(_callers.length == _statuses.length, \"Array length mismatch\");\n        require(_callers.length > 0, \"Array length must be > 0\");\n        require(!_callers.hasDuplicate(), \"Cannot duplicate callers\");\n\n        for (uint256 i = 0; i < _callers.length; i++) {\n            address caller = _callers[i];\n            bool status = _statuses[i];\n            callAllowList[caller] = status;\n            emit CallerStatusUpdated(caller, status);\n        }\n    }\n\n    /**\n     * OPERATOR ONLY: Toggle whether anyone can call function, bypassing the callAllowlist\n     *\n     * @param _status           Boolean indicating whether to allow anyone call\n     */\n    function updateAnyoneCallable(bool _status) external onlyOperator {\n        anyoneCallable = _status;\n        emit AnyoneCallableUpdated(_status);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * Invoke manager to transfer tokens from manager to other contract.\n     *\n     * @param _token           Token being transferred from manager contract\n     * @param _amount          Amount of token being transferred\n     */\n    function invokeManagerTransfer(address _token, address _destination, uint256 _amount) internal {\n        manager.transferTokens(_token, _destination, _amount);\n    }\n\n    /**\n     * Invoke call from manager\n     *\n     * @param _module           Module to interact with\n     * @param _encoded          Encoded byte data\n     */\n    function invokeManager(address _module, bytes memory _encoded) internal {\n        manager.interactManager(_module, _encoded);\n    }\n\n    /**\n     * Determine if passed address is allowed to call function. If anyoneCallable set to true anyone can call otherwise needs to be approved.\n     *\n     * return bool              Boolean indicating if allowed caller\n     */\n    function isAllowedCaller(address _caller) internal view virtual returns (bool) {\n        return anyoneCallable || callAllowList[_caller];\n    }\n}"
    },
    "contracts/lib/Position.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\n\npragma solidity 0.6.10;\npragma experimental \"ABIEncoderV2\";\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeCast } from \"@openzeppelin/contracts/utils/SafeCast.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport { SignedSafeMath } from \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\nimport { ISetToken } from \"../interfaces/ISetToken.sol\";\nimport { PreciseUnitMath } from \"./PreciseUnitMath.sol\";\n\n\n/**\n * @title Position\n * @author Set Protocol\n *\n * Collection of helper functions for handling and updating SetToken Positions\n *\n * CHANGELOG:\n *  - Updated editExternalPosition to work when no external position is associated with module\n */\nlibrary Position {\n    using SafeCast for uint256;\n    using SafeMath for uint256;\n    using SafeCast for int256;\n    using SignedSafeMath for int256;\n    using PreciseUnitMath for uint256;\n\n    /* ============ Helper ============ */\n\n    /**\n     * Returns whether the SetToken has a default position for a given component (if the real unit is > 0)\n     */\n    function hasDefaultPosition(ISetToken _setToken, address _component) internal view returns(bool) {\n        return _setToken.getDefaultPositionRealUnit(_component) > 0;\n    }\n\n    /**\n     * Returns whether the SetToken has an external position for a given component (if # of position modules is > 0)\n     */\n    function hasExternalPosition(ISetToken _setToken, address _component) internal view returns(bool) {\n        return _setToken.getExternalPositionModules(_component).length > 0;\n    }\n    \n    /**\n     * Returns whether the SetToken component default position real unit is greater than or equal to units passed in.\n     */\n    function hasSufficientDefaultUnits(ISetToken _setToken, address _component, uint256 _unit) internal view returns(bool) {\n        return _setToken.getDefaultPositionRealUnit(_component) >= _unit.toInt256();\n    }\n\n    /**\n     * Returns whether the SetToken component external position is greater than or equal to the real units passed in.\n     */\n    function hasSufficientExternalUnits(\n        ISetToken _setToken,\n        address _component,\n        address _positionModule,\n        uint256 _unit\n    )\n        internal\n        view\n        returns(bool)\n    {\n       return _setToken.getExternalPositionRealUnit(_component, _positionModule) >= _unit.toInt256();    \n    }\n\n    /**\n     * If the position does not exist, create a new Position and add to the SetToken. If it already exists,\n     * then set the position units. If the new units is 0, remove the position. Handles adding/removing of \n     * components where needed (in light of potential external positions).\n     *\n     * @param _setToken           Address of SetToken being modified\n     * @param _component          Address of the component\n     * @param _newUnit            Quantity of Position units - must be >= 0\n     */\n    function editDefaultPosition(ISetToken _setToken, address _component, uint256 _newUnit) internal {\n        bool isPositionFound = hasDefaultPosition(_setToken, _component);\n        if (!isPositionFound && _newUnit > 0) {\n            // If there is no Default Position and no External Modules, then component does not exist\n            if (!hasExternalPosition(_setToken, _component)) {\n                _setToken.addComponent(_component);\n            }\n        } else if (isPositionFound && _newUnit == 0) {\n            // If there is a Default Position and no external positions, remove the component\n            if (!hasExternalPosition(_setToken, _component)) {\n                _setToken.removeComponent(_component);\n            }\n        }\n\n        _setToken.editDefaultPositionUnit(_component, _newUnit.toInt256());\n    }\n\n    /**\n     * Update an external position and remove and external positions or components if necessary. The logic flows as follows:\n     * 1) If component is not already added then add component and external position. \n     * 2) If component is added but no existing external position using the passed module exists then add the external position.\n     * 3) If the existing position is being added to then just update the unit and data\n     * 4) If the position is being closed and no other external positions or default positions are associated with the component\n     *    then untrack the component and remove external position.\n     * 5) If the position is being closed and other existing positions still exist for the component then just remove the\n     *    external position.\n     *\n     * @param _setToken         SetToken being updated\n     * @param _component        Component position being updated\n     * @param _module           Module external position is associated with\n     * @param _newUnit          Position units of new external position\n     * @param _data             Arbitrary data associated with the position\n     */\n    function editExternalPosition(\n        ISetToken _setToken,\n        address _component,\n        address _module,\n        int256 _newUnit,\n        bytes memory _data\n    )\n        internal\n    {\n        if (_newUnit != 0) {\n            if (!_setToken.isComponent(_component)) {\n                _setToken.addComponent(_component);\n                _setToken.addExternalPositionModule(_component, _module);\n            } else if (!_setToken.isExternalPositionModule(_component, _module)) {\n                _setToken.addExternalPositionModule(_component, _module);\n            }\n            _setToken.editExternalPositionUnit(_component, _module, _newUnit);\n            _setToken.editExternalPositionData(_component, _module, _data);\n        } else {\n            require(_data.length == 0, \"Passed data must be null\");\n            // If no default or external position remaining then remove component from components array\n            if (_setToken.getExternalPositionRealUnit(_component, _module) != 0) {\n                address[] memory positionModules = _setToken.getExternalPositionModules(_component);\n                if (_setToken.getDefaultPositionRealUnit(_component) == 0 && positionModules.length == 1) {\n                    require(positionModules[0] == _module, \"External positions must be 0 to remove component\");\n                    _setToken.removeComponent(_component);\n                }\n                _setToken.removeExternalPositionModule(_component, _module);\n            }\n        }\n    }\n\n    /**\n     * Get total notional amount of Default position\n     *\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\n     * @param _positionUnit       Quantity of Position units\n     *\n     * @return                    Total notional amount of units\n     */\n    function getDefaultTotalNotional(uint256 _setTokenSupply, uint256 _positionUnit) internal pure returns (uint256) {\n        return _setTokenSupply.preciseMul(_positionUnit);\n    }\n\n    /**\n     * Get position unit from total notional amount\n     *\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\n     * @param _totalNotional      Total notional amount of component prior to\n     * @return                    Default position unit\n     */\n    function getDefaultPositionUnit(uint256 _setTokenSupply, uint256 _totalNotional) internal pure returns (uint256) {\n        return _totalNotional.preciseDiv(_setTokenSupply);\n    }\n\n    /**\n     * Get the total tracked balance - total supply * position unit\n     *\n     * @param _setToken           Address of the SetToken\n     * @param _component          Address of the component\n     * @return                    Notional tracked balance\n     */\n    function getDefaultTrackedBalance(ISetToken _setToken, address _component) internal view returns(uint256) {\n        int256 positionUnit = _setToken.getDefaultPositionRealUnit(_component); \n        return _setToken.totalSupply().preciseMul(positionUnit.toUint256());\n    }\n\n    /**\n     * Calculates the new default position unit and performs the edit with the new unit\n     *\n     * @param _setToken                 Address of the SetToken\n     * @param _component                Address of the component\n     * @param _setTotalSupply           Current SetToken supply\n     * @param _componentPreviousBalance Pre-action component balance\n     * @return                          Current component balance\n     * @return                          Previous position unit\n     * @return                          New position unit\n     */\n    function calculateAndEditDefaultPosition(\n        ISetToken _setToken,\n        address _component,\n        uint256 _setTotalSupply,\n        uint256 _componentPreviousBalance\n    )\n        internal\n        returns(uint256, uint256, uint256)\n    {\n        uint256 currentBalance = IERC20(_component).balanceOf(address(_setToken));\n        uint256 positionUnit = _setToken.getDefaultPositionRealUnit(_component).toUint256();\n\n        uint256 newTokenUnit;\n        if (currentBalance > 0) {\n            newTokenUnit = calculateDefaultEditPositionUnit(\n                _setTotalSupply,\n                _componentPreviousBalance,\n                currentBalance,\n                positionUnit\n            );\n        } else {\n            newTokenUnit = 0;\n        }\n\n        editDefaultPosition(_setToken, _component, newTokenUnit);\n\n        return (currentBalance, positionUnit, newTokenUnit);\n    }\n\n    /**\n     * Calculate the new position unit given total notional values pre and post executing an action that changes SetToken state\n     * The intention is to make updates to the units without accidentally picking up airdropped assets as well.\n     *\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\n     * @param _preTotalNotional   Total notional amount of component prior to executing action\n     * @param _postTotalNotional  Total notional amount of component after the executing action\n     * @param _prePositionUnit    Position unit of SetToken prior to executing action\n     * @return                    New position unit\n     */\n    function calculateDefaultEditPositionUnit(\n        uint256 _setTokenSupply,\n        uint256 _preTotalNotional,\n        uint256 _postTotalNotional,\n        uint256 _prePositionUnit\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        // If pre action total notional amount is greater then subtract post action total notional and calculate new position units\n        uint256 airdroppedAmount = _preTotalNotional.sub(_prePositionUnit.preciseMul(_setTokenSupply));\n        return _postTotalNotional.sub(airdroppedAmount).preciseDiv(_setTokenSupply);\n    }\n}\n"
    },
    "contracts/lib/PreciseUnitMath.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache License, Version 2.0\n*/\n\npragma solidity 0.6.10;\npragma experimental ABIEncoderV2;\n\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport { SignedSafeMath } from \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\n/**\n * @title PreciseUnitMath\n * @author Set Protocol\n *\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\n * dYdX's BaseMath library.\n *\n * CHANGELOG:\n * - 9/21/20: Added safePower function\n */\nlibrary PreciseUnitMath {\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    // The number One in precise units.\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\n\n    // Max unsigned integer value\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\n    // Max and min signed integer value\n    int256 constant internal MAX_INT_256 = type(int256).max;\n    int256 constant internal MIN_INT_256 = type(int256).min;\n\n    /**\n     * @dev Getter function since constants can't be read directly from libraries.\n     */\n    function preciseUnit() internal pure returns (uint256) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @dev Getter function since constants can't be read directly from libraries.\n     */\n    function preciseUnitInt() internal pure returns (int256) {\n        return PRECISE_UNIT_INT;\n    }\n\n    /**\n     * @dev Getter function since constants can't be read directly from libraries.\n     */\n    function maxUint256() internal pure returns (uint256) {\n        return MAX_UINT_256;\n    }\n\n    /**\n     * @dev Getter function since constants can't be read directly from libraries.\n     */\n    function maxInt256() internal pure returns (int256) {\n        return MAX_INT_256;\n    }\n\n    /**\n     * @dev Getter function since constants can't be read directly from libraries.\n     */\n    function minInt256() internal pure returns (int256) {\n        return MIN_INT_256;\n    }\n\n    /**\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\n     * of a number with 18 decimals precision.\n     */\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a.mul(b).div(PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\n     * significand of a number with 18 decimals precision.\n     */\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\n        return a.mul(b).div(PRECISE_UNIT_INT);\n    }\n\n    /**\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\n     * of a number with 18 decimals precision.\n     */\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\n    }\n\n    /**\n     * @dev Divides value a by value b (result is rounded down).\n     */\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a.mul(PRECISE_UNIT).div(b);\n    }\n\n\n    /**\n     * @dev Divides value a by value b (result is rounded towards 0).\n     */\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\n        return a.mul(PRECISE_UNIT_INT).div(b);\n    }\n\n    /**\n     * @dev Divides value a by value b (result is rounded up or away from 0).\n     */\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"Cant divide by 0\");\n\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\n    }\n\n    /**\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\n     */\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"Cant divide by 0\");\n        require(a != MIN_INT_256 || b != -1, \"Invalid input\");\n\n        int256 result = a.div(b);\n        if (a ^ b < 0 && a % b != 0) {\n            result -= 1;\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Multiplies value a by value b where rounding is towards the lesser number. \n     * (positive values are rounded towards zero and negative values are rounded away from 0). \n     */\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\n    }\n\n    /**\n     * @dev Divides value a by value b where rounding is towards the lesser number. \n     * (positive values are rounded towards zero and negative values are rounded away from 0). \n     */\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\n    }\n\n    /**\n    * @dev Performs the power on a specified value, reverts on overflow.\n    */\n    function safePower(\n        uint256 a,\n        uint256 pow\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        require(a > 0, \"Value must be positive\");\n\n        uint256 result = 1;\n        for (uint256 i = 0; i < pow; i++){\n            uint256 previousResult = result;\n\n            // Using safemath multiplication prevents overflows\n            result = previousResult.mul(a);\n        }\n\n        return result;\n    }\n}\n"
    }
  }
}}