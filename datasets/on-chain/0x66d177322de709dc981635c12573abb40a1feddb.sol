{{
  "language": "Solidity",
  "sources": {
    "contracts/GAME4/Staking/GameStaking4.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n\n/**\nToken Staking\n**/\n\npragma solidity 0.8.27;\n\nimport {Ownable} from \"./openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"./openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {IERC20} from \"./openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n\ncontract GameGenStaking is Ownable, ReentrancyGuard {\n    //Fit vars into 2 slots\n    struct UserInfo {\n        uint128 shares; // shares of token staked\n        uint128 userRewardPerTokenPaid; // user reward per token paid\n        uint128 rewards; // pending rewards\n        uint64 lastLockBlock; // last block when user locked\n        uint64 lastLockTimestamp; // last timestamp when user locked. For easier readability\n    }\n    \n    //Fit vars into 1 slot\n    struct PackageInfo {\n        uint128 totalLockedShares;\n        uint64 minLockPeriodInBlocks;\n        uint8 id;\n        uint8 isActive;\n        uint8 multiplier; //\n    }\n\n    // Precision factor for calculating rewards and exchange rate\n    uint256 public constant PRECISION_FACTOR = 10**18;\n\n    // The staking and reward tokens. Intended to be the same\n    IERC20 public immutable primaryToken;\n    IERC20 public immutable rewardToken;\n\n    //Fit into 3 slots\n\n    // Total rewards deposited. For tracking purposes\n    uint256 public totalRewardsForDistribution;\n\n    // Reward rate (block)\n    uint128 public currentRewardPerBlock;\n\n    // Last update block for rewards\n    uint64 public lastUpdateBlock;\n    \n    // Current end block for the current reward period\n    uint64 public periodEndBlock;\n\n    // Reward per token stored\n    uint128 public rewardPerTokenStored;\n\n    // Total existing shares\n    uint256 public totalShares;\n\n    // Minimum claim amount\n    uint256 public minClaimAmount = 1 ether;\n\n    // Owner\n    address internal _owner;\n\n    // Users info mapped for each package\n    mapping(address => mapping(uint8 => UserInfo)) internal userInfo;\n    // Packages info mapping\n    mapping(uint8 => PackageInfo) public packageInfo;\n    // Packages ids array\n    uint8[] public packageIds;\n\n    event Deposit(address indexed user, uint256 amount);\n    event Claim(address indexed user, uint256 claimedAmount);\n    event Withdraw(address indexed user, uint256 amount, uint256 claimedAmount);\n    event NewRewardPeriod(uint256 numberBlocks, uint256 rewardPerBlock, uint256 reward);\n    event AddMoreRewards(uint256 reward);\n    event CreatePackage(uint8 id, bool _isActive, uint8 multiplier, uint64 minLockPeriodInBlocks);\n    event SetPackageIsActive(uint8 packageId, bool isActive);\n    event SetMinClaimAmount(uint256 minClaimAmount);\n\n    /**\n     * @notice Constructor\n     * @param _primaryToken address of the token staked\n     * @param _rewardToken address of the reward token\n     */\n    constructor(\n        address _primaryToken,\n        address _rewardToken\n    ) Ownable(msg.sender) {\n        _owner = msg.sender;\n        rewardToken = IERC20(_rewardToken);\n        primaryToken = IERC20(_primaryToken);\n\n        uint64 thirtyDaysInBlocks = 30 * 7170; \n\n        createPackage(10, true, 1, thirtyDaysInBlocks);\n        createPackage(20, true, 2, thirtyDaysInBlocks * 2);\n        createPackage(30, true, 4, thirtyDaysInBlocks * 4);\n    }\n\n    /**\n     * @notice modifier\n     * @notice Only the Primary token contract can call functions with this modifier\n     */\n    modifier onlyTokenContract() {\n        require(address(primaryToken) == msg.sender, \"Caller is not Primary Token\");\n        _;\n    }\n\n    /**\n     * @notice Create a new package\n     * @param _id package id\n     * @param _isActive whether the package is active\n     * @param _multiplier multiplier for the package\n     * @param _minLockPeriodInBlocks minimum lock period in blocks\n     */\n    function createPackage(uint8 _id, bool _isActive, uint8 _multiplier, uint64 _minLockPeriodInBlocks) public onlyOwner {\n        packageInfo[_id] = PackageInfo({\n            id: _id,\n            isActive: _isActive ? 1 : 0,\n            totalLockedShares: 0,\n            multiplier: _multiplier,\n            minLockPeriodInBlocks: _minLockPeriodInBlocks\n        });\n        packageIds.push(_id);\n\n        emit CreatePackage(_id, _isActive, _multiplier, _minLockPeriodInBlocks);\n    }\n\n    /**\n     * @notice Set package as active or inactive\n     * @param packageId package id\n     * @param isActive whether the package is active\n     */\n    function setPackageIsActive(uint8 packageId, bool isActive) external onlyOwner {\n        packageInfo[packageId].isActive = isActive ? 1 : 0;\n\n        emit SetPackageIsActive(packageId, isActive);\n    }\n\n    /**\n     * @notice Get user stakes for all packages\n     * @param user address of the user\n     */\n    function getUsersStakes(address user) external view returns (UserInfo[] memory) {\n        return _getUsersStakes(user);\n    }\n\n    /**\n     * @notice Get user stakes for all packages\n     * @param user address of the user\n     */\n    function _getUsersStakes(address user) internal view returns (UserInfo[] memory) {\n        UserInfo[] memory userStakes = new UserInfo[](packageIds.length);\n\n        for (uint8 i = 0; i < packageIds.length; i++) {\n            userStakes[i] = userInfo[user][packageIds[i]];\n            userStakes[i].rewards = uint128(_calculatePendingRewards(user, packageIds[i]));\n        }\n\n        return userStakes;\n    }\n\n    /**\n     * @notice Get user stakes for a specific package\n     * @param user address of the user\n     * @param packageKey package id\n     */\n    function getUserStakesForPackage(address user, uint8 packageKey) external view returns (UserInfo memory) {\n        UserInfo memory userStake = userInfo[user][packageKey];\n        userStake.rewards = uint128(_calculatePendingRewards(user, packageKey));\n\n        return userStake;\n    }\n\n    /**\n     * @notice Get all packages\n     */\n    function getPackages() external view returns (PackageInfo[] memory) {\n        return _getPackages();\n    }\n\n    /**\n     * @notice Get all packages\n     */\n    function _getPackages() internal view returns (PackageInfo[] memory) {\n        PackageInfo[] memory packages = new PackageInfo[](packageIds.length);\n\n        for (uint8 i = 0; i < packageIds.length; i++) {\n            packages[i] = packageInfo[packageIds[i]];\n        }\n\n        return packages;\n    }\n\n    /**\n     * @notice Get a specific package\n     * @param packageKey package id\n     */\n    function getPackage(uint8 packageKey) external view returns (PackageInfo memory) {\n        return packageInfo[packageKey];\n    }\n\n    /**\n     * @notice make a staking deposit\n     * @param amount amount to deposit\n     * @param packageId package id\n     * @dev Non-reentrant\n     */\n    function deposit(uint256 amount, uint8 packageId) external nonReentrant() {\n        require(amount >= PRECISION_FACTOR, \"Deposit: Amount must be >= 1 TOKEN\");\n        require(packageInfo[packageId].id != 0, \"Deposit: Package does not exist\");\n        require(userInfo[msg.sender][packageId].shares == 0, \"Deposit: User already has locked in this package\");\n        require(packageInfo[packageId].isActive == 1, \"Deposit: Package is not active\");\n\n        // Update reward for user\n        _updateReward(msg.sender);\n\n        // Transfer Primary tokens to this address\n        primaryToken.transferFrom(msg.sender, address(this), amount);\n\n        uint256 currentShares;\n\n        // Calculate the number of shares to issue for the user\n        if (totalShares != 0) {\n            currentShares = (amount * totalShares) / totalShares;\n            // This is a sanity check to prevent deposit for 0 shares\n            require(currentShares != 0, \"Deposit: Fail\");\n        } else {\n            currentShares = amount;\n        }\n\n        currentShares *= packageInfo[packageId].multiplier;\n\n        // Adjust internal shares\n        userInfo[msg.sender][packageId].shares += uint128(currentShares);\n        userInfo[msg.sender][packageId].lastLockBlock = uint64(block.number);\n        userInfo[msg.sender][packageId].lastLockTimestamp = uint64(block.timestamp);\n        packageInfo[packageId].totalLockedShares += uint128(currentShares);\n        totalShares += currentShares;\n\n        emit Deposit(msg.sender, amount);\n    }\n\n    /**\n     * @notice Withdraw staked tokens (and collect reward tokens if requested)\n     * @param shares shares to withdraw\n     * @param claimRewardToken whether to claim reward tokens\n     */\n    function withdraw(uint256 shares, uint8 packageId, bool claimRewardToken) external {\n        require(\n            (shares > 0) && (shares <= userInfo[msg.sender][packageId].shares),\n            \"Withdraw: Shares equal to 0 or larger than user shares\"\n        );\n\n        _withdraw(shares, packageId, claimRewardToken);\n    }\n\n    /**\n     * @notice Withdraw all staked tokens (and collect reward tokens if requested)\n     * @param claimRewardToken whether to claim reward tokens\n     */\n    function withdrawAll(uint8 packageId, bool claimRewardToken) external {\n        _withdraw(userInfo[msg.sender][packageId].shares, packageId, claimRewardToken);\n    }\n\n    /**\n     * @notice Update reward for a user account\n     * @param _user address of the user\n     */\n    function _updateReward(address _user) internal {\n        if (block.number != lastUpdateBlock) {\n            rewardPerTokenStored = uint128(_rewardPerToken());\n            lastUpdateBlock = uint64(_lastRewardBlock());\n        }\n\n        for (uint8 i = 0; i < packageIds.length; i++) {\n            userInfo[_user][packageIds[i]].rewards = uint128(_calculatePendingRewards(_user, packageIds[i]));\n            userInfo[_user][packageIds[i]].userRewardPerTokenPaid = uint128(rewardPerTokenStored);\n        }\n    }\n     /**\n     * @notice Calculate pending rewards (WETH) for a user\n     * @param user address of the user\n     */\n    function calculatePendingRewards(address user, uint8 packageId) external view returns (uint256) {\n        return _calculatePendingRewards(user, packageId);\n    }\n\n    /**\n     * @notice Calculate pending rewards for a user\n     * @param user address of the user\n     */\n    function _calculatePendingRewards(address user, uint8 packageId) internal view returns (uint256) {\n        return\n            ((userInfo[user][packageId].shares * (_rewardPerToken() - (userInfo[user][packageId].userRewardPerTokenPaid))) /\n                PRECISION_FACTOR) + userInfo[user][packageId].rewards;\n    }\n\n    /**\n     * @notice Return last block where rewards must be distributed\n     */\n    function _lastRewardBlock() internal view returns (uint256) {\n        return block.number < periodEndBlock ? block.number : periodEndBlock;\n    }\n\n    /**\n     * @notice Return reward per token extrenal\n     */\n    function rewardPerToken() external view returns (uint256) {\n        return _rewardPerToken();\n    }\n\n    /**\n     * @notice Return reward per token\n     */\n    function _rewardPerToken() internal view returns (uint256) {\n        if (totalShares == 0) {\n            return rewardPerTokenStored;\n        }\n\n        return\n            rewardPerTokenStored +\n            ((_lastRewardBlock() - lastUpdateBlock) * (currentRewardPerBlock * PRECISION_FACTOR)) /\n            totalShares;\n    }\n\n    /**\n     * @notice Withdraw staked tokens (and collect reward tokens if requested)\n     * @param shares shares to withdraw\n     * @param claimRewardToken whether to claim reward tokens\n     */\n    function _withdraw(uint256 shares, uint8 packageId, bool claimRewardToken) internal nonReentrant() {\n        require(\n            (block.number - userInfo[msg.sender][packageId].lastLockBlock) >= packageInfo[packageId].minLockPeriodInBlocks,\n            \"Withdraw: Minimum lock period not reached\"\n        );\n        // Update reward for user\n        _updateReward(msg.sender);\n\n        userInfo[msg.sender][packageId].shares -= uint128(shares);\n        packageInfo[packageId].totalLockedShares -= uint128(shares);\n        totalShares -= shares;\n\n        uint256 pendingRewards;\n\n        if (claimRewardToken) {\n            // Fetch pending rewards\n            pendingRewards = userInfo[msg.sender][packageId].rewards;\n\n            if (pendingRewards > 0) {\n                userInfo[msg.sender][packageId].rewards = 0;\n                rewardToken.transfer(msg.sender, pendingRewards);\n            }\n        }\n\n        uint256 sharesToAmount = shares / packageInfo[packageId].multiplier;\n\n        // Transfer Primary tokens to sender\n        primaryToken.transfer(msg.sender, sharesToAmount);\n\n        emit Withdraw(msg.sender, sharesToAmount, pendingRewards);\n    }\n\n    /**\n     * @notice Claim rewards\n     * @param packageId package id\n     * @dev Non-reentrant\n     */\n    function claim(uint8 packageId) external nonReentrant() returns(uint claimed){\n        // Update reward for user\n        _updateReward(msg.sender);\n        require(userInfo[msg.sender][packageId].rewards >= minClaimAmount, \"Claim: Insufficient rewards\");\n\n        uint256 pendingRewards = userInfo[msg.sender][packageId].rewards;\n\n        if (pendingRewards > 0) {\n            userInfo[msg.sender][packageId].rewards = 0;\n            rewardToken.transfer(msg.sender, pendingRewards);\n            claimed = pendingRewards;\n        }\n\n        emit Claim(msg.sender, pendingRewards);\n    }\n\n    /**\n     * @notice Update the reward per block (in rewardToken)\n     * @dev Only callable by owner.\n     */\n    function updateRewards(uint256 reward, uint256 rewardDurationInBlocks) external onlyOwner {\n        require(rewardDurationInBlocks > 0, \"Deposit: Reward duration must be > 0\");\n\n        // Adjust the current reward per block\n        if (block.number >= periodEndBlock) {            \n            currentRewardPerBlock = uint128(reward / rewardDurationInBlocks);\n        } else {\n            currentRewardPerBlock = uint128(\n                (reward + ((periodEndBlock - block.number) * currentRewardPerBlock)) /\n                rewardDurationInBlocks);\n        }\n\n        require(currentRewardPerBlock > 0, \"Deposit: Reward per block must be > 0\");\n\n        lastUpdateBlock = uint64(block.number);\n        periodEndBlock = uint64(block.number + rewardDurationInBlocks);\n        totalRewardsForDistribution = reward;\n\n        emit NewRewardPeriod(rewardDurationInBlocks, currentRewardPerBlock, reward);\n    }\n\n    /**\n     * @notice Add more rewards to the pool\n     * @param reward amount of reward tokens to add\n     * @dev Only callable by owner.\n     */\n    function addRewards(uint256 reward) external onlyOwner nonReentrant(){\n        require(periodEndBlock > block.number, \"Deposit: Reward period ended\");\n        require(reward > (periodEndBlock - block.number), \"Deposit: Reward must be > 0\");\n        rewardToken.transferFrom(msg.sender, address(this), reward);\n\n        if (block.number != lastUpdateBlock) {\n            rewardPerTokenStored = uint128(_rewardPerToken());\n            lastUpdateBlock = uint64(_lastRewardBlock());\n        }\n\n        unchecked {\n            totalRewardsForDistribution += reward;\n            currentRewardPerBlock += uint128(reward / (periodEndBlock - block.number));\n        }\n        emit AddMoreRewards(reward);\n    }\n\n    /**\n     * @notice Deposit rewards\n     * @param reward amount of reward tokens to deposit\n     * @dev Only callable by the Primary token contract.\n     */\n    function depositRewards(uint256 reward) external onlyTokenContract {\n        require(periodEndBlock > block.number, \"Deposit: Reward period ended\");\n        require(reward > (periodEndBlock - block.number), \"Deposit: Reward must be > 0\");\n\n        if (block.number != lastUpdateBlock) {\n            rewardPerTokenStored = uint128(_rewardPerToken());\n            lastUpdateBlock = uint64(_lastRewardBlock());\n        }\n\n        unchecked {\n            totalRewardsForDistribution += reward;\n            currentRewardPerBlock += uint128(reward / (periodEndBlock - block.number));\n        }\n        emit AddMoreRewards(reward);\n    }\n\n    /**\n     * @notice Set the minimum claim amount\n     * @param _minClaimAmount minimum claim amount\n     * @dev Only callable by owner.\n     */\n    function setMinClaimAmount(uint256 _minClaimAmount) external onlyOwner {\n        require(_minClaimAmount < 100 ether, \"setMinClaimAmount: Min claim amount must be < 100 Token\");\n        minClaimAmount = _minClaimAmount;\n\n        emit SetMinClaimAmount(_minClaimAmount);\n    }\n\n    /**\n     * @notice Get total rewards for distribution to this block\n     */\n    function getTotalRewardsForDistributionToThisBlock() external view returns(uint256){\n        return _getTotalRewardsForDistributionToThisBlock();\n    }\n\n    /**\n     * @notice Get total rewards for distribution to this block\n     */\n    function _getTotalRewardsForDistributionToThisBlock() internal view returns(uint256){\n        return totalRewardsForDistribution - (currentRewardPerBlock * (periodEndBlock - block.number));\n    }\n\n    /**\n     * @notice Get full info for a user and packages. Useful for frontend visualization\n     * @param user address of the user\n     */\n    function getFullInfoForUser(address user) external view returns (UserInfo[] memory, PackageInfo[] memory, uint256, uint256) {\n        return (_getUsersStakes(user), _getPackages(), _getTotalRewardsForDistributionToThisBlock(), _rewardPerToken());\n    }\n\n    /**\n     * @notice Get full contract info. Useful for frontend visualization\n     */\n    function getFullContractInfo() external view returns (PackageInfo[] memory, uint256, uint256) {\n        return (_getPackages(), _getTotalRewardsForDistributionToThisBlock(), _rewardPerToken());\n    }\n}"
    },
    "contracts/GAME4/Staking/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "contracts/GAME4/Staking/openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/GAME4/Staking/openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/GAME4/Staking/openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "contracts/GAME4/Staking/openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/GAME4/Staking/openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/GAME4/Staking/openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}