{"AggregatorV3Interface.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(\r\n        uint80 _roundId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n"},"BatteryCoinPresale.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./ReentrancyGuard.sol\";\r\nimport \"./Pausable.sol\";\r\nimport \"./AggregatorV3Interface.sol\";\r\n\r\ncontract BatteryCoinPresale is Ownable, ReentrancyGuard, Pausable {\r\n    IERC20 public BATT;\r\n    IERC20 public USDT;\r\n    IERC20 public USDC;\r\n\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n    struct PresaleRound {\r\n        uint256 startDate;\r\n        uint256 roundNo;\r\n        uint256 roundPrice;\r\n        uint256 totalTokenAmount;\r\n        uint256 remainAmount;\r\n        bool isStarted;\r\n        bool isFinished;\r\n    }\r\n\r\n    struct HashValue {\r\n        address userAddress;\r\n        uint roundNo;\r\n        bytes32 hashValue;\r\n        uint256 reserveDate;\r\n        uint256 totalBATTAmount;\r\n        uint256 tokenPrice;\r\n        address tokenSymbol;\r\n        uint256 totalPaidAmount;\r\n        bool isReleased;\r\n        uint256 vestingStart;\r\n        uint256 vestingClaimedMonths;\r\n        bool isRefunded;\r\n        uint256 releasedBATTAmount;\r\n    }\r\n\r\n    mapping(uint256 =\u003e PresaleRound) public presaleRoundList;\r\n    uint256 public presaleRoundCount;\r\n    mapping(address =\u003e uint256) public userParticipation;\r\n    mapping(address =\u003e bool) public ownerList;\r\n    mapping(address =\u003e bool) public coreOwnerList;\r\n    bytes32[] private hashValueList;\r\n    mapping(bytes32 =\u003e HashValue) hashValues;\r\n    uint256 lastRoundNo = 0;\r\n\r\n    uint8 public USDTDecimal = 6;\r\n    uint8 public batteryTokenDecimal = 18;\r\n    uint8 public tokenValueDecimals = 2;\r\n    uint256 public constant MAX_PARTICIPATION_AMOUNT = 1000000;\r\n    uint256 public constant VESTING_PERIOD_MONTHS = 24;\r\n    uint256 public constant ANNUAL_FEE_PERCENTAGE = 88; // 8.8% annual fee\r\n\r\n    bool public vestingPeriodStarted = false;\r\n    uint256 public vestingPeriodStartTime;\r\n    bool private roundsInitialized = false; // Flag to check if rounds are initialized\r\n\r\n    event OwnerAdded(address indexed newOwner);\r\n    event OwnerRemoved(address indexed removedOwner);\r\n    event RoundSet(uint256 indexed roundNo, uint256 startDate);\r\n    event Reserved(\r\n        address indexed user,\r\n        bytes32 hashValue,\r\n        uint256 amount,\r\n        uint256 price\r\n    );\r\n    event PresaleReleased(\r\n        bytes32 hashValue,\r\n        address indexed user,\r\n        uint256 amount\r\n    );\r\n    event MoneyReleased(address indexed to, uint256 amount);\r\n    event TokenAddressSet(address indexed tokenAddress);\r\n    event Debug(string message);\r\n    event Refunded(address indexed user, uint256 amount);\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        emit Debug(\"Constructor started\");\r\n\r\n        address _usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n        address _usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n\r\n        require(\r\n            _usdt != address(0) \u0026\u0026 _usdc != address(0),\r\n            \"Invalid token address\"\r\n        );\r\n\r\n        USDT = IERC20(_usdt);\r\n        USDC = IERC20(_usdc);\r\n\r\n        emit TokenAddressSet(_usdt);\r\n        emit TokenAddressSet(_usdc);\r\n\r\n        // Initialize the Chainlink price feed\r\n        priceFeed = AggregatorV3Interface(\r\n            0xF79D6aFBb6dA890132F9D7c355e3015f15F3406F\r\n        );\r\n\r\n        emit Debug(\"Constructor finished\");\r\n    }\r\n\r\n    modifier onlyOwners() {\r\n        require(isOwner(msg.sender), \"Caller is not an owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCoreOwners() {\r\n        require(isCoreOwner(msg.sender), \"Caller is not a core owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address _address) public view returns (bool) {\r\n        return ownerList[_address];\r\n    }\r\n\r\n    function isCoreOwner(address _address) public view returns (bool) {\r\n        return coreOwnerList[_address];\r\n    }\r\n\r\n    function addOwner(address _newOwner) external onlyOwner {\r\n        ownerList[_newOwner] = true;\r\n        emit OwnerAdded(_newOwner);\r\n    }\r\n\r\n    function removeOwner(address _owner) external onlyOwner {\r\n        ownerList[_owner] = false;\r\n        coreOwnerList[_owner] = false; // Ensure core owners are also removed\r\n        emit OwnerRemoved(_owner);\r\n    }\r\n\r\n    function addCoreOwner(address _newCoreOwner) external onlyOwner {\r\n        require(ownerList[_newCoreOwner], \"Core owner must be an owner\");\r\n        coreOwnerList[_newCoreOwner] = true;\r\n    }\r\n\r\n    function removeCoreOwner(address _coreOwner) external onlyOwner {\r\n        coreOwnerList[_coreOwner] = false;\r\n    }\r\n\r\n    function pause() external onlyCoreOwners {\r\n        vestingPeriodStarted = true;\r\n        vestingPeriodStartTime = block.timestamp;\r\n\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyCoreOwners {\r\n        vestingPeriodStarted = false;\r\n        vestingPeriodStartTime = 0;\r\n\r\n        _unpause();\r\n    }\r\n\r\n    function initializeRounds() external onlyOwner {\r\n        require(!roundsInitialized, \"Rounds have already been initialized\");\r\n        roundsInitialized = true; // Set the flag to true after initialization\r\n\r\n        uint16[20] memory roundPrices = [\r\n            50,\r\n            75,\r\n            100,\r\n            200,\r\n            400,\r\n            600,\r\n            800,\r\n            1000,\r\n            1200,\r\n            1400,\r\n            1600,\r\n            1800,\r\n            2000,\r\n            2300,\r\n            2600,\r\n            2900,\r\n            3200,\r\n            3300,\r\n            3400,\r\n            3500\r\n        ];\r\n        uint32[20] memory totalTokenAmounts = [\r\n            2000000,\r\n            3000000,\r\n            4000000,\r\n            5000000,\r\n            6000000,\r\n            7000000,\r\n            8000000,\r\n            9000000,\r\n            10000000,\r\n            11000000,\r\n            12000000,\r\n            13000000,\r\n            14000000,\r\n            15000000,\r\n            16000000,\r\n            17000000,\r\n            18000000,\r\n            19000000,\r\n            20000000,\r\n            30000000\r\n        ];\r\n\r\n        uint256 multiplier = 10 ** batteryTokenDecimal;\r\n        for (uint256 i = 0; i \u003c roundPrices.length; i++) {\r\n            presaleRoundList[i] = PresaleRound({\r\n                startDate: 0,\r\n                roundNo: i,\r\n                roundPrice: roundPrices[i],\r\n                totalTokenAmount: totalTokenAmounts[i] * multiplier,\r\n                remainAmount: totalTokenAmounts[i] * multiplier,\r\n                isStarted: false,\r\n                isFinished: false\r\n            });\r\n        }\r\n\r\n        presaleRoundCount = roundPrices.length;\r\n        lastRoundNo = 0;\r\n    }\r\n\r\n    function setBATTTokenAddress(\r\n        address _tokenAddress,\r\n        uint8 _decimal\r\n    ) external onlyOwners {\r\n        BATT = IERC20(_tokenAddress);\r\n        batteryTokenDecimal = _decimal;\r\n        emit TokenAddressSet(_tokenAddress);\r\n    }\r\n\r\n    function setRound(\r\n        uint256 _roundNo,\r\n        uint256 _startDate\r\n    ) external onlyOwners {\r\n        require(_roundNo \u003c presaleRoundCount, \"Invalid round number\");\r\n        PresaleRound storage round = presaleRoundList[_roundNo];\r\n        round.startDate = _startDate;\r\n        updateRoundStatus(round);\r\n        emit RoundSet(_roundNo, _startDate);\r\n    }\r\n\r\n    function updateRoundStatus(PresaleRound storage round) internal {\r\n        if (round.remainAmount == 0) {\r\n            round.isStarted = false;\r\n            round.isFinished = true;\r\n\r\n            if (round.roundNo == 19) {\r\n                vestingPeriodStarted = true;\r\n                vestingPeriodStartTime = block.timestamp;\r\n            }\r\n        } else {\r\n            round.isStarted = block.timestamp \u003e= round.startDate;\r\n            round.isFinished = false;\r\n        }\r\n    }\r\n\r\n    function reserve(\r\n        uint256 _amount,\r\n        address _token\r\n    ) external nonReentrant whenNotPaused {\r\n        require(\r\n            _token == address(USDT) || _token == address(USDC),\r\n            \"Invalid token\"\r\n        );\r\n        require(_amount \u003e 0, \"Amount must be greater than zero\");\r\n        require(\r\n            userParticipation[msg.sender] + _amount \u003c=\r\n                MAX_PARTICIPATION_AMOUNT * (10 ** batteryTokenDecimal),\r\n            \"Exceeds max participation amount\"\r\n        );\r\n\r\n        PresaleRound storage currentRound = getCurrentRound();\r\n        updateRoundStatus(currentRound);\r\n        require(\r\n            currentRound.isStarted \u0026\u0026 !currentRound.isFinished,\r\n            \"Presale round not active\"\r\n        );\r\n        require(\r\n            currentRound.remainAmount \u003e= _amount,\r\n            \"Not enough tokens left in this round\"\r\n        );\r\n\r\n        uint256 usdAmount = (((_amount / (10 ** batteryTokenDecimal)) *\r\n            currentRound.roundPrice) / (10 ** tokenValueDecimals)) *\r\n            10 ** USDTDecimal;\r\n\r\n        require(\r\n            IERC20(_token).allowance(msg.sender, address(this)) \u003e= usdAmount,\r\n            \"Insufficient allowance\"\r\n        );\r\n\r\n        require(\r\n            IERC20(_token).transferFrom(msg.sender, address(this), usdAmount),\r\n            \"Token transfer failed\"\r\n        );\r\n\r\n        bytes32 hashValue = keccak256(\r\n            abi.encodePacked(\r\n                msg.sender,\r\n                block.timestamp,\r\n                _amount,\r\n                currentRound.roundPrice\r\n            )\r\n        );\r\n        hashValues[hashValue] = HashValue({\r\n            userAddress: msg.sender,\r\n            roundNo: currentRound.roundNo,\r\n            hashValue: hashValue,\r\n            reserveDate: block.timestamp,\r\n            totalBATTAmount: _amount,\r\n            tokenPrice: currentRound.roundPrice,\r\n            tokenSymbol: _token,\r\n            totalPaidAmount: usdAmount,\r\n            isReleased: false,\r\n            vestingStart: 0,\r\n            vestingClaimedMonths: 0,\r\n            isRefunded: false,\r\n            releasedBATTAmount: 0\r\n        });\r\n\r\n        hashValueList.push(hashValue);\r\n\r\n        currentRound.remainAmount -= _amount;\r\n        userParticipation[msg.sender] += _amount;\r\n        emit Reserved(msg.sender, hashValue, _amount, currentRound.roundPrice);\r\n    }\r\n\r\n    function reserveWithETH(\r\n        uint256 _amount\r\n    ) external payable nonReentrant whenNotPaused {\r\n        require(_amount \u003e 0, \"Amount must be greater than zero\");\r\n        require(\r\n            userParticipation[msg.sender] + _amount \u003c=\r\n                MAX_PARTICIPATION_AMOUNT * (10 ** batteryTokenDecimal),\r\n            \"Exceeds max participation amount\"\r\n        );\r\n\r\n        PresaleRound storage currentRound = getCurrentRound();\r\n        updateRoundStatus(currentRound);\r\n        require(\r\n            currentRound.isStarted \u0026\u0026 !currentRound.isFinished,\r\n            \"Presale round not active\"\r\n        );\r\n        require(\r\n            currentRound.remainAmount \u003e= _amount,\r\n            \"Not enough tokens left in this round\"\r\n        );\r\n\r\n        bytes32 hashValue = keccak256(\r\n            abi.encodePacked(\r\n                msg.sender,\r\n                block.timestamp,\r\n                _amount,\r\n                currentRound.roundPrice\r\n            )\r\n        );\r\n        hashValues[hashValue] = HashValue({\r\n            userAddress: msg.sender,\r\n            roundNo: currentRound.roundNo,\r\n            hashValue: hashValue,\r\n            reserveDate: block.timestamp,\r\n            totalBATTAmount: _amount,\r\n            tokenPrice: currentRound.roundPrice,\r\n            tokenSymbol: address(0),\r\n            totalPaidAmount: msg.value,\r\n            isReleased: false,\r\n            vestingStart: 0,\r\n            vestingClaimedMonths: 0,\r\n            isRefunded: false,\r\n            releasedBATTAmount: 0\r\n        });\r\n\r\n        hashValueList.push(hashValue);\r\n\r\n        currentRound.remainAmount -= _amount;\r\n        userParticipation[msg.sender] += _amount;\r\n\r\n        emit Reserved(msg.sender, hashValue, _amount, currentRound.roundPrice);\r\n    }\r\n\r\n    function getHashValuesByAddress(\r\n        address userAddress\r\n    ) external view returns (HashValue[] memory) {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i \u003c hashValueList.length; i++) {\r\n            if (hashValues[hashValueList[i]].userAddress == userAddress) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        HashValue[] memory userHashValues = new HashValue[](count);\r\n        uint256 index = 0;\r\n        for (uint256 i = 0; i \u003c hashValueList.length; i++) {\r\n            if (hashValues[hashValueList[i]].userAddress == userAddress) {\r\n                userHashValues[index++] = hashValues[hashValueList[i]];\r\n            }\r\n        }\r\n\r\n        return userHashValues;\r\n    }\r\n\r\n    function getLastHashValueByAddress(\r\n        address userAddress\r\n    ) external view returns (bytes32) {\r\n        for (uint256 i = hashValueList.length; i \u003e 0; i--) {\r\n            bytes32 hashValue = hashValueList[i - 1];\r\n            if (hashValues[hashValue].userAddress == userAddress) {\r\n                return hashValue;\r\n            }\r\n        }\r\n        revert(\"No hash value found for the given address\");\r\n    }\r\n\r\n    function getPresaleInfo(\r\n        bytes32 _hashValue\r\n    ) external view returns (HashValue memory) {\r\n        HashValue storage hashValue = hashValues[_hashValue];\r\n        require(hashValue.userAddress != address(0), \"Invalid hash value\");\r\n        return hashValue;\r\n    }\r\n\r\n    function releasePresaleAll(\r\n        bool isReleaseOneTime,\r\n        uint256 releaseGroupNumber\r\n    ) external onlyOwners nonReentrant {\r\n        require(vestingPeriodStarted, \"Release only after round 20 or paused\");\r\n\r\n        uint256 oneTimeRelease = 100;\r\n        uint256 startIndex = isReleaseOneTime\r\n            ? 0\r\n            : oneTimeRelease * releaseGroupNumber;\r\n        uint256 endIndex = isReleaseOneTime\r\n            ? hashValueList.length\r\n            : oneTimeRelease * (releaseGroupNumber + 1);\r\n        if (endIndex \u003e hashValueList.length) {\r\n            endIndex = hashValueList.length;\r\n        }\r\n\r\n        for (uint256 i = startIndex; i \u003c endIndex; i++) {\r\n            bytes32 hashValue = hashValueList[i];\r\n            HashValue storage hv = hashValues[hashValue];\r\n            if (!hv.isReleased) {\r\n                require(hv.userAddress != address(0), \"Invalid hash value\");\r\n\r\n                uint256 monthlyAmount = (hv.totalBATTAmount -\r\n                    hv.releasedBATTAmount) /\r\n                    (VESTING_PERIOD_MONTHS - hv.vestingClaimedMonths);\r\n\r\n                if (hv.vestingStart == 0) {\r\n                    hv.vestingStart = vestingPeriodStartTime;\r\n                }\r\n                uint256 monthsElapsed = (block.timestamp - hv.vestingStart) /\r\n                    30 days;\r\n                uint256 claimableMonths = monthsElapsed -\r\n                    hv.vestingClaimedMonths;\r\n\r\n                if (\r\n                    hv.vestingClaimedMonths + monthsElapsed \u003e\r\n                    VESTING_PERIOD_MONTHS\r\n                ) {\r\n                    claimableMonths =\r\n                        VESTING_PERIOD_MONTHS -\r\n                        hv.vestingClaimedMonths;\r\n                }\r\n\r\n                if (claimableMonths \u003e 0) {\r\n                    uint256 amountToRelease = monthlyAmount * claimableMonths;\r\n                    if (\r\n                        amountToRelease \u003e\r\n                        (hv.totalBATTAmount - hv.releasedBATTAmount)\r\n                    ) {\r\n                        amountToRelease =\r\n                            hv.totalBATTAmount -\r\n                            hv.releasedBATTAmount;\r\n                    }\r\n\r\n                    // Calculate the fee amount to add\r\n                    uint256 feeAmount = (amountToRelease *\r\n                        ANNUAL_FEE_PERCENTAGE) / 1000;\r\n                    uint256 totalAmountToRelease = amountToRelease + feeAmount;\r\n\r\n                    hv.releasedBATTAmount += amountToRelease;\r\n                    hv.vestingClaimedMonths += claimableMonths;\r\n\r\n                    // Transfer tokens from the caller to the userAddress\r\n                    require(\r\n                        BATT.transferFrom(\r\n                            msg.sender,\r\n                            hv.userAddress,\r\n                            totalAmountToRelease\r\n                        ),\r\n                        \"Token transfer failed\"\r\n                    );\r\n\r\n                    emit PresaleReleased(\r\n                        hashValue,\r\n                        hv.userAddress,\r\n                        totalAmountToRelease\r\n                    );\r\n                }\r\n\r\n                if (hv.releasedBATTAmount == hv.totalBATTAmount) {\r\n                    hv.isReleased = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function releasePresaleByHashValue(\r\n        bytes32 _hashValue\r\n    ) external onlyOwners nonReentrant {\r\n        require(vestingPeriodStarted, \"Release only after round 20 or paused\");\r\n\r\n        HashValue storage hashValue = hashValues[_hashValue];\r\n        require(hashValue.userAddress != address(0), \"Invalid hash value\");\r\n        require(!hashValue.isReleased, \"Already released\");\r\n\r\n        uint256 monthlyAmount = (hashValue.totalBATTAmount -\r\n            hashValue.releasedBATTAmount) /\r\n            (VESTING_PERIOD_MONTHS - hashValue.vestingClaimedMonths);\r\n\r\n        if (hashValue.vestingStart == 0) {\r\n            hashValue.vestingStart = vestingPeriodStartTime;\r\n        }\r\n        uint256 monthsElapsed = (block.timestamp - hashValue.vestingStart) /\r\n            30 days;\r\n        uint256 claimableMonths = monthsElapsed -\r\n            hashValue.vestingClaimedMonths;\r\n\r\n        if (\r\n            hashValue.vestingClaimedMonths + monthsElapsed \u003e\r\n            VESTING_PERIOD_MONTHS\r\n        ) {\r\n            claimableMonths =\r\n                VESTING_PERIOD_MONTHS -\r\n                hashValue.vestingClaimedMonths;\r\n        }\r\n\r\n        if (claimableMonths \u003e 0) {\r\n            uint256 amountToRelease = monthlyAmount * claimableMonths;\r\n            if (\r\n                amountToRelease \u003e\r\n                (hashValue.totalBATTAmount - hashValue.releasedBATTAmount)\r\n            ) {\r\n                amountToRelease =\r\n                    hashValue.totalBATTAmount -\r\n                    hashValue.releasedBATTAmount;\r\n            }\r\n\r\n            // Calculate the fee amount to add\r\n            uint256 feeAmount = (amountToRelease * ANNUAL_FEE_PERCENTAGE) /\r\n                1000;\r\n            uint256 totalAmountToRelease = amountToRelease + feeAmount;\r\n\r\n            hashValue.releasedBATTAmount += amountToRelease;\r\n            hashValue.vestingClaimedMonths += claimableMonths;\r\n\r\n            // Transfer tokens from the caller to the userAddress\r\n            require(\r\n                BATT.transferFrom(\r\n                    msg.sender,\r\n                    hashValue.userAddress,\r\n                    totalAmountToRelease\r\n                ),\r\n                \"Token transfer failed\"\r\n            );\r\n\r\n            emit PresaleReleased(\r\n                _hashValue,\r\n                hashValue.userAddress,\r\n                totalAmountToRelease\r\n            );\r\n        }\r\n\r\n        if (hashValue.releasedBATTAmount == hashValue.totalBATTAmount) {\r\n            hashValue.isReleased = true;\r\n        }\r\n    }\r\n\r\n    function releaseFunds(\r\n        address _to,\r\n        uint256 _amount,\r\n        address _token\r\n    ) external onlyOwners nonReentrant {\r\n        if (_token == address(USDT) || _token == address(USDC)) {\r\n            require(\r\n                IERC20(_token).transfer(_to, _amount),\r\n                \"Token transfer failed\"\r\n            );\r\n        } else if (_token == address(0)) {\r\n            // address(0) is used to represent ETH\r\n            (bool success, ) = _to.call{value: _amount}(\"\");\r\n            require(success, \"ETH transfer failed\");\r\n        } else {\r\n            revert(\"Invalid token\");\r\n        }\r\n        emit MoneyReleased(_to, _amount);\r\n    }\r\n\r\n    function getCurrentRound() internal view returns (PresaleRound storage) {\r\n        for (uint256 i = 0; i \u003c presaleRoundCount; i++) {\r\n            PresaleRound storage round = presaleRoundList[i];\r\n            if (block.timestamp \u003e= round.startDate \u0026\u0026 round.remainAmount \u003e 0) {\r\n                return round;\r\n            }\r\n        }\r\n        revert(\"No active presale round\");\r\n    }\r\n\r\n    function getLatestRound() external view returns (PresaleRound memory) {\r\n        for (uint256 i = 0; i \u003c presaleRoundCount; i++) {\r\n            PresaleRound memory round = presaleRoundList[i];\r\n            if (!round.isFinished) {\r\n                return round;\r\n            }\r\n        }\r\n        revert(\"No active presale round\");\r\n    }\r\n\r\n    function refundUser(bytes32 _hashValue) external onlyOwners nonReentrant {\r\n        require(\r\n            vestingPeriodStarted \u0026\u0026\r\n                block.timestamp \u003e=\r\n                vestingPeriodStartTime + VESTING_PERIOD_MONTHS * 30 days,\r\n            \"Refunds only available after vesting period\"\r\n        );\r\n\r\n        HashValue storage hashValue = hashValues[_hashValue];\r\n        require(\r\n            hashValue.roundNo \u003e= 0 \u0026\u0026 hashValue.roundNo \u003c= 5,\r\n            \"Refunds only available for rounds 1 to 6\"\r\n        );\r\n        require(hashValue.userAddress != address(0), \"Invalid hash value\");\r\n        require(!hashValue.isRefunded, \"Already refunded\");\r\n\r\n        uint256 refundAmount = hashValue.totalPaidAmount;\r\n        address userAddress = hashValue.userAddress;\r\n        address tokenSymbol = hashValue.tokenSymbol;\r\n\r\n        if (tokenSymbol == address(0)) {\r\n            // Refund in ETH\r\n            (bool success, ) = userAddress.call{value: refundAmount}(\"\");\r\n            require(success, \"ETH refund transfer failed\");\r\n        } else {\r\n            // Refund in USDT or USDC\r\n            require(\r\n                IERC20(tokenSymbol).transfer(userAddress, refundAmount),\r\n                \"Token refund transfer failed\"\r\n            );\r\n        }\r\n\r\n        hashValue.isRefunded = true; // Set the isRefunded flag to true\r\n\r\n        emit Refunded(userAddress, refundAmount);\r\n    }\r\n}\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}"},"ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\nimport {IERC165} from \"./IERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}"},"IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @dev Interface of the ERC-165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @dev Interface of the ERC-20 standard as defined in the ERC.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller\u0027s account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\nimport {Context} from \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\nimport {Context} from \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    /**\r\n     * @dev The operation failed because the contract is paused.\r\n     */\r\n    error EnforcedPause();\r\n\r\n    /**\r\n     * @dev The operation failed because the contract is not paused.\r\n     */\r\n    error ExpectedPause();\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        if (paused()) {\r\n            revert EnforcedPause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        if (!paused()) {\r\n            revert ExpectedPause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If EIP-1153 (transient storage) is available on the chain you\u0027re deploying at,\r\n * consider using {ReentrancyGuardTransient} instead.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\r\n        if (_status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == ENTERED;\r\n    }\r\n}"}}