{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC165.sol\";\n\n/**\n * @dev Storage based implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Storage is ERC165 {\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "contracts/common/AuthControlL1BridgeRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport { ERC165Storage } from \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./AuthRoleL1BridgeRegistry.sol\";\n\ncontract AuthControlL1BridgeRegistry is AuthRoleL1BridgeRegistry, ERC165Storage, AccessControl {\n    modifier onlyOwner() {\n        require(isAdmin(msg.sender), \"AuthControl: Caller is not an admin\");\n        _;\n    }\n\n    modifier onlyManager() {\n        require(hasRole(MANAGER_ROLE, msg.sender), \"AuthControl: Caller is not a manager\");\n        _;\n    }\n\n    modifier onlyRegistrant() {\n        require(hasRole(REGISTRANT_ROLE, msg.sender), \"AuthControl: Caller is not a registrant\");\n        _;\n    }\n\n\n    /// @dev add admin\n    /// @param account  address to add\n    function addAdmin(address account) public virtual onlyOwner {\n        grantRole(DEFAULT_ADMIN_ROLE, account);\n    }\n\n    function addManager(address account) public virtual onlyOwner {\n        grantRole(MANAGER_ROLE, account);\n    }\n\n    function addRegistrant(address account) public virtual onlyManager {\n        _grantRole(REGISTRANT_ROLE, account);\n    }\n\n    /// @dev remove admin\n    /// @param account  address to remove\n    function removeAdmin(address account) public virtual onlyOwner {\n        revokeRole(DEFAULT_ADMIN_ROLE, account);\n    }\n\n    function removeManager(address account) public virtual onlyOwner {\n        revokeRole(MANAGER_ROLE, account);\n    }\n\n    function removeRegistrant(address account) public virtual onlyManager {\n        _revokeRole(REGISTRANT_ROLE, account);\n    }\n\n    /// @dev transfer admin\n    /// @param newAdmin new admin address\n    function transferAdmin(address newAdmin) public virtual onlyOwner {\n        require(newAdmin != address(0), \"Accessible: zero address\");\n        require(msg.sender != newAdmin, \"Accessible: same admin\");\n\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function transferOwnership(address newAdmin) public virtual onlyOwner {\n        transferAdmin(newAdmin);\n    }\n\n    function renounceOwnership() public {\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function renounceManager() public {\n        renounceRole(MANAGER_ROLE, msg.sender);\n    }\n\n    function renounceRegistrant() public {\n        renounceRole(REGISTRANT_ROLE, msg.sender);\n    }\n\n    function revokeManager(address account) public onlyOwner {\n        revokeRole(MANAGER_ROLE, account);\n    }\n\n    function revokeRegistrant(address account) public onlyOwner {\n        revokeRole(REGISTRANT_ROLE, account);\n    }\n\n    /// @dev whether admin\n    /// @param account  address to check\n    function isAdmin(address account) public view virtual returns (bool) {\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\n    }\n\n    function isOwner() public view virtual returns (bool) {\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function isManager(address account) public view virtual returns (bool) {\n        return hasRole(MANAGER_ROLE, account);\n    }\n\n    function isRegistrant(address account) public view virtual returns (bool) {\n        return hasRole(REGISTRANT_ROLE, account);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Storage, AccessControl) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/common/AuthRoleL1BridgeRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract AuthRoleL1BridgeRegistry {\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER\");\n    bytes32 public constant REGISTRANT_ROLE = keccak256(\"REGISTRANT\");\n}\n"
    },
    "contracts/layer2/L1BridgeRegistryStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @title\n/// @notice\ncontract L1BridgeRegistryStorage   {\n\n    struct ROLLUP_INFO {\n        uint8   rollupType;  ///  type (0:empty, 1: optimism legacy, 2: optimism bedrock native TON)\n        address l2TON;\n        bool    rejectedSeigs;\n        bool    rejectedL2Deposit;\n        string  name;\n    }\n\n    address public layer2Manager;\n    address public seigManager;\n    address public ton;\n    address public seigniorageCommittee;\n\n    mapping (address => ROLLUP_INFO) public rollupInfo;\n\n    /// For registered bridges, set to true.\n    mapping (address => bool) public l1Bridge;\n\n    /// For registered portals, set to true.\n    mapping (address => bool) public portal;\n\n    //  bytes32(bytes(name))\n    mapping (bytes32 => bool) public registeredNames;\n}"
    },
    "contracts/layer2/L1BridgeRegistryV1_1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../proxy/ProxyStorage.sol\";\nimport { AuthControlL1BridgeRegistry } from \"../common/AuthControlL1BridgeRegistry.sol\";\nimport \"./L1BridgeRegistryStorage.sol\";\n/**\n * @notice  Error occurred when executing changeType function\n * @param x 1: sender is not ton nor wton\n *          2: wrong spender parameter\n *          3: zeroAddress l2 ton\n *          4: empty name\n */\nerror ChangeError(uint x);\n\n/**\n * @notice  Error when executing registerRollupConfig function\n * @param x 1: unsupported type\n *          2: already registered\n *          3: unavailable for registration\n *          4: zero L2TON\n */\nerror RegisterError(uint x);\nerror ZeroAddressError();\nerror NonRejectedError();\nerror OnlySeigniorageCommitteeError();\nerror OnlyRejectedError();\nerror NonRegisterdError();\nerror BridgeError();\nerror PortalError();\n\ninterface IERC20 {\n    function balanceOf(address addr) external view returns (uint256);\n}\n\ninterface IOptimismSystemConfig {\n    function owner() external view returns (address);\n    function l1StandardBridge() external view returns (address addr_);\n    function optimismPortal() external view returns (address addr_) ;\n}\n\ninterface ILayer2Manager {\n    function pauseCandidateAddOn(address rollupConfig) external;\n    function unpauseCandidateAddOn(address rollupConfig) external;\n}\n\ncontract L1BridgeRegistryV1_1 is ProxyStorage, AuthControlL1BridgeRegistry, L1BridgeRegistryStorage {\n\n    enum TYPE_ROLLUPCONFIG {\n        NONE,\n        LEGARCY,\n        OPTIMISM_BEDROCK\n    }\n\n    event SetAddresses(address _layer2Manager, address _seigManager, address _ton);\n    event SetSeigniorageCommittee(address _seigniorageCommittee);\n\n    /**\n     * @notice  Event occurs when registering rollupConfig\n     * @param   rollupConfig      the rollupConfig address\n     * @param   type_         0: none, 1: legacy, 2: bedrock with nativeTON\n     * @param   l2TON        the L2 TON address\n     * @param   name         the candidate name\n     */\n    event RegisteredRollupConfig(address rollupConfig, uint8 type_, address l2TON, string name);\n\n    /**\n     * @notice  Event occurs when an account with registrant privileges changes the layer 2 type.\n     * @param   rollupConfig      the rollupConfig address\n     * @param   type_         0: none, 1: legacy, 2: bedrock with nativeTON\n     * @param   l2TON        the L2 TON address\n     * @param   name         the candidate name\n     */\n    event ChangedType(address rollupConfig, uint8 type_, address l2TON, string name);\n\n    /**\n     * @notice  Event occurs when onlySeigniorageCommittee stops issuing seigniorage\n     *          to the layer 2 sequencer of a specific rollupConfig.\n     * @param   rollupConfig  the rollupConfig address\n     */\n    event RejectedCandidateAddOn(address rollupConfig);\n\n    /**\n     * @notice  Event occurs when onlySeigniorageCommittee cancels stopping issuing seigniorage\n     *          to the layer 2 sequencer of a specific rollupConfig.\n     * @param   rollupConfig  the rollupConfig address\n     */\n    event RestoredCandidateAddOn(address rollupConfig);\n\n    /**\n     * @notice  Event occurs when a bridge address is registered during system configuration registration.\n     * @param   rollupConfig    the rollupConfig address\n     * @param   bridge          the bridge address\n     */\n    event AddedBridge(address rollupConfig, address bridge);\n\n    /**\n     * @notice  Event occurs when an optimismPortal address is registered during system configuration registration.\n     * @param rollupConfig          the rollupConfig address\n     * @param portal            the bridge address\n     */\n    event AddedPortal(address rollupConfig, address portal);\n\n    /**\n     * @notice  Event occurs when an optimismPortal address is registered during system configuration registration.\n     * @param rollupConfig          the rollupConfig address\n     * @param rejectedL2Deposit     if it is true, allow the withdrawDepositL2 function.\n     */\n    event SetBlockingL2Deposit(address rollupConfig, bool rejectedL2Deposit);\n\n    modifier onlySeigniorageCommittee() {\n        require(seigniorageCommittee == msg.sender, \"PermissionError\");\n        _;\n    }\n\n    modifier nonRejected(address rollupConfig) {\n        require(!rollupInfo[rollupConfig].rejectedSeigs, \"rejected\");\n        _;\n    }\n\n    /* ========== CONSTRUCTOR ========== */\n    constructor() {}\n\n    /* ========== onlyOwner ========== */\n\n    /**\n     *\n     * @param _layer2Manager    the layer2Manager address\n     * @param _seigManager      the seigManager address\n     * @param _ton              the ton address\n     */\n    function setAddresses(\n        address _layer2Manager,\n        address _seigManager,\n        address _ton\n    )  external onlyOwner {\n        _nonZeroAddress(_layer2Manager, _seigManager,_ton );\n        layer2Manager = _layer2Manager;\n        seigManager = _seigManager;\n        ton = _ton;\n\n        emit SetAddresses(_layer2Manager, _seigManager, _ton);\n    }\n\n    /**\n     * @notice  Set the seigniorageCommittee address.\n     * @param _seigniorageCommittee the seigniorageCommittee address\n     */\n    function setSeigniorageCommittee(\n        address _seigniorageCommittee\n    )  external\n       onlyOwner\n    {\n        seigniorageCommittee = _seigniorageCommittee;\n\n        emit SetSeigniorageCommittee(_seigniorageCommittee);\n    }\n\n    // /**\n    //  * Sets whether to allow the withdrawDepositL2 function.\n    //  * @param rollupConfig          the rollupConfig address\n    //  * @param rejectedL2Deposit     if it is true, allow the withdrawDepositL2 function.\n    //  */\n    // function setBlockingL2Deposit(\n    //     address rollupConfig,\n    //     bool rejectedL2Deposit\n    // )  external onlySeigniorageCommittee {\n\n    //     require (rollupInfo[rollupConfig].rollupType != 0, \"NonRegistered\");\n\n    //     rollupInfo[rollupConfig].rejectedL2Deposit = rejectedL2Deposit;\n\n    //     emit SetBlockingL2Deposit(rollupConfig, rejectedL2Deposit);\n    // }\n\n    /// @dev\n    // function resetRollupConfig(address rollupConfig)  external  onlyOwner {\n    // _resetRollupConfig(rollupConfig);\n    // }\n\n    /* ========== onlySeigniorageCommittee ========== */\n\n    /**\n     * @notice Stop issuing seigniorage to the layer 2 sequencer of a specific rollupConfig.\n     * @param rollupConfig the rollupConfig address\n     */\n    function rejectCandidateAddOn(\n        address rollupConfig\n    )  external onlySeigniorageCommittee() {\n        _nonRejected(rollupConfig);\n\n        require (rollupInfo[rollupConfig].rollupType != 0, \"NonRegistered\");\n\n        rollupInfo[rollupConfig].rejectedSeigs = true;\n        rollupInfo[rollupConfig].rejectedL2Deposit = true;\n\n        ILayer2Manager(layer2Manager).pauseCandidateAddOn(rollupConfig);\n        emit RejectedCandidateAddOn(rollupConfig);\n    }\n\n    /**\n     * Restore cancel stopping seigniorage to the layer 2 sequencer of a specific rollupConfig.\n     * @param rollupConfig          the rollupConfig address\n     * @param rejectedL2Deposit     if it is true, allow the withdrawDepositL2 function.\n     */\n    function restoreCandidateAddOn(\n        address rollupConfig,\n        bool rejectedL2Deposit\n    )  external onlySeigniorageCommittee{\n        _onlyRejectedRollupConfig(rollupConfig);\n\n        rollupInfo[rollupConfig].rejectedSeigs = false;\n        rollupInfo[rollupConfig].rejectedL2Deposit = rejectedL2Deposit;\n\n        ILayer2Manager(layer2Manager).unpauseCandidateAddOn(rollupConfig);\n        emit RestoredCandidateAddOn(rollupConfig);\n    }\n\n    /* ========== onlyManager ========== */\n\n    /**\n     * @notice Registers Layer2 for a specific rollupConfig by the manager.\n     * @param rollupConfig      the rollupConfig address\n     * @param _type         1: legacy, 2: bedrock with nativeTON\n     */\n    function registerRollupConfigByManager(address rollupConfig, uint8 _type, address _l2TON, string calldata _name)  external  onlyManager {\n        _nonRejected(rollupConfig);\n        _registerRollupConfig(rollupConfig, _type, _l2TON, _name);\n    }\n\n    function registerRollupConfigByManager(address rollupConfig, uint8 _type, address _l2TON)  external  onlyManager {\n        _nonRejected(rollupConfig);\n        _registerRollupConfig(rollupConfig, _type, _l2TON, '');\n    }\n\n    /* ========== onlyRegistrant ========== */\n\n    /**\n     * @notice Registers Layer2 for a specific rollupConfig by Registrant.\n     * @param rollupConfig       the rollupConfig address\n     * @param _type          1: legacy, 2: bedrock with nativeTON\n     */\n    function registerRollupConfig(address rollupConfig, uint8 _type, address _l2TON, string calldata _name)  external onlyRegistrant {\n        _nonRejected(rollupConfig);\n        _registerRollupConfig(rollupConfig, _type, _l2TON, _name);\n    }\n\n    function registerRollupConfig(address rollupConfig, uint8 _type, address _l2TON)  external onlyRegistrant {\n        _nonRejected(rollupConfig);\n        _registerRollupConfig(rollupConfig, _type, _l2TON, '');\n    }\n\n    /**\n     * @notice Changes the Layer2 type for a specific rollupConfig by Registrant.\n     * @param rollupConfig the rollupConfig address\n     * @param _type          1: legacy, 2: bedrock with nativeTON\n     * @param _name          the candidate name\n     */\n    function changeType(address rollupConfig, uint8 _type, address _l2TON, string calldata _name)  external  onlyRegistrant {\n\n        ROLLUP_INFO memory info = rollupInfo[rollupConfig];\n        if (info.rollupType == 0) revert ChangeError(1);\n        if (info.rollupType == _type) revert ChangeError(2);\n        if (_l2TON == address(0)) revert ChangeError(3);\n        if (bytes(_name).length == 0) revert ChangeError(4);\n\n        _resetRollupConfig(rollupConfig) ;\n        _registerRollupConfig(rollupConfig, _type, _l2TON, _name);\n\n        emit ChangedType(rollupConfig, _type, _l2TON, _name);\n    }\n\n    /* ========== public ========== */\n\n    /**\n     * @notice View the rollupType of rollupConfig\n     * @param rollupConfig the rollup address\n     * @return rollupType_  the rollupType 0:empty, 1: optimism legacy, 2: optimism bedrock native TON)\n     */\n    function rollupType(address rollupConfig) external view returns(uint8 rollupType_) {\n        return  rollupInfo[rollupConfig].rollupType;\n    }\n\n    /**\n     * @notice Returns whether the issuance of seigniorage to the given layer 2 is restricted.\n     * @param rollupConfig the rollup address\n     * @return rejectedSeigs  If it is true, Seigniorage issuance has been stopped for this layer2.\n     */\n    function rejectRollupConfig(address rollupConfig) external view returns(bool rejectedSeigs) {\n        return  rollupInfo[rollupConfig].rejectedSeigs;\n    }\n\n    /**\n     * @notice Returns whether the issuance of seigniorage to the given layer 2 is restricted.\n     * @param rollupConfig the rollup address\n     * @return rejectedSeigs  If it is true, Seigniorage issuance has been stopped for this layer2.\n     */\n    function isRejectedSeigs(address rollupConfig) external view returns(bool rejectedSeigs) {\n        return  rollupInfo[rollupConfig].rejectedSeigs;\n    }\n\n    /**\n     * @notice Returns whether the issuance of seigniorage to the given layer 2 is restricted.\n     * @param rollupConfig the rollup address\n     * @return rejectedL2Deposit  If it is true, stop depositing at this layer.\n     */\n    function isRejectedL2Deposit(address rollupConfig) external view returns(bool rejectedL2Deposit) {\n        return  rollupInfo[rollupConfig].rejectedL2Deposit;\n    }\n\n    /**\n     * @notice View the l2 ton address of rollupConfig\n     * @param rollupConfig the rollup address\n     * @return l2TonAddress  the l2 ton address\n     */\n    function l2TON(address rollupConfig) external view returns(address l2TonAddress) {\n        return  rollupInfo[rollupConfig].l2TON;\n    }\n\n    /**\n     * @notice View the l2 ton address of rollupConfig\n     * @param rollupConfig          the rollup address\n     * @return type_                the layer 2 type ( 1: legacy optimism, 2: bedrock optimism with TON native token)\n     * @return l2TON_               the L2 TON address\n     * @return rejectedSeigs_       If it is true, Seigniorage issuance has been stopped for this layer2.\n     * @return rejectedL2Deposit_    If it is true, stop depositing at this layer.\n     * @return name_                the candidate name\n     */\n    function getRollupInfo(address rollupConfig)\n        external view\n        returns (uint8 type_, address l2TON_, bool rejectedSeigs_, bool rejectedL2Deposit_, string  memory name_)\n    {\n        ROLLUP_INFO memory info = rollupInfo[rollupConfig];\n        return (info.rollupType, info.l2TON, info.rejectedSeigs, info.rejectedL2Deposit, info.name);\n    }\n\n    /**\n     * @notice View the liquidity of Layer2 TON for a specific rollupConfig.\n     * @param rollupConfig the rollupConfig address\n     */\n    function layer2TVL(address rollupConfig) public view returns (uint256 amount){\n\n        uint _type = rollupInfo[rollupConfig].rollupType;\n\n        if (_type == 1) {\n            address l1Bridge_ = IOptimismSystemConfig(rollupConfig).l1StandardBridge();\n            if (l1Bridge[l1Bridge_]) amount = IERC20(ton).balanceOf(l1Bridge_);\n\n        } else if (_type == 2) {\n             address optimismPortal_ = IOptimismSystemConfig(rollupConfig).optimismPortal();\n            if (portal[optimismPortal_]) amount = IERC20(ton).balanceOf(optimismPortal_);\n        }\n    }\n\n    /**\n     * @notice Check whether a specific rollupConfig can be registered as a type.\n     * @param rollupConfig      the rollupConfig address\n     * @param _type         1: legacy, 2: bedrock with nativeTON\n     */\n    function availableForRegistration(address rollupConfig, uint8 _type) public view returns (bool valid){\n        return _availableForRegistration(rollupConfig, _type);\n    }\n\n    /* ========== internal ========== */\n\n    function _nonZeroAddress(address _addr1, address _addr2, address _addr3) internal pure {\n        if(_addr1 == address(0) || _addr2 == address(0) || _addr3 == address(0) ) revert ZeroAddressError();\n    }\n\n    function _nonRejected(address rollupConfig) internal view {\n        if(rollupInfo[rollupConfig].rejectedSeigs) revert NonRejectedError();\n    }\n\n    function _onlyRejectedRollupConfig(address rollupConfig) internal view {\n        if(!rollupInfo[rollupConfig].rejectedSeigs) revert OnlyRejectedError();\n    }\n\n    function _registerRollupConfig(address rollupConfig, uint8 _type, address _l2TON, string memory _name) internal {\n        if (_l2TON == address(0)) revert RegisterError(4);\n        if (_type == 0 || _type > uint8(type(TYPE_ROLLUPCONFIG).max)) revert RegisterError(1);\n\n        ROLLUP_INFO storage info = rollupInfo[rollupConfig];\n\n        if (info.rollupType != 0) revert RegisterError(2);\n        if (!_availableForRegistration(rollupConfig, _type)) revert RegisterError(3);\n\n        if (_type == 1 || _type == 2) {\n            address bridge_ = IOptimismSystemConfig(rollupConfig).l1StandardBridge();\n            if (bridge_ == address(0)) revert BridgeError();\n            l1Bridge[bridge_] = true;\n            emit AddedBridge(rollupConfig, bridge_);\n        }\n\n        if (_type == 2) {\n            address portal_ = IOptimismSystemConfig(rollupConfig).optimismPortal();\n            if (portal_ == address(0)) revert PortalError();\n            portal[portal_] = true;\n            emit AddedPortal(rollupConfig, portal_);\n        }\n\n        info.rollupType = _type;\n        info.l2TON = _l2TON;\n        if (bytes(_name).length != 0) info.name = _name;\n        // registeredNames[bytes32(bytes(_name))] = true;\n\n        emit RegisteredRollupConfig(rollupConfig, _type, _l2TON, _name);\n    }\n\n    function _availableForRegistration(address rollupConfig, uint8 _type) internal view returns (bool valid){\n\n        // if (registeredNames[bytes32(bytes(_name))] == true) {\n        //     valid = false;\n        // } else {\n            ROLLUP_INFO memory info = rollupInfo[rollupConfig];\n\n            if (!info.rejectedSeigs) {\n\n                address l1Bridge_ = IOptimismSystemConfig(rollupConfig).l1StandardBridge();\n\n                if(l1Bridge_ != address(0)) {\n                    if (_type == 1) {\n                        if(info.rollupType == 0 && !l1Bridge[l1Bridge_]) valid = true;\n\n                    } else if (_type == 2) {\n                        address portal_ = IOptimismSystemConfig(rollupConfig).optimismPortal();\n                        if (portal_ != address(0)) {\n                            if (info.rollupType == 0 && !portal[portal_]) valid = true;\n                        }\n                    }\n                }\n            }\n        // }\n    }\n\n    function _resetRollupConfig(address rollupConfig) internal {\n        ROLLUP_INFO storage info = rollupInfo[rollupConfig];\n        if(info.rejectedSeigs) revert NonRejectedError();\n\n        address l1Bridge_ = IOptimismSystemConfig(rollupConfig).l1StandardBridge();\n        address optimismPortal_ = IOptimismSystemConfig(rollupConfig).optimismPortal();\n\n        if (l1Bridge_ != address(0) && l1Bridge[l1Bridge_]) l1Bridge[l1Bridge_] = false;\n        if (optimismPortal_ != address(0) && portal[optimismPortal_]) portal[optimismPortal_] = false;\n\n        // registeredNames[bytes32(bytes(info.name))] = false;\n\n        info.rollupType = 0;\n        info.l2TON = address(0);\n        info.rejectedSeigs = false;\n        info.rejectedL2Deposit = false;\n        info.name = '';\n    }\n}\n"
    },
    "contracts/proxy/ProxyStorage.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\ncontract ProxyStorage  {\n\n    bool public pauseProxy;\n\n    mapping(uint256 => address) public proxyImplementation;\n    mapping(address => bool) public aliveImplementation;\n    mapping(bytes4 => address) public selectorImplementation;\n\n}"
    }
  }
}}