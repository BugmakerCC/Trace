{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/royalties/RoyaltyFeeRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {IRoyaltyFeeRegistry} from \"./interfaces/IRoyaltyFeeRegistry.sol\";\n\n/**\n * @title RoyaltyFeeRegistry\n * @notice It is a royalty fee registry for the Helixmeta exchange.\n */\ncontract RoyaltyFeeRegistry is IRoyaltyFeeRegistry, Ownable {\n    struct FeeInfo {\n        address setter;\n        address receiver;\n        uint256 fee;\n    }\n\n    // Limit (if enforced for fee royalty in percentage (10,000 = 100%)\n    uint256 public royaltyFeeLimit;\n\n    mapping(address => FeeInfo) private _royaltyFeeInfoCollection;\n    mapping(address => mapping(uint256 => FeeInfo))\n        private _royaltyFeeInfoNFTCollection;\n\n    event NewRoyaltyFeeLimit(uint256 royaltyFeeLimit);\n    event RoyaltyFeeUpdate(\n        address indexed collection,\n        address indexed setter,\n        address indexed receiver,\n        uint256 fee\n    );\n\n    event NFTRoyaltyFeeUpdate(\n        uint256 indexed tokenId,\n        address indexed setter,\n        address indexed receiver,\n        uint256 fee\n    );\n\n    /**\n     * @notice Constructor\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\n     */\n    constructor(uint256 _royaltyFeeLimit) {\n        require(_royaltyFeeLimit <= 9500, \"Owner: Royalty fee limit too high\");\n        royaltyFeeLimit = _royaltyFeeLimit;\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit)\n        external\n        override\n        onlyOwner\n    {\n        require(_royaltyFeeLimit <= 9500, \"Owner: Royalty fee limit too high\");\n        royaltyFeeLimit = _royaltyFeeLimit;\n\n        emit NewRoyaltyFeeLimit(_royaltyFeeLimit);\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForCollection(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external override onlyOwner {\n        require(fee <= royaltyFeeLimit, \"Registry: Royalty fee too high\");\n        _royaltyFeeInfoCollection[collection] = FeeInfo({\n            setter: setter,\n            receiver: receiver,\n            fee: fee\n        });\n\n        emit RoyaltyFeeUpdate(collection, setter, receiver, fee);\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @param collection address of the NFT contract\n     * @param tokenId string number tokenId gen\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForNFTCollection(\n        address collection,\n        uint256 tokenId,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external override onlyOwner {\n        require(fee <= royaltyFeeLimit, \"Registry: Royalty fee too high\");\n        _royaltyFeeInfoNFTCollection[collection][tokenId] = FeeInfo({\n            setter: setter,\n            receiver: receiver,\n            fee: fee\n        });\n\n        emit NFTRoyaltyFeeUpdate(tokenId, setter, receiver, fee);\n    }\n\n    /**\n     * @notice Calculate royalty info for a collection address and a sale gross amount\n     * @param collection collection address\n     * @param amount amount\n     * @return receiver address and amount received by royalty recipient\n     */\n    function royaltyInfo(\n        address collection,\n        uint256 amount,\n        uint256 tokenId\n    ) external view override returns (address, uint256) {\n        if (\n            _royaltyFeeInfoNFTCollection[collection][tokenId].receiver !=\n            address(0)\n        ) {\n            return (\n                _royaltyFeeInfoNFTCollection[collection][tokenId].receiver,\n                (amount *\n                    _royaltyFeeInfoNFTCollection[collection][tokenId].fee) /\n                    10000\n            );\n        }\n        return (\n            _royaltyFeeInfoCollection[collection].receiver,\n            (amount * _royaltyFeeInfoCollection[collection].fee) / 10000\n        );\n    }\n\n    /**\n     * @notice View royalty info for a collection address\n     * @param collection collection address\n     */\n    function royaltyFeeInfoCollection(address collection)\n        external\n        view\n        override\n        returns (\n            address,\n            address,\n            uint256\n        )\n    {\n        return (\n            _royaltyFeeInfoCollection[collection].setter,\n            _royaltyFeeInfoCollection[collection].receiver,\n            _royaltyFeeInfoCollection[collection].fee\n        );\n    }\n\n     /**\n     * @notice View royalty info for a collection address\n     * @param collection collection address\n     * @param tokenId uint256\n     */\n    function royaltyFeeInfoNFTCollection(address collection, uint256 tokenId)\n        external\n        view\n        override\n        returns (\n            address,\n            address,\n            uint256\n        )\n    {\n        return (\n            _royaltyFeeInfoNFTCollection[collection][tokenId].setter,\n            _royaltyFeeInfoNFTCollection[collection][tokenId].receiver,\n            _royaltyFeeInfoNFTCollection[collection][tokenId].fee\n        );\n    }\n}\n"
    },
    "contracts/royalties/interfaces/IRoyaltyFeeRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ninterface IRoyaltyFeeRegistry {\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\n\n    function updateRoyaltyInfoForCollection(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external;\n\n    function updateRoyaltyInfoForNFTCollection(\n        address collection,\n        uint256 tokenId,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external;\n\n    function royaltyFeeInfoCollection(address collection)\n        external\n        view\n        returns (\n            address,\n            address,\n            uint256\n        );\n\n    function royaltyFeeInfoNFTCollection(address collection, uint256 tokenId)\n        external\n        view\n        returns (\n            address,\n            address,\n            uint256\n        );\n\n    function royaltyInfo(\n        address collection,\n        uint256 amount,\n        uint256 tokenId\n    ) external view returns (address, uint256);\n}\n"
    }
  }
}}