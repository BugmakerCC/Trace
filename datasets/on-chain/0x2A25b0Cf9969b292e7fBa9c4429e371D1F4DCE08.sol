{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC165.sol\";\n\n/**\n * @dev Storage based implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Storage is ERC165 {\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "contracts/common/AccessRoleCommon.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract AccessRoleCommon {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER\");\n}\n"
    },
    "contracts/common/AccessibleCommon.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport { ERC165Storage } from \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./AccessRoleCommon.sol\";\n\ncontract AccessibleCommon is AccessRoleCommon, ERC165Storage, AccessControl {\n    modifier onlyOwner() {\n        require(isAdmin(msg.sender), \"Accessible: Caller is not an admin\");\n        _;\n    }\n\n    /// @dev add admin\n    /// @param account  address to add\n    function addAdmin(address account) public virtual onlyOwner {\n        grantRole(DEFAULT_ADMIN_ROLE, account);\n    }\n\n    /// @dev remove admin\n    /// @param account  address to remove\n    function removeAdmin(address account) public virtual onlyOwner {\n        renounceRole(DEFAULT_ADMIN_ROLE, account);\n    }\n\n    /// @dev transfer admin\n    /// @param newAdmin new admin address\n    function transferAdmin(address newAdmin) public virtual onlyOwner {\n        require(newAdmin != address(0), \"Accessible: zero address\");\n        require(msg.sender != newAdmin, \"Accessible: same admin\");\n\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function transferOwnership(address newAdmin) public virtual onlyOwner {\n        transferAdmin(newAdmin);\n    }\n\n    function renounceOwnership() public onlyOwner {\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /// @dev whether admin\n    /// @param account  address to check\n    function isAdmin(address account) public view virtual returns (bool) {\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\n    }\n\n    function isOwner() public view virtual returns (bool) {\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Storage, AccessControl) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/layer2/Layer2ManagerStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @title\n/// @notice\ncontract Layer2ManagerStorage  {\n\n    struct CandidateAddOnInfo {\n        address rollupConfig;\n        address candidateAddOn;\n    }\n\n    struct SeqSeigStatus {\n        uint8 status; // status for giving seigniorage ( 0: none , 1: registered, 2: paused )\n        address operatorManager;\n    }\n\n    address public l1BridgeRegistry;\n    address public operatorManagerFactory;\n\n    address public ton;\n    address public wton;\n    address public dao;\n    address public depositManager;\n    address public seigManager;\n    address public swapProxy;\n\n    uint256 public minimumInitialDepositAmount;   /// ton\n\n    /// rollupConfig - SeqSeigStatus\n    mapping (address => SeqSeigStatus) public rollupConfigInfo;\n\n    /// operator - CandidateAddOnInfo\n    mapping (address => CandidateAddOnInfo) public operatorInfo;\n\n    bool internal _lock;\n\n    modifier ifFree {\n        require(!_lock, \"lock\");\n        _lock = true;\n        _;\n        _lock = false;\n    }\n}"
    },
    "contracts/layer2/Layer2ManagerV1_1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./Layer2ManagerStorage.sol\";\nimport \"../proxy/ProxyStorage.sol\";\nimport { AccessibleCommon } from \"../common/AccessibleCommon.sol\";\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"../libraries/SafeERC20.sol\";\n\n/**\n * @notice  Error that occurs when registering CandidateAddOn\n * @param x 1: don't create operator\n *          2: already rollupConfigOfOperator registered\n *          3: fail deposit\n *          4: already operatorOfRollupConfig registered\n *          5: unvalidated Layer2\n *          6: insufficient initialDepositAmount\n *          7: fail to swap ton to wton\n *          8: wrong data length\n */\nerror RegisterError(uint x);\nerror ZeroAddressError();\nerror ZeroBytesError();  // memo check\nerror SameValueError();\nerror StatusError();\nerror ExcludeError();\n/**\n * @notice  Error in onApprove function\n * @param x 1: sender is not ton nor wton\n *          2: wrong spender parameter\n *          3: wrong data parameter length\n */\nerror OnApproveError(uint x);\n\ninterface IL1BridgeRegistry {\n    function getRollupInfo(address rollupConfig) external view returns (\n        uint8   rollupType,\n        address l2TON,\n        bool    rejectedSeigs,\n        bool    rejectedL2Deposit,\n        string  memory name\n    );\n    function registeredNames(bytes32 byteName) external view returns (bool);\n    function l2TON(address rollupConfig) external view returns (address);\n    function rollupType(address rollupConfig) external view returns (uint8);\n    function checkLayer2TVL(address _rollupConfig) external view returns (bool result, uint256 amount);\n}\n\ninterface OnApprove {\n    function onApprove(address owner, address spender, uint256 amount, bytes calldata data) external returns (bool);\n}\n\ninterface IOptimismSystemConfig {\n    function owner() external view returns (address);\n    function optimismPortal() external view returns (address addr_);\n    function l1StandardBridge() external view returns (address addr_);\n}\n\ninterface IStandardBridge {\n    function deposits(address, address) external view returns (uint256);\n}\n\ninterface IOptimismPortal {\n    function depositedAmount() external view returns (uint256);\n}\n\ninterface IIDAOCommittee {\n     function createCandidateAddOn(string calldata _memo, address _rollupConfig) external returns (address);\n}\n\ninterface IIDepositManager {\n    function deposit(address layer2, address account, uint256 amount) external returns (bool);\n}\n\ninterface IOperatorManagerFactory {\n    function createOperatorManager(address _rollupConfig) external returns (address);\n}\n\ninterface ITON {\n    function approveAndCall(address spender, uint256 amount, bytes memory data) external returns (bool);\n}\n\ninterface IWTON {\n     function swapFromTON(uint256 tonAmount) external returns (bool);\n}\n\ninterface IOperator {\n    function isOperator(address addr) external view returns (bool);\n}\n\ncontract Layer2ManagerV1_1 is ProxyStorage, AccessibleCommon, Layer2ManagerStorage {\n\n    /* ========== DEPENDENCIES ========== */\n    using SafeERC20 for IERC20;\n\n    address internal constant LEGACY_ERC20_NATIVE_TOKEN = 0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000;\n\n    event SetAddresses(\n        address _l2Register,\n        address _operatorManagerFactory,\n        address _ton,\n        address _wton,\n        address _dao,\n        address _depositManager,\n        address _seigManager,\n        address _swapProxy\n    );\n\n    /**\n     * @notice Event occurs when setting the minimum initial deposit amount\n     * @param _minimumInitialDepositAmount the minimum initial deposit amount\n     */\n    event SetMinimumInitialDepositAmount(uint256 _minimumInitialDepositAmount);\n\n    /**\n     * @notice Event occurs when registering CandidateAddOn\n     * @param rollupConfig      the rollupConfig address\n     * @param wtonAmount        the wton amount depositing when registering CandidateAddOn\n     * @param memo              the name of CandidateAddOn\n     * @param operator          an operatorManager contract address\n     * @param candidateAddOn    a candidateAddOn address\n     */\n    event RegisteredCandidateAddOn(address rollupConfig, uint256 wtonAmount, string memo, address operator, address candidateAddOn);\n\n    /**\n     * @notice Event occurs when pausing the CandidateAddOn\n     * @param rollupConfig      the rollupConfig address\n     * @param candidateAddOn    the candidateAddOn address\n     */\n    event PausedCandidateAddOn(address rollupConfig, address candidateAddOn);\n\n    /**\n     * @notice Event occurs when pausing the CandidateAddOn\n     * @param rollupConfig      the rollupConfig address\n     * @param candidateAddOn    the candidateAddOn address\n     */\n    event UnpausedCandidateAddOn(address rollupConfig, address candidateAddOn);\n\n    /**\n     * @notice Event occurs when pausisetting the operatorManagerFactory\n     * @param _operatorManagerFactory   the operatorManagerFactory address\n     */\n    event SetOperatorManagerFactory(address _operatorManagerFactory);\n\n    modifier onlySeigManger() {\n        require(seigManager == msg.sender, \"sender is not a SeigManager\");\n        _;\n    }\n\n    modifier onlyL1BridgeRegistry() {\n        require(l1BridgeRegistry == msg.sender, \"sender is not a L1BridgeRegistry\");\n        _;\n    }\n\n    /* ========== CONSTRUCTOR ========== */\n    constructor() {\n    }\n\n    /* ========== onlyOwner ========== */\n\n    function setAddresses(\n        address _l1BridgeRegistry,\n        address _operatorManagerFactory,\n        address _ton,\n        address _wton,\n        address _dao,\n        address _depositManager,\n        address _seigManager,\n        address _swapProxy\n    )  external  onlyOwner {\n        l1BridgeRegistry = _l1BridgeRegistry;\n        operatorManagerFactory = _operatorManagerFactory;\n        ton = _ton;\n        wton = _wton;\n        dao = _dao;\n        depositManager = _depositManager;\n        seigManager = _seigManager;\n        swapProxy = _swapProxy;\n\n        emit SetAddresses(_l1BridgeRegistry, _operatorManagerFactory, _ton, _wton, _dao, _depositManager, _seigManager, _swapProxy);\n    }\n\n    function setOperatorManagerFactory(\n        address _operatorManagerFactory\n    )  external  onlyOwner {\n        operatorManagerFactory = _operatorManagerFactory;\n        emit SetOperatorManagerFactory( _operatorManagerFactory);\n    }\n\n    /**\n     * @notice  Set the minimum TON deposit amount required when creating a CandidateAddOn.\n     *          Due to calculating swton, it is recommended to set DepositManager's minimum deposit + 0.1 TON\n     * @param   _minimumInitialDepositAmount the minimum initial deposit amount\n     */\n    function setMinimumInitialDepositAmount(uint256 _minimumInitialDepositAmount)  external  onlyOwner {\n        require(minimumInitialDepositAmount != _minimumInitialDepositAmount, \"same\");\n        minimumInitialDepositAmount = _minimumInitialDepositAmount;\n\n        emit SetMinimumInitialDepositAmount(_minimumInitialDepositAmount);\n    }\n\n\n    /* ========== onlyL2Register ========== */\n\n    /**\n     * @notice Pause the CandidateAddOn\n     * @param rollupConfig the rollupConfig address\n     */\n    function pauseCandidateAddOn(address rollupConfig) external onlyL1BridgeRegistry ifFree {\n         SeqSeigStatus memory info = rollupConfigInfo[rollupConfig];\n        // require(info.stateIssue == 1, \"not in normal status\");\n        if (info.status != 1) revert StatusError();\n\n        address _layer2 = operatorInfo[info.operatorManager].candidateAddOn;\n        _nonZeroAddress(_layer2);\n\n        rollupConfigInfo[rollupConfig].status = 2;\n        emit PausedCandidateAddOn(rollupConfig, _layer2);\n\n        (bool success, ) = seigManager.call(abi.encodeWithSignature(\"excludeFromSeigniorage(address)\",_layer2));\n        if (!success) revert ExcludeError();\n\n    }\n\n    /**\n     * @notice Unpause the CandidateAddOn\n     * @param rollupConfig the rollupConfig address\n     */\n    function unpauseCandidateAddOn(address rollupConfig) external onlyL1BridgeRegistry ifFree {\n        SeqSeigStatus memory info = rollupConfigInfo[rollupConfig];\n        // require(info.stateIssue == 2, \"not in pause status\");\n        if (info.status != 2) revert StatusError();\n\n        rollupConfigInfo[rollupConfig].status = 1;\n        emit UnpausedCandidateAddOn(rollupConfig, operatorInfo[info.operatorManager].candidateAddOn);\n    }\n\n    /* ========== onlySeigManger  ========== */\n\n    /**\n     * @notice When executing update seigniorage, the seigniorage is settled to the Operator of Layer 2.\n     * @param rollupConfig the rollupConfig address\n     * @param amount the amount to give a seigniorage\n     */\n    function updateSeigniorage(address rollupConfig, uint256 amount) external onlySeigManger {\n\n        IERC20(wton).safeTransfer(rollupConfigInfo[rollupConfig].operatorManager, amount);\n    }\n\n    /* ========== Anybody can execute ========== */\n\n    /**\n     * @notice Register the CandidateAddOn\n     * @param rollupConfig     rollupConfig's address\n     * @param amount           transferred amount\n     * @param flagTon          if true, amount is ton, otherwise it wton\n     * @param memo             layer's name\n     */\n    function registerCandidateAddOn(\n        address rollupConfig,\n        uint256 amount,\n        bool flagTon,\n        string calldata memo\n    )\n        external\n    {\n        _nonZeroAddress(rollupConfig);\n        if (bytes(memo).length == 0) revert ZeroBytesError();\n        if (rollupConfigInfo[rollupConfig].operatorManager != address(0)) revert RegisterError(4);\n        (bool res,) = _availableRegister(rollupConfig);\n\n        if (!res) revert RegisterError(5);\n        _transferDepositAmount(msg.sender, rollupConfig, amount, flagTon, memo);\n    }\n\n\n    /// @notice ERC20 Approve callback\n    /// @param owner    Account that called approveAndCall\n    /// @param spender  OnApprove function contract address\n    /// @param amount   Approved amount\n    /// @param data     Data used in OnApprove contract\n    /// @return bool    true\n    function onApprove(address owner, address spender, uint256 amount, bytes calldata data) external returns (bool) {\n        if (msg.sender != ton && msg.sender != wton) revert OnApproveError(1);\n\n        if (spender != address(this)) revert OnApproveError(2);\n\n        bytes calldata _message;\n        address _rollupConfig;\n        if (data.length <= 20) revert OnApproveError(3);\n        assembly {\n            _rollupConfig := shr(96, calldataload(data.offset))\n            _message.offset := add(data.offset, 20)\n            _message.length := sub(data.length, 20)\n        }\n\n        _nonZeroAddress(_rollupConfig);\n\n        if (rollupConfigInfo[_rollupConfig].operatorManager != address(0)) revert RegisterError(4);\n        (bool res,) = _availableRegister(_rollupConfig);\n        if (!res) revert RegisterError(5);\n\n        // if (msg.sender == ton) _transferDepositAmount(owner, _rollupConfig, amount, true, string(bytes(data[20:])));\n        // else _transferDepositAmount(owner, _rollupConfig, amount, false, string(bytes(data[20:])));\n\n        if (msg.sender == ton) _transferDepositAmount(owner, _rollupConfig, amount, true, string(_message));\n        else _transferDepositAmount(owner, _rollupConfig, amount, false, string(_message));\n\n        return true;\n    }\n\n    /* ========== VIEW ========== */\n\n    /**\n     * @notice View the rollupConfig address of the operator address.\n     * @param _oper     the operator address\n     * @return          the rollupConfig address\n     */\n    function rollupConfigOfOperator(address _oper) external view returns (address) {\n        return operatorInfo[_oper].rollupConfig;\n    }\n\n    /**\n     * @notice View the operator address of the rollupConfig address.\n     * @param _rollupConfig      the rollupConfig address\n     * @return          the operator address\n     */\n    function operatorOfRollupConfig(address _rollupConfig) external view returns (address) {\n        return rollupConfigInfo[_rollupConfig].operatorManager;\n    }\n\n    /**\n     * @notice  View the CandidateAddOn address of the operator address.\n     * @param _oper     the operator address\n     * @return          the candidateAddOn address\n     */\n    function candidateAddOnOfOperator(address _oper) external view returns (address) {\n        return operatorInfo[_oper].candidateAddOn;\n    }\n\n    /**\n     * @notice View the status of seigniorage provision for Layer 2 corresponding to rollupConfig.\n     * @param _rollupConfig     the rollupConfig address\n     * @return              the status of seigniorage provision for Layer 2\n     *                      ( 0: none , 1: registered, 2: paused )\n     */\n    function statusLayer2(address _rollupConfig) external view returns (uint8) {\n        return rollupConfigInfo[_rollupConfig].status;\n    }\n\n    /**\n     * @notice  Check Layer 2’s TON liquidity-related information\n     * @param _rollupConfig the rollupConfig address\n     * @return result       whether layer 2 TON liquidity can be checked\n     * @return amount       the layer 2's TON amount (total value liquidity)\n     */\n    function checkLayer2TVL(address _rollupConfig) public view returns (bool result, uint256 amount) {\n         return _checkLayer2TVL(_rollupConfig);\n    }\n\n    /**\n     * @notice Layer 2 related information search\n     * @param _rollupConfig     the rollupConfig address\n     * @return result           whether Layer2 information can be searched\n     * @return l1Bridge         the L1 bridge address\n     * @return portal           the optimism portal address\n     * @return l2Ton            the L2 TON address\n     */\n    function checkL1Bridge(address _rollupConfig) public view returns (bool result, address l1Bridge, address portal, address l2Ton) {\n         (result, l1Bridge, portal, l2Ton,,,,) = _checkL1BridgeDetail(_rollupConfig);\n    }\n\n    function availableRegister(address _rollupConfig) external view returns (bool result, uint256 amount) {\n        return _availableRegister(_rollupConfig) ;\n    }\n\n\n    /**\n     * @notice Layer 2 related information search\n     * @param _rollupConfig     the rollupConfig address\n     * @return result           whether Layer2 information can be searched\n     * @return l1Bridge         the L1 bridge address\n     * @return portal           the optimism portal address\n     * @return l2Ton            the L2 TON address\n     * @return _type            the layer 2 type ( 1: legacy optimism, 2: bedrock optimism with TON native token)\n     * @return status           status for giving seigniorage ( 0: none , 1: registered, 2: paused )\n     * @return rejectedSeigs     If it is true, Seigniorage issuance has been stopped for this layer2.\n     * @return rejectedL2Deposit If it is true, stop depositing at this layer.\n     */\n    function checkL1BridgeDetail(address _rollupConfig) external view\n        returns (\n            bool result,\n            address l1Bridge,\n            address portal,\n            address l2Ton,\n            uint8 _type,\n            uint8 status,\n            bool rejectedSeigs,\n            bool rejectedL2Deposit\n        )\n    {\n         (result, l1Bridge, portal, l2Ton, _type, status, rejectedSeigs, rejectedL2Deposit) = _checkL1BridgeDetail(_rollupConfig);\n    }\n\n    function _checkL1BridgeDetail(address _rollupConfig)\n        public\n        view\n        returns (bool result, address l1Bridge, address portal, address l2Ton, uint8 _type, uint8 status,\n        bool rejectedSeigs, bool rejectedL2Deposit)\n    {\n        (_type, , rejectedSeigs, rejectedL2Deposit,) = IL1BridgeRegistry(l1BridgeRegistry).getRollupInfo(_rollupConfig);\n\n        status = rollupConfigInfo[_rollupConfig].status;\n\n        if (rollupConfigInfo[_rollupConfig].status == 1) {\n\n            address l1Bridge_ = IOptimismSystemConfig(_rollupConfig).l1StandardBridge();\n\n            if (l1Bridge_ != address(0)) {\n                if (_type == 1 || _type == 2) l2Ton = IL1BridgeRegistry(l1BridgeRegistry).l2TON(_rollupConfig);\n\n                if (l2Ton != address(0)) {\n                    result = true;\n                    l1Bridge = l1Bridge_;\n                }\n            }\n\n            if (_type == 2) {\n                address portal_ = IOptimismSystemConfig(_rollupConfig).optimismPortal();\n\n                if (portal_ == address(0)) result = false;\n                else portal = portal_;\n            }\n        }\n    }\n\n\n    /* ========== internal ========== */\n\n    function _nonZeroAddress(address _addr) internal pure {\n        if(_addr == address(0)) revert ZeroAddressError();\n    }\n\n    function _registerCandidateAddOn(\n        address _rollupConfig,\n        uint256 _wtonAmount,\n        string calldata _memo\n    ) internal  {\n        address operator = IOperatorManagerFactory(operatorManagerFactory).createOperatorManager(_rollupConfig);\n\n        if (operator == address(0)) revert RegisterError(1);\n        if (operatorInfo[operator].rollupConfig != address(0)) revert RegisterError(2);\n        address candidateAddOn = IIDAOCommittee(dao).createCandidateAddOn(_memo, operator);\n        operatorInfo[operator] = CandidateAddOnInfo({\n            rollupConfig: _rollupConfig,\n            candidateAddOn : candidateAddOn\n        });\n\n        rollupConfigInfo[_rollupConfig] = SeqSeigStatus({\n            status: 1,\n            operatorManager: operator\n        });\n\n        emit RegisteredCandidateAddOn(_rollupConfig, _wtonAmount, _memo, operator, candidateAddOn);\n\n        if (IERC20(wton).allowance(address(this), depositManager) < _wtonAmount) IERC20(wton).approve(depositManager, type(uint256).max);\n        if (!IIDepositManager(depositManager).deposit(candidateAddOn, operator, _wtonAmount)) revert RegisterError(3);\n\n    }\n\n    function _availableRegister(address _rollupConfig) internal view returns (bool result, uint256 amount) {\n\n        (uint8 _type,,,, ) = IL1BridgeRegistry(l1BridgeRegistry).getRollupInfo(_rollupConfig);\n        // if (bytes32(bytes(_name)) != bytes32((bytes(name_)))) return (false, 0);  /// It must be the same as the name registered in l1BridgeRegister.\n\n        if (_type == 1) { // optimism legacy : titan\n\n            address l1Bridge = IOptimismSystemConfig(_rollupConfig).l1StandardBridge();\n            if (l1Bridge != address(0)) {\n                amount = IERC20(ton).balanceOf(l1Bridge);\n                result = true;\n            }\n\n        } else if (_type == 2) { // optimism bedrock native TON: thanos, on-demand-l2\n\n            address l1Bridge = IOptimismSystemConfig(_rollupConfig).l1StandardBridge();\n            address optimismPortal = IOptimismSystemConfig(_rollupConfig).optimismPortal();\n            if (optimismPortal != address(0) && l1Bridge != address(0) ) {\n                amount = IERC20(ton).balanceOf(optimismPortal);\n                result = true;\n            }\n        }\n    }\n\n    function _checkLayer2TVL(address _rollupConfig) internal view returns (bool result, uint256 amount) {\n\n        uint8 _type = IL1BridgeRegistry(l1BridgeRegistry).rollupType(_rollupConfig);\n\n        if (_type == 1) { // optimism legacy : titan\n\n            address l1Bridge = IOptimismSystemConfig(_rollupConfig).l1StandardBridge();\n            if (l1Bridge != address(0)) {\n                amount = IERC20(ton).balanceOf(l1Bridge);\n                result = true;\n            }\n\n        } else if (_type == 2) { // optimism bedrock native TON: thanos, on-demand-l2\n            address optimismPortal = IOptimismSystemConfig(_rollupConfig).optimismPortal();\n            if (optimismPortal != address(0)) {\n                amount = IERC20(ton).balanceOf(optimismPortal);\n                result = true;\n            }\n        }\n    }\n\n    function _transferDepositAmount(\n        address sender,\n        address _rollupConfig,\n        uint256 amount,\n        bool flagTon,\n        string calldata memo\n    ) internal {\n        address _wton = wton;\n\n        if (flagTon) { // with ton\n            address _ton = ton;\n\n            if (amount < minimumInitialDepositAmount) revert RegisterError(6);\n            IERC20(_ton).safeTransferFrom(sender, address(this), amount);\n            if (IERC20(_ton).allowance(address(this), _wton) < amount) IERC20(_ton).approve(_wton, type(uint256).max);\n            if (!IWTON(_wton).swapFromTON(amount)) revert RegisterError(7);\n            _registerCandidateAddOn(_rollupConfig, amount*1e9, memo);\n\n        } else { // with wton\n\n            if ((amount / 1e9) < minimumInitialDepositAmount) revert RegisterError(6);\n            IERC20(_wton).safeTransferFrom(sender, address(this), amount);\n            _registerCandidateAddOn(_rollupConfig, amount, memo);\n\n        }\n    }\n\n}"
    },
    "contracts/libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.7.5;\n\nimport { IERC20 } from  \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\n/// Taken from Solmate\nlibrary SafeERC20 {\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"APPROVE_FAILED\");\n    }\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        (bool success, ) = to.call{value: amount}(new bytes(0));\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n}\n"
    },
    "contracts/proxy/ProxyStorage.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\ncontract ProxyStorage  {\n\n    bool public pauseProxy;\n\n    mapping(uint256 => address) public proxyImplementation;\n    mapping(address => bool) public aliveImplementation;\n    mapping(bytes4 => address) public selectorImplementation;\n\n}"
    }
  }
}}