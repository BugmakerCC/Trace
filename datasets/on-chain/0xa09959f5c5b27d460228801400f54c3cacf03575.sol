{"4_agtprotocol.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.2;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./Pausable.sol\";\r\n\r\n/**\r\n * @title ERC20 Token\r\n * @dev Implementation of the basic ERC-20 standard token with burn and mint functions.\r\n */\r\ncontract ERC20 is IERC20, Ownable, Pausable {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public override totalSupply;\r\n\r\n    mapping (address =\u003e uint256) internal _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) internal _allowed;\r\n    mapping (address =\u003e bool) public pausedAccounts;\r\n\r\n    event MyTransfer(address indexed from, address indexed to, uint256 value);\r\n    event MyApproval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Constructor that gives msg.sender all of existing tokens.\r\n     * @param _name The name of the token.\r\n     * @param _symbol The symbol of the token.\r\n     * @param _decimals The number of decimals of the token.\r\n     * @param _totalSupply The total supply of the token.\r\n     */\r\n    constructor (\r\n        string memory _name, \r\n        string memory _symbol, \r\n        uint8 _decimals, \r\n        uint256 _totalSupply\r\n    ) {\r\n        symbol = _symbol;\r\n        name = _name;\r\n        decimals = _decimals;\r\n        totalSupply = _totalSupply;\r\n        _balances[msg.sender] = _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified address.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function transfer(\r\n        address _to, \r\n        uint256 _value\r\n    ) external override whenNotPaused returns (bool) {\r\n        require(_to != address(0), \u0027ERC20: to address is not valid\u0027);\r\n        require(_value \u003c= _balances[msg.sender], \u0027ERC20: insufficient balance\u0027);\r\n        require(!pausedAccounts[msg.sender], \u0027ERC20: sender account is paused\u0027);\r\n\r\n        _balances[msg.sender] = _balances[msg.sender] - _value;\r\n        _balances[_to] = _balances[_to] + _value;\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the balance of.\r\n    * @return balance An uint256 representing the balance\r\n    */\r\n   function balanceOf(\r\n       address _owner\r\n    ) external override view returns (uint256 balance) {\r\n        return _balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function approve(\r\n       address _spender, \r\n       uint256 _value\r\n    ) external override whenNotPaused returns (bool) {\r\n        _allowed[msg.sender][_spender] = _value;\r\n        require(!pausedAccounts[msg.sender], \u0027ERC20: sender account is paused\u0027);\r\n        emit Approval(msg.sender, _spender, _value);\r\n        \r\n        return true;\r\n   }\r\n\r\n      /**\r\n    * @dev Transfer tokens from one address to another.\r\n    * @param _from The address which you want to send tokens from.\r\n    * @param _to The address which you want to transfer to.\r\n    * @param _value The amount of tokens to be transferred.\r\n    * @return A boolean that indicates if the operation was successful\r\n    */\r\n   function transferFrom(\r\n        address _from, \r\n        address _to, \r\n        uint256 _value\r\n    ) external override whenNotPaused returns (bool) {\r\n        require(_from != address(0), \u0027ERC20: from address is not valid\u0027);\r\n        require(_to != address(0), \u0027ERC20: to address is not valid\u0027);\r\n        require(_value \u003c= _balances[_from], \u0027ERC20: insufficient balance\u0027);\r\n        require(_value \u003c= _allowed[_from][msg.sender], \u0027ERC20: transfer from value not allowed\u0027);\r\n        require(!pausedAccounts[_from], \u0027ERC20: from account is paused\u0027);\r\n\r\n        _allowed[_from][msg.sender] = _allowed[_from][msg.sender] - _value;\r\n        _balances[_from] = _balances[_from] - _value;\r\n        _balances[_to] = _balances[_to] + _value;\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        \r\n        return true;\r\n   }\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens approved by the owner that can be transferred to the spender\u0027s account.\r\n     * @param _owner The address of the owner of the tokens.\r\n     * @param _spender The address of the spender.\r\n     * @return The number of tokens approved.\r\n     */\r\n    function allowance(\r\n        address _owner, \r\n        address _spender\r\n    ) external override view whenNotPaused returns (uint256) {\r\n        return _allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increases the amount of tokens that an owner has allowed to a spender.\r\n     * @param _spender The address of the spender.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     * @return A boolean value indicating whether the operation succeeded.\r\n     */\r\n    function increaseApproval(\r\n        address _spender, \r\n        uint256 _addedValue\r\n    ) external whenNotPaused returns (bool) {\r\n        _allowed[msg.sender][_spender] = _allowed[msg.sender][_spender] + _addedValue;\r\n\r\n        emit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decreases the amount of tokens that an owner has allowed to a spender.\r\n     * @param _spender The address of the spender.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     * @return A boolean value indicating whether the operation succeeded.\r\n     */\r\n    function decreaseApproval(\r\n        address _spender, \r\n        uint256 _subtractedValue\r\n    ) external whenNotPaused returns (bool) {\r\n        uint256 oldValue = _allowed[msg.sender][_spender];\r\n        \r\n        if (_subtractedValue \u003e oldValue) {\r\n            _allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            _allowed[msg.sender][_spender] = oldValue - _subtractedValue;\r\n        }\r\n        \r\n        emit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\r\n        \r\n        return true;\r\n   }\r\n\r\n    /**\r\n     * @dev Creates new tokens and assigns them to an address.\r\n     * @param _to The address to which the tokens will be minted.\r\n     * @param _amount The amount of tokens to be minted.\r\n     * @return A boolean value indicating whether the operation succeeded.\r\n     */\r\n    function mintTo(\r\n        address _to,\r\n        uint256 _amount\r\n    ) external whenNotPaused onlyOwner returns (bool) {\r\n        require(_to != address(0), \u0027ERC20: to address is not valid\u0027);\r\n\r\n        _balances[_to] = _balances[_to] + _amount;\r\n        totalSupply = totalSupply + _amount;\r\n\r\n        emit Transfer(address(0), _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burn tokens from the sender\u0027s account.\r\n     * @param _amount The amount of tokens to burn.\r\n     * @return A boolean indicating whether the operation succeeded.\r\n     */\r\n    function burn(\r\n        uint256 _amount\r\n    ) external whenNotPaused returns (bool) {\r\n        require(_balances[msg.sender] \u003e= _amount, \u0027ERC20: insufficient balance\u0027);\r\n\r\n        _balances[msg.sender] = _balances[msg.sender] - _amount;\r\n        totalSupply = totalSupply - _amount;\r\n\r\n        emit Transfer(msg.sender, address(0), _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burn tokens from a specified account, subject to allowance.\r\n     * @param _from The address whose tokens will be burned.\r\n     * @param _amount The amount of tokens to burn.\r\n     * @return A boolean indicating whether the operation succeeded.\r\n     */\r\n    function burnFrom(\r\n        address _from,\r\n        uint256 _amount\r\n    ) external whenNotPaused returns (bool) {\r\n        require(_from != address(0), \u0027ERC20: from address is not valid\u0027);\r\n        require(_balances[_from] \u003e= _amount, \u0027ERC20: insufficient balance\u0027);\r\n        require(_amount \u003c= _allowed[_from][msg.sender], \u0027ERC20: burn from value not allowed\u0027);\r\n        \r\n        _allowed[_from][msg.sender] = _allowed[_from][msg.sender] - _amount;\r\n        _balances[_from] = _balances[_from] - _amount;\r\n        totalSupply = totalSupply - _amount;\r\n\r\n        emit Transfer(_from, address(0), _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function puaseAccount(address account) external onlyOwner {\r\n        pausedAccounts[account] = true;\r\n    }\r\n\r\n    function unpauseAccount(address account) external onlyOwner {\r\n        pausedAccounts[account] = false;\r\n    }\r\n\r\n    function isAccountPaused(address account) public view returns (bool) {\r\n        return pausedAccounts[account];\r\n}\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.2;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}"},"Ownable.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.2;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n  address private owner;\r\n\r\n  event NewOwner(address oldOwner, address newOwner);\r\n\r\n  /**\r\n   * @dev Sets the original owner of the contract to the sender account.\r\n   */\r\n  constructor() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the current owner of the contract.\r\n   * @return An address representing the current owner of the contract.\r\n   */\r\n  function contractOwner() external view returns (address) {\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if the caller is the owner of the contract.\r\n   * @return A bool indicating whether the caller is the owner or not.\r\n   */\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`_newOwner`).\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) external onlyOwner {\r\n    require(_newOwner != address(0), \u0027Ownable: address is not valid\u0027);\r\n    owner = _newOwner;\r\n    emit NewOwner(msg.sender, _newOwner);\r\n  } \r\n}"},"Pausable.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.2;\r\n\r\nimport \"./Ownable.sol\";\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract that can be paused by the owner to stop all normal functionality.\r\n */\r\ncontract Pausable is Ownable {\r\n\r\n    bool private _paused;\r\n\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() external view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the owner to pause, triggers stopped state.\r\n     */\r\n    function pause() external onlyOwner whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the owner to unpause, returns to normal state.\r\n     */\r\n    function unpause() external onlyOwner whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}"}}