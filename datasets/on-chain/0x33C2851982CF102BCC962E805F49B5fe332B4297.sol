{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "src/Interfaces/Errors.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nerror BaseStakingPool_addRewardDistributor__RewardDistributorIsZeroAddress();\nerror BaseStakingPool_addRewardDistributor__RewardDistributorAlreadyExist();\nerror BaseStakingPool_initialize__StakingTokenIsZeroAddress();\nerror BaseStakingPool_removeRewardDistributor__RewardDistributorDoesNotExist();\nerror BaseStakingPool_stake__StakeAmountIsZero();\nerror BaseStakingPool_withdraw__WithdrawAmountIsZero();\n\nerror BLPStakingPool_setRewardDistributorManager__InvalidRewardDistributorManager();\n\nerror BLPReward_initialize__StakingTokenIsZeroAddress();\nerror BLPReward_initialize__RewardTokenIsZeroAddress();\nerror BLPReward_initialize__TreasuryIsZeroAddress();\nerror BLPReward_setTreasury__TreasuryIsZeroAddress();\nerror BLPReward_setTreasury__SameTreasuryAddress();\n\nerror EligibilityManager_addBLPStakingPoolInternal__InvalidStakingPool(\n    address stakingPool\n);\nerror EligibilityManager_addBLPStakingPoolInternal__StakingPoolAlreadyExist(\n    address stakingPool\n);\nerror EligibilityManager_addValidSupplyInternal__InvalidSupply(address iToken);\nerror EligibilityManager_addValidSupplyInternal__ValidSupplyAlreadyExist(\n    address iToken\n);\nerror EligibilityManager_initialize__InvalidController();\nerror EligibilityManager_removeValidSupplyInternal__ValidSupplyDoesNotExist(\n    address iToken\n);\nerror EligibilityManager_removeBLPStakingPoolInternal__StakingPoolDoesNotExist(\n    address stakingPool\n);\n\n// Modifier error\nerror RewardDistributorManager__NotController();\n// Function errors\nerror RewardDistributorManager_addRewardDistributorInternal__InvalidRewardDistributor();\nerror RewardDistributorManager_addRewardDistributorInternal__RewardDistributorAlreadyExist(\n    address rewardDistributor\n);\nerror RewardDistributorManager_initialize__InvalidController();\nerror RewardDistributorManager_removeRewardDistributorInternal__RewardDistributorDoesNotExist(\n    address rewardDistributor\n);\nerror RewardDistributorManager_setEligibilityManager_InvalidEligibilityManager();\nerror RewardDistributorManager_updateEligibleBalance__InvalidEligibility();\n\nerror RewardDistributor__CallerIsNotRewardManager();\nerror RewardDistributor__ContractPaused();\nerror RewardDistributor_initialize__InvalidController();\nerror RewardDistributor_initialize__InvalidRewardDistributorManager();\nerror RewardDistributor_rescueTokens__CallerIsNotTreasury();\nerror RewardDistributor_setRewardToken__InvalidRewardToken();\nerror RewardDistributor_setTreasury__InvalidTreasury();\nerror RewardDistributor_setDistributionBorrowSpeedsInternal__ArrayLengthMismatch();\nerror RewardDistributor_setDistributionSupplySpeedsInternal__ArrayLengthMismatch();\nerror RewardDistributor_setDistributionBorrowSpeed__TokenHasNotBeenListed(\n    address iToken\n);\nerror RewardDistributor_setDistributionSupplySpeed__TokenHasNotBeenListed(\n    address iToken\n);\nerror RewardDistributor_updateDistributionState__TokenHasNotBeenListed(\n    address iToken\n);\nerror RewardDistributor_updateReward__TokenHasNotBeenListed(address iToken);\nerror RewardDistributor_updateReward__AccountIsZeroAddress();\nerror RewardDistributor_setBountyRatio__RatioTooHigh();\n"
    },
    "src/Interfaces/IController.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\npragma experimental ABIEncoderV2;\n\ninterface IController {\n    /**\n     * @notice Security checks when updating the comptroller of a market, always expect to return true.\n     */\n    function isController() external view returns (bool);\n\n    /**\n     * @notice Return all of the iTokens\n     * @return The list of iToken addresses\n     */\n    function getAlliTokens() external view returns (address[] memory);\n\n    /**\n     * @notice Check whether a iToken is listed in controller\n     * @param _iToken The iToken to check for\n     * @return true if the iToken is listed otherwise false\n     */\n    function hasiToken(address _iToken) external view returns (bool);\n\n    function priceOracle() external view returns (address);\n    function rewardDistributor() external view returns (address);\n\n    function owner() external view returns (address);\n    function _setRewardDistributor(address _rewardDistributor) external;\n}\n"
    },
    "src/Interfaces/IEligibilityManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ninterface IEligibilityManager {\n    function isEligibilityManager() external pure returns (bool);\n    function isEligible(address _account) external returns (bool, bool);\n    function hasBLPStakingPool(address _stakingPool) external view returns (bool);\n}\n"
    },
    "src/Interfaces/IRewardDistributor.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"./IController.sol\";\n\ninterface IRewardDistributor {\n    function isRewardDistributor() external view returns (bool);\n\n    function controller() external view returns (IController);\n\n    function rewardToken() external returns (address);\n\n    function _setRewardToken(address newRewardToken) external;\n\n    /// @notice Emitted reward token address is changed by admin\n    event NewRewardToken(address oldRewardToken, address newRewardToken);\n\n    function treasury() external returns (address);\n\n    function _setTreasury(address newTreasury) external;\n\n    /// @notice Emitted treasury address is changed by admin\n    event NewTreasury(address oldTreasury, address newTreasury);\n\n    function _addRecipient(\n        address _iToken,\n        uint256 _distributionFactor\n    ) external;\n\n    event NewRecipient(address iToken, uint256 distributionFactor);\n\n    /// @notice Emitted when mint is paused/unpaused by admin\n    event PausedChanged(bool paused, uint256 timestamp);\n\n    function _pause() external;\n\n    function _unpause(\n        address[] calldata _borrowiTokens,\n        uint256[] calldata _borrowSpeeds,\n        address[] calldata _supplyiTokens,\n        uint256[] calldata _supplySpeeds\n    ) external;\n\n    /// @notice Emitted when Global Distribution speed for both supply and borrow are updated\n    event GlobalDistributionSpeedsChanged(\n        uint256 borrowSpeed,\n        uint256 supplySpeed,\n        uint256 timestamp\n    );\n\n    /// @notice Emitted when iToken's Distribution borrow speed is updated\n    event DistributionBorrowSpeedChanged(\n        address iToken,\n        uint256 borrowSpeed,\n        uint256 timestamp\n    );\n\n    /// @notice Emitted when iToken's Distribution supply speed is updated\n    event DistributionSupplySpeedChanged(\n        address iToken,\n        uint256 supplySpeed,\n        uint256 timestamp\n    );\n\n    /// @notice Emitted when iToken's Distribution factor is changed by admin\n    event NewDistributionFactor(\n        address iToken,\n        uint256 oldDistributionFactorMantissa,\n        uint256 newDistributionFactorMantissa\n    );\n\n    /// @notice Emitted when bounty ratio is changed by admin\n    event NewBountyRatio(uint256 oldBountyRatio, uint256 newBountyRatio);\n\n    function updateDistributionState(address _iToken, bool _isBorrow) external;\n\n    function updateReward(\n        address _iToken,\n        address _account,\n        bool _isBorrow\n    ) external;\n\n    function updateRewardBatch(\n        address[] memory _holders,\n        address[] memory _iTokens\n    ) external;\n\n    function claimReward(\n        address[] memory _holders,\n        address[] memory _iTokens\n    ) external;\n\n    function claimAllReward(address[] memory _holders) external;\n\n    function claimRewards(\n        address[] memory _holders,\n        address[] memory _suppliediTokens,\n        address[] memory _borrowediTokens\n    ) external;\n\n    /// @notice Emitted when reward of amount is distributed into account\n    event RewardDistributed(\n        address iToken,\n        address account,\n        uint256 amount,\n        uint256 accountIndex\n    );\n\n    function claimBounty(address _account, address _hunter) external;\n\n    /// @notice Emitted when bounty is claimed by a hunter\n    event BountyClaimed(\n        address rewardToken,\n        address hunter,\n        address account,\n        uint256 bounty,\n        uint256 reward\n    );\n}\n"
    },
    "src/Interfaces/IiToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ninterface IiToken {\n    function name() external view returns (string calldata);\n\n    function decimals() external view returns (uint8);\n\n    function balanceOf(address _user) external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function isiToken() external returns (bool);\n\n    function borrowBalanceStored(address _user) external view returns (uint256);\n\n    function borrowIndex() external view returns (uint256);\n\n    function totalBorrows() external view returns (uint256);\n\n    function balanceOfUnderlying(address _account) external returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function borrowSnapshot(\n        address _account\n    ) external view returns (uint256, uint256);\n\n    function mint(\n        address _to,\n        uint256 _amount,\n        bool _refreshEligibility\n    ) external;\n\n    function redeem(\n        address _from,\n        uint256 _redeemiToken,\n        bool refreshEligibility\n    ) external;\n\n    function redeemUnderlying(\n        address _from,\n        uint256 _redeemiToken,\n        bool refreshEligibility\n    ) external;\n\n    function borrow(uint256 _borrowAmount, bool refreshEligibility) external;\n\n    function repayBorrow(\n        uint256 _repayAmount,\n        bool refreshEligibility\n    ) external;\n\n    function repayBorrowBehalf(\n        address _borrower,\n        uint256 _repayAmount,\n        bool refreshEligibility\n    ) external;\n\n    function liquidateBorrow(\n        address _borrower,\n        uint256 _repayAmount,\n        address _assetCollateral,\n        bool refreshEligibility\n    ) external;\n\n    function transfer(address recipient, uint256 amount) external;\n\n    function mintForSelfAndEnterMarket(\n        uint256 _mintAmount,\n        bool refreshEligibility\n    ) external;\n\n    function redeemFromSelfAndExitMarket(\n        uint256 _redeemiToken,\n        bool refreshEligibility\n    ) external;\n}\n"
    },
    "src/Libraries/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(\n            !_initialized,\n            \"Initializable: contract is already initialized\"\n        );\n\n        _;\n\n        _initialized = true;\n    }\n}\n"
    },
    "src/Libraries/Ownable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {_setPendingOwner} and {_acceptOwner}.\n */\ncontract Ownable {\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    address payable public owner;\n\n    /**\n     * @dev Returns the address of the current pending owner.\n     */\n    address payable public pendingOwner;\n\n    event NewOwner(address indexed previousOwner, address indexed newOwner);\n    event NewPendingOwner(\n        address indexed oldPendingOwner,\n        address indexed newPendingOwner\n    );\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"onlyOwner: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal {\n        owner = payable(msg.sender);\n        emit NewOwner(address(0), msg.sender);\n    }\n\n    /**\n     * @notice Base on the inputing parameter `newPendingOwner` to check the exact error reason.\n     * @dev Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.\n     * @param newPendingOwner New pending owner.\n     */\n    function _setPendingOwner(\n        address payable newPendingOwner\n    ) external onlyOwner {\n        require(\n            newPendingOwner != address(0) && newPendingOwner != pendingOwner,\n            \"_setPendingOwner: New owenr can not be zero address and owner has been set!\"\n        );\n\n        // Gets current owner.\n        address oldPendingOwner = pendingOwner;\n\n        // Sets new pending owner.\n        pendingOwner = newPendingOwner;\n\n        emit NewPendingOwner(oldPendingOwner, newPendingOwner);\n    }\n\n    /**\n     * @dev Accepts the admin rights, but only for pendingOwenr.\n     */\n    function _acceptOwner() external {\n        require(\n            msg.sender == pendingOwner,\n            \"_acceptOwner: Only for pending owner!\"\n        );\n\n        // Gets current values for events.\n        address oldOwner = owner;\n        address oldPendingOwner = pendingOwner;\n\n        // Set the new contract owner.\n        owner = pendingOwner;\n\n        // Clear the pendingOwner.\n        pendingOwner = payable(address(0));\n\n        emit NewOwner(oldOwner, owner);\n        emit NewPendingOwner(oldPendingOwner, pendingOwner);\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "src/Libraries/RatioMath.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nlibrary RatioMath {\n    uint256 private constant BASE = 10 ** 18;\n    uint256 private constant DOUBLE = 10 ** 36;\n\n    function divup(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = (x + (y - 1)) / y;\n    }\n\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = (x * y) / BASE;\n    }\n\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = (x * BASE) / y;\n    }\n\n    function rdivup(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = (x * (BASE) + (y - 1)) / y;\n    }\n}\n"
    },
    "src/RewardDistributorManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"./Libraries/RatioMath.sol\";\n\nimport \"./Libraries/Ownable.sol\";\nimport \"./Libraries/Initializable.sol\";\nimport \"./Interfaces/IRewardDistributor.sol\";\nimport \"./Interfaces/IController.sol\";\nimport \"./Interfaces/IEligibilityManager.sol\";\nimport \"./Interfaces/IiToken.sol\";\nimport \"./Interfaces/Errors.sol\";\n\ncontract RewardDistributorManager is Initializable, Ownable {\n    using RatioMath for uint256;\n    using SafeCast for uint256;\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    EnumerableSetUpgradeable.AddressSet internal rewardDistributors;\n    IController public controller;\n\n    /// @notice the Eligibility Manager address where to query the eligibility of accounts\n    IEligibilityManager public eligibilityManager;\n\n    /// @notice the Elibility of each accounts\n    mapping(address => bool) public isEligible;\n\n    /// @notice the Eligible Total Supply of each iToken\n    mapping(address => uint256) public eligibleTotalSupply;\n\n    /// @notice the Eligible Total Borrow Balance of each iToken\n    mapping(address => uint256) public eligibleTotalBorrow;\n\n    /// @notice Emitted Eligible Total Supply changed\n    event EligibleTotalSupplyChanged(address indexed iToken, int256 amount);\n    /// @notice Emitted Eligible Total Borrow changed\n    event EligibleTotalBorrowChanged(address indexed iToken, int256 amount);\n\n    /// @notice Emitted Eligibility Manager address is changed by admin\n    event NewEligibilityManager(\n        address oldEligibilityManager,\n        address newEligibilityManager\n    );\n\n    event AddRewardDistributor(address indexed _newRewardDistributor);\n    event RemoveRewardDistributor(address indexed _oldRewardDistributor);\n\n    /// @notice Emitted Eligibility is changed\n    event EligibilityChanged(address indexed account, bool eligibility);\n\n    constructor(IController _controller) {\n        initialize(_controller);\n    }\n\n    function initialize(IController _controller) public initializer {\n        __Ownable_init();\n\n        if (!_controller.isController()) {\n            revert RewardDistributorManager_initialize__InvalidController();\n        }\n        controller = _controller;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the controller.\n     */\n    modifier onlyController() {\n        if (msg.sender != address(controller)) {\n            revert RewardDistributorManager__NotController();\n        }\n        _;\n    }\n\n    /*********************************/\n    /******** Security Check *********/\n    /*********************************/\n\n    /**\n     * @notice Ensure this is a RewardDistributorManager contract.\n     */\n    function isRewardDistributorManager() external pure returns (bool) {\n        return true;\n    }\n\n    /**\n     * @notice set new eligibility manager address\n     * @dev Admin function, only owner can call this\n     * @param _newEligibilityManager the address of treasury\n     */\n    function _setEligibilityManager(\n        IEligibilityManager _newEligibilityManager\n    ) external onlyOwner {\n        address _oldEligibilityManager = address(eligibilityManager);\n        if (\n            !IEligibilityManager(_newEligibilityManager)\n                .isEligibilityManager() ||\n            address(_newEligibilityManager) == _oldEligibilityManager\n        ) {\n            revert RewardDistributorManager_setEligibilityManager_InvalidEligibilityManager();\n        }\n\n        eligibilityManager = IEligibilityManager(_newEligibilityManager);\n        emit NewEligibilityManager(\n            _oldEligibilityManager,\n            address(_newEligibilityManager)\n        );\n    }\n\n    function _addRewardDistributorInternal(\n        address _rewardDistributor\n    ) internal {\n        if (!IRewardDistributor(_rewardDistributor).isRewardDistributor()) {\n            revert RewardDistributorManager_addRewardDistributorInternal__InvalidRewardDistributor();\n        }\n\n        if (rewardDistributors.add(_rewardDistributor)) {\n            emit AddRewardDistributor(_rewardDistributor);\n        } else {\n            revert RewardDistributorManager_addRewardDistributorInternal__RewardDistributorAlreadyExist(\n                _rewardDistributor\n            );\n        }\n    }\n\n    function _addRewardDistributor(\n        address _rewardDistributor\n    ) external onlyOwner {\n        _addRewardDistributorInternal(_rewardDistributor);\n    }\n\n    function _addRewardDistributors(\n        address[] calldata _rewardDistributors\n    ) external onlyOwner {\n        uint256 _length = _rewardDistributors.length;\n        for (uint256 _i; _i < _length; ) {\n            _addRewardDistributorInternal(_rewardDistributors[_i]);\n\n            unchecked {\n                ++_i;\n            }\n        }\n    }\n\n    function _removeRewardDistributorInternal(\n        address _rewardDistributor\n    ) internal {\n        if (rewardDistributors.remove(_rewardDistributor)) {\n            emit RemoveRewardDistributor(_rewardDistributor);\n        } else {\n            revert RewardDistributorManager_removeRewardDistributorInternal__RewardDistributorDoesNotExist(\n                _rewardDistributor\n            );\n        }\n    }\n\n    function _removeRewardDistributor(\n        address _rewardDistributor\n    ) external onlyOwner {\n        _removeRewardDistributorInternal(_rewardDistributor);\n    }\n\n    function _removeRewardDistributors(\n        address[] calldata _rewardDistributors\n    ) external onlyOwner {\n        uint256 _length = _rewardDistributors.length;\n        for (uint256 _i; _i < _length; ) {\n            _removeRewardDistributorInternal(_rewardDistributors[_i]);\n\n            unchecked {\n                ++_i;\n            }\n        }\n    }\n\n    function getRewardDistributors() external view returns (address[] memory) {\n        return rewardDistributors.values();\n    }\n\n    function getRewardDistributorsLength() external view returns (uint256) {\n        return rewardDistributors.length();\n    }\n\n    function updateReward(\n        address _iToken,\n        address _account,\n        bool _isBorrow\n    ) public {\n        uint256 _length = rewardDistributors.length();\n\n        for (uint256 _i; _i < _length; ) {\n            IRewardDistributor(rewardDistributors.at(_i)).updateReward(\n                _iToken,\n                _account,\n                _isBorrow\n            );\n\n            unchecked {\n                ++_i;\n            }\n        }\n    }\n\n    function updateDistributionState(address _iToken, bool _isBorrow) public {\n        uint256 _length = rewardDistributors.length();\n        for (uint256 _i; _i < _length; ) {\n            IRewardDistributor(rewardDistributors.at(_i))\n                .updateDistributionState(_iToken, _isBorrow);\n\n            unchecked {\n                ++_i;\n            }\n        }\n    }\n\n    function claimReward(\n        address[] memory _holders,\n        address[] memory _iTokens\n    ) external {\n        uint256 _length = rewardDistributors.length();\n        for (uint256 _i; _i < _length; ) {\n            IRewardDistributor(rewardDistributors.at(_i)).claimReward(\n                _holders,\n                _iTokens\n            );\n\n            unchecked {\n                ++_i;\n            }\n        }\n\n        updateEligibleBalances(_holders);\n    }\n\n    /**\n     * @notice Claim reward accrued in iTokens by the holders\n     * @param _holders The account to claim for\n     * @param _suppliediTokens The _suppliediTokens to claim from\n     * @param _borrowediTokens The _borrowediTokens to claim from\n     */\n    function claimRewards(\n        address[] memory _holders,\n        address[] memory _suppliediTokens,\n        address[] memory _borrowediTokens\n    ) external {\n        uint256 _length = rewardDistributors.length();\n        for (uint256 _i; _i < _length; ) {\n            IRewardDistributor(rewardDistributors.at(_i)).claimRewards(\n                _holders,\n                _suppliediTokens,\n                _borrowediTokens\n            );\n\n            unchecked {\n                ++_i;\n            }\n        }\n\n        updateEligibleBalances(_holders);\n    }\n\n    /**\n     * @notice Claim reward accrued in all iTokens by the holders\n     * @param _holders The account to claim for\n     */\n    function claimAllReward(address[] memory _holders) external {\n        uint256 _length = rewardDistributors.length();\n        for (uint256 _i; _i < _length; ) {\n            IRewardDistributor(rewardDistributors.at(_i)).claimAllReward(\n                _holders\n            );\n\n            unchecked {\n                ++_i;\n            }\n        }\n\n        updateEligibleBalances(_holders);\n    }\n\n    function _addRecipient(\n        address /* _iToken */,\n        uint256 /* _distributionFactor*/\n    ) external onlyController {}\n\n    function eligibleSupply(\n        address _iToken,\n        address _account\n    ) public view returns (uint256 _eligibleSupply) {\n        if (isEligible[_account]) {\n            _eligibleSupply = IiToken(_iToken).balanceOf(_account);\n        }\n    }\n\n    function eligibleBorrow(\n        address _iToken,\n        address _account\n    ) public view returns (uint256 _eligibleBorrow) {\n        if (isEligible[_account]) {\n            (uint256 _borrowBalance, uint256 _borrowIndex) = IiToken(_iToken)\n                .borrowSnapshot(_account);\n            _eligibleBorrow = _borrowIndex > 0\n                ? _borrowBalance.rdiv(_borrowIndex)\n                : 0;\n        }\n    }\n\n    /**\n     * @notice Hook function after iToken `mint()`\n     * Will `revert()` if any operation fails\n     * @param _iToken The iToken being minted\n     * @param _minter The account which would get the minted tokens\n     * @param _mintedAmount The amount of iToken being minted\n     */\n    function afterMint(\n        address _iToken,\n        address _minter,\n        uint256 /* _mintAmount */,\n        uint256 _mintedAmount\n    ) external onlyController {\n        if (isEligible[_minter]) {\n            eligibleTotalSupply[_iToken] += _mintedAmount;\n            emit EligibleTotalSupplyChanged(_iToken, _mintedAmount.toInt256());\n        }\n    }\n\n    /**\n     * @notice Hook function after iToken `redeem()`\n     * Will `revert()` if any operation fails\n     * @param _iToken The iToken being redeemed\n     * @param _redeemer The account which redeemed iToken\n     * @param _redeemAmount  The amount of iToken being redeemed\n     */\n    function afterRedeem(\n        address _iToken,\n        address _redeemer,\n        uint256 _redeemAmount,\n        uint256 /* _redeemedUnderlying */\n    ) external onlyController {\n        if (isEligible[_redeemer]) {\n            eligibleTotalSupply[_iToken] -= _redeemAmount;\n            emit EligibleTotalSupplyChanged(\n                _iToken,\n                -(_redeemAmount.toInt256())\n            );\n        }\n    }\n\n    /**\n     * @notice Hook function after iToken `borrow()`\n     * Will `revert()` if any operation fails\n     * @param _iToken The iToken being borrewd\n     * @param _borrower The account which borrowed iToken\n     * @param _borrowedAmount  The amount of underlying being borrowed\n     */\n    function afterBorrow(\n        address _iToken,\n        address _borrower,\n        uint256 _borrowedAmount\n    ) external onlyController {\n        if (isEligible[_borrower]) {\n            uint256 _borrowed = _borrowedAmount.rdiv(\n                IiToken(_iToken).borrowIndex()\n            );\n\n            eligibleTotalBorrow[_iToken] += _borrowed;\n            emit EligibleTotalBorrowChanged(_iToken, _borrowed.toInt256());\n        }\n    }\n\n    /**\n     * @notice Hook function after iToken `repayBorrow()`\n     * Will `revert()` if any operation fails\n     * @param _iToken The iToken being repaid\n     * #param _payer The account which would repay\n     * @param _borrower The account which has borrowed\n     * @param _repayAmount  The amount of underlying being repaied\n     */\n    function afterRepayBorrow(\n        address _iToken,\n        address /* _payer */,\n        address _borrower,\n        uint256 _repayAmount\n    ) external onlyController {\n        if (isEligible[_borrower]) {\n            uint256 _repaid = _repayAmount.rdiv(IiToken(_iToken).borrowIndex());\n\n            if (eligibleTotalBorrow[_iToken] > _repaid) {\n                eligibleTotalBorrow[_iToken] -= _repaid;\n            } else {\n                // Rounding errors could leading to mismatch to sum(borrow) and totalBorrow\n                // Just reset eligibleTotalBorrow\n                _repaid = eligibleTotalBorrow[_iToken];\n                eligibleTotalBorrow[_iToken] = 0;\n            }\n\n            emit EligibleTotalBorrowChanged(_iToken, -(_repaid.toInt256()));\n        }\n    }\n\n    /**\n     * @notice Hook function after iToken `liquidateBorrow()`\n     * Will `revert()` if any operation fails\n     * #param _iTokenBorrowed The iToken was borrowed\n     * #param _iTokenCollateral The collateral iToken to be seized\n     * #param _liquidator The account which would repay and seize\n     * #param _borrower The account which has borrowed\n     * #param _repaidAmount  The amount of underlying being repaied\n     * #param _seizedAmount  The amount of collateral being seized\n     */\n    function afterLiquidateBorrow(\n        address /* _iTokenBorrowed */,\n        address /* _iTokenCollateral */,\n        address /* _liquidator */,\n        address /* _borrower */,\n        uint256 /* _repaidAmount */,\n        uint256 /* _seizedAmount */\n    ) external onlyController {}\n\n    /**\n     * @notice Hook function after iToken `seize()`\n     * Will `revert()` if any operation fails\n     * @param _iTokenCollateral The collateral iToken to be seized\n     * #param _iTokenBorrowed The iToken was borrowed\n     * @param _liquidator The account which has repaid and seized\n     * @param _borrower The account which has borrowed\n     * @param _seizedAmount  The amount of collateral being seized\n     */\n    function afterSeize(\n        address _iTokenCollateral,\n        address /* _iTokenBorrowed */,\n        address _liquidator,\n        address _borrower,\n        uint256 _seizedAmount\n    ) external onlyController {\n        if (isEligible[_borrower]) {\n            eligibleTotalSupply[_iTokenCollateral] -= _seizedAmount;\n            emit EligibleTotalSupplyChanged(\n                _iTokenCollateral,\n                -(_seizedAmount.toInt256())\n            );\n        }\n\n        if (isEligible[_liquidator]) {\n            eligibleTotalSupply[_iTokenCollateral] += _seizedAmount;\n            emit EligibleTotalSupplyChanged(\n                _iTokenCollateral,\n                (_seizedAmount.toInt256())\n            );\n        }\n    }\n\n    /**\n     * @notice Hook function after iToken `transfer()`\n     * Will `revert()` if any operation fails\n     * @param _iToken The iToken was transfered\n     * @param _from The account was transfer from\n     * @param _to The account was transfer to\n     * @param _amount  The amount was transfered\n     */\n    function afterTransfer(\n        address _iToken,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external onlyController {\n        if (isEligible[_from]) {\n            eligibleTotalSupply[_iToken] -= _amount;\n            emit EligibleTotalSupplyChanged(_iToken, -(_amount.toInt256()));\n        }\n\n        if (isEligible[_to]) {\n            eligibleTotalSupply[_iToken] += _amount;\n            emit EligibleTotalSupplyChanged(_iToken, (_amount.toInt256()));\n        }\n    }\n\n    /**\n     * @notice Hook function after iToken `flashloan()`\n     * Will `revert()` if any operation fails\n     * #param _iToken The iToken was flashloaned\n     * #param _to The account flashloan transfer to\n     * #param _amount  The amount was flashloaned\n     */\n    function afterFlashloan(\n        address /* _iToken */,\n        address /* _to */,\n        uint256 /* _amount */\n    ) external onlyController {}\n\n    function _claimBounty(address _account, address _hunter) internal {\n        uint256 _length = rewardDistributors.length();\n        for (uint256 _i; _i < _length; ) {\n            IRewardDistributor(rewardDistributors.at(_i)).claimBounty(\n                _account,\n                _hunter\n            );\n\n            unchecked {\n                ++_i;\n            }\n        }\n    }\n\n    /**\n     * @notice Internal function for updateEligibleBalance(s)\n     * @param _account The _account whose Eligibity will be updated\n     * @param _iTokens The list of iTokens of which eligible balances will be updated\n     */\n    function _updateEligibleBalance(\n        address _account,\n        address[] memory _iTokens,\n        address _hunter\n    ) internal {\n        (bool _currentEligibility, bool status) = IEligibilityManager(\n            eligibilityManager\n        ).isEligible(_account);\n\n        if (!status) {\n            revert RewardDistributorManager_updateEligibleBalance__InvalidEligibility();\n        }\n\n        if (_currentEligibility == isEligible[_account]) return;\n\n        uint256 _length = _iTokens.length;\n        for (uint256 _i; _i < _length; ) {\n            address _iToken = _iTokens[_i];\n\n            uint256 _supply = IiToken(_iToken).balanceOf(_account);\n            (uint256 _borrowBalance, uint256 _borrowIndex) = IiToken(_iToken)\n                .borrowSnapshot(_account);\n            uint256 _borrow = _borrowIndex > 0\n                ? _borrowBalance.rdiv(_borrowIndex)\n                : 0;\n\n            if (_supply != 0) {\n                updateDistributionState(_iToken, false);\n                updateReward(_iToken, _account, false);\n            }\n\n            if (_borrow != 0) {\n                updateDistributionState(_iToken, true);\n                updateReward(_iToken, _account, true);\n            }\n\n            if (_currentEligibility) {\n                // Ineligible => Eligible\n                if (_supply != 0) {\n                    eligibleTotalSupply[_iToken] += _supply;\n\n                    emit EligibleTotalSupplyChanged(\n                        _iToken,\n                        _supply.toInt256()\n                    );\n                }\n\n                if (_borrow != 0) {\n                    eligibleTotalBorrow[_iToken] += _borrow;\n                    emit EligibleTotalBorrowChanged(\n                        _iToken,\n                        _borrow.toInt256()\n                    );\n                }\n            } else {\n                // Eligible => Ineligible\n                if (_supply != 0) {\n                    eligibleTotalSupply[_iToken] -= _supply;\n                    emit EligibleTotalSupplyChanged(\n                        _iToken,\n                        -(_supply.toInt256())\n                    );\n                }\n\n                if (_borrow != 0) {\n                    if (eligibleTotalBorrow[_iToken] > _borrow) {\n                        eligibleTotalBorrow[_iToken] -= _borrow;\n                    } else {\n                        // Rounding errors could leading to mismatch to sum(borrow) and totalBorrow\n                        // Just reset eligibleTotalBorrow\n                        _borrow = eligibleTotalBorrow[_iToken];\n                        eligibleTotalBorrow[_iToken] = 0;\n                    }\n                    emit EligibleTotalBorrowChanged(\n                        _iToken,\n                        -(_borrow.toInt256())\n                    );\n                }\n            }\n\n            unchecked {\n                ++_i;\n            }\n        }\n\n        isEligible[_account] = _currentEligibility;\n        emit EligibilityChanged(_account, _currentEligibility);\n\n        if (!_currentEligibility && _hunter != address(0)) {\n            _claimBounty(_account, _hunter);\n        }\n    }\n\n    function updateEligibleBalance(address _account) external {\n        _updateEligibleBalance(\n            _account,\n            controller.getAlliTokens(),\n            address(0)\n        );\n    }\n\n    function updateEligibleBalances(address[] memory _accounts) public {\n        address[] memory _iTokens = controller.getAlliTokens();\n\n        uint256 _len = _accounts.length;\n        for (uint256 j = 0; j < _len; ) {\n            _updateEligibleBalance(_accounts[j], _iTokens, address(0));\n            unchecked {\n                ++j;\n            }\n        }\n    }\n\n    function claimBounty(address[] calldata _accounts) external {\n        address[] memory _iTokens = controller.getAlliTokens();\n\n        uint256 _len = _accounts.length;\n        for (uint256 j = 0; j < _len; ) {\n            _updateEligibleBalance(_accounts[j], _iTokens, msg.sender);\n\n            unchecked {\n                ++j;\n            }\n        }\n    }\n}\n"
    }
  }
}}