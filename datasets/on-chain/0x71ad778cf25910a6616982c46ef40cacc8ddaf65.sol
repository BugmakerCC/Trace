{{
  "language": "Solidity",
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "remappings": []
  },
  "sources": {
    "contracts/upgrade/AllocationUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"../interfaces/IApNFT.sol\";\nimport \"../libraries/Types.sol\";\n\ncontract AllocationUpgradeable is Initializable, AccessControlUpgradeable, ReentrancyGuardUpgradeable {\n\n    using SafeMath for uint256;\n    using Address for address;\n    using SafeERC20 for IERC20;\n\n    // BASE PERCENT\n    uint public constant BASE_PERCENT = 100;\n    // Inverse basis point\n    uint public constant INVERSE_BASIS_POINT = 10000;\n\n    // max refund limit\n    uint public MAX_REFUND_LIMIT;\n\n    bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\n    bytes32 public constant ASSET_ROLE = keccak256(\"ASSET_ROLE\");\n    bytes32 public constant ALLOCATION_ASSET_ROLE = keccak256(\"ALLOCATION_ASSET_ROLE\");\n\n    // true or false auto mint apNFT\n    bool public autoMintApNFT;\n\n    // Allocation max create limit\n    uint8 public maxAlloctionLimit;\n    // Allcotion roundIDs\n    uint256[] public roundIDs;\n    // groupId => uint256[]\n    mapping (uint256 =>  uint256[])  public groupRoundIDs;\n\n    // roundId => Recive payment address of the project\n    mapping(uint256 => address) public recivedPay;\n    // RoundID=> serialNo => times\n    mapping(uint256 => mapping(uint256 => uint256)) public recivePayTimes;\n    // RoundID=>SendFundraisingLog[]\n    mapping(uint256 => Types.SendFundraisingLog[]) public sendFundraisings;\n    // Project fee\n    uint256 public fee;\n    // Project fee recive address\n    address public feeTo;\n    \n    // roundId => issueToken\n    mapping(uint256 => address) public issueToken;\n\n\n    // roundID => voteEndTime\n    mapping(uint256 => uint256) private voteEndTime;\n    // roundID => mintEndTime\n    mapping(uint256 => uint256) private mintEndTime;\n\n    // roundID => Project\n    mapping(uint256 => Types.Project) private round;\n    // roundID => UserInfo[]\n    mapping(uint256 => Types.PreSaleLog[]) private preSaleLog;\n    // roundID => total Quantity (total Quantity )\n    mapping(uint256 => uint256) private totalQuantity;\n\n    // roundID => Allow oversold\n    // If the total number is greater than 0, oversold is allowed\n    mapping(uint256 => bool) private allowOversold;\n\n    // roundID => Lp paused\n    mapping(uint256 => bool) private _paused;\n\n\n    //////////////////// vote use///////////////////////////////\n    // userVote roundID => (user => userVoteNum)\n    mapping(uint256 => mapping(address=>uint256)) private userVoteNum;\n    // userPreSaleNum roundID => (user => userPreSaleNum)\n    mapping(uint256 => mapping(address=>uint256)) private userPreSaleNum;\n    // roundID => Types.Vote\n    mapping(uint256 => Types.Vote) private refundVote;\n\n    /// Mint use\n    // userPreSaleNum roundID => (user => mintNum)\n    mapping(uint256 => mapping(address=>uint256)) private mintedNum;\n    // user=> (presaleID => presaleNum)\n    mapping(address => mapping(uint256 => uint256)) private preSaledNum;\n    // roundID=> FundraisingStatus:(true/false)\n    mapping(uint256 => Types.FundraisingStatus) private fundraisingStatus;\n\n    \n    // Refund roundID=> index\n    mapping(uint256 => uint256) private refundIndex;\n\n    // withdrawal\n    // roundID => to => amount\n    mapping(uint256=> mapping(address => uint256)) public withdrawalAllocationTo;\n    // roundID => WithdrawalAllocationTotalAmount\n    mapping(uint256=> uint256) public withdrawalAllocationTotalAmount;\n    \n    // roundID => lock:ture/false\n    mapping(uint256=> bool) private presaleRefundLock;\n\n    event WithdrawalAllocation(uint256 indexed _roundID, address indexed _to, uint256 indexed _amount);\n\n    event Withdraw(address indexed _token, address indexed _to, uint256 indexed _amount);\n        \n    event PreSaleClaimed(uint256 indexed roundID, address indexed sender, uint256 indexed preSaleID, uint256 preSaleNum, uint256 timestamp);\n\n    event ApNFTMint(uint256 indexed roundID, uint256 indexed apNftNo, address indexed apNft, address owner, uint256 mintNum, uint256 timestamp);\n\n    event Refund(uint256 indexed roundID, uint256 indexed preSaleID, address indexed recipient, uint256 totalPayment, uint256 referrerFee, uint256 receiveAmount, uint256 timestamp);\n\n    event SendFundraising(uint256 indexed roundID, uint256 indexed serialNo, address indexed recipient, uint256 referrerFee, uint256 receiveAmount, uint256 timestamp);\n\n    event HardtopQuantity(uint256 indexed roundID, uint256 quantity);\n\n    event Paused(uint256 indexed roundID);\n\n    event Unpaused(uint256 indexed roundID);\n\n    event RefundFundraisingVote(uint256 roundID, address voteUser, uint256 timestamp);\n\n    event PresaleRefund(uint256 roundID);\n    \n    /**\n     * @dev initialize the contract by setting a `admin_` and a `operator_` to the Alloction.\n     */\n    function initialize(address admin_, address operator_) external initializer{\n        __ReentrancyGuard_init();\n        _setupRole(DEFAULT_ADMIN_ROLE, admin_);\n        _grantRole(OPERATOR_ROLE, operator_);\n        maxAlloctionLimit = 2;\n    }\n    \n    receive() external payable {}\n\n    /**\n     * @dev Modifier to make a function callable only when the lp is not paused.\n     *\n     * Requirements:\n     *\n     * - The lp must not be paused.\n     */\n    modifier whenNotPaused(uint256 _roundID) {\n        _requireNotPaused(_roundID);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the lp is paused.\n     *\n     * Requirements:\n     *\n     * - The lp must be paused.\n     */\n    modifier whenPaused(uint256 _roundID) {\n        _requirePaused(_roundID);\n        _;\n    }\n\n    /**\n     * @dev Initializes a new presale round by project.\n     * This function sets up the details for a new launchpad project with a specified ID. \n     * It requires several parameters:\n     * - The target address of the presale.\n     * - The receipt address where funds will be sent.\n     * - The address of the ERC20 token to be used for payments (if any).\n     * - The price of each NFT in the presale.\n     * - The start and end times for the presale round.\n     * - Maximum number of create alloctoin by the project.\n     *\n     * Note: This function can only be called by an account with the `OPERATOR_ROLE`.\n     *\n     * @param _groupID The ID of the presale group to set up.\n     * @param _roundID The ID of the presale round to set up.\n     * @param _target The target address of the presale.\n     * @param _receipt The receipt address where funds will be sent.\n     * @param _payment The address of the ERC20 token to be used for payments (if any).\n     * @param _nftPrice The price of each NFT in the presale.\n     * @param _startTime The start time for the presale round.\n     * @param _endTime The end time for the presale round.\n     * @param _voteEndTime The vote end time for the presale round.\n     * @param _mintEndTime The mint end time for the presale round.\n     * @param _totalQuantity The total quantity for the presale round.\n     */\n    function allocation(uint256 _groupID, uint256 _roundID, address _target, address _receipt, address _payment, uint256 _nftPrice, uint256 _startTime, uint256 _endTime, uint256 _voteEndTime, uint256 _mintEndTime, uint256 _totalQuantity) public onlyRole(OPERATOR_ROLE) {\n\n        require(_roundID > 0, \"Invalid roundID\");\n        require(_endTime > _startTime, \"Invalid start or end time\");\n        require(maxAlloctionLimit >= groupRoundIDs[_groupID].length, \"Project limit of 2\");\n        require(_endTime > block.timestamp, \"Invalid time\");\n        require(_target != address(0), \"Invalid target\");\n        require(_receipt != address(0), \"Invalid receipt\");\n        require(_nftPrice > 0, \"nftPrice > 0\");\n        require(recivedPay[_roundID] == address(0), \"Recive payment address already set\");\n\n        // create allocation\n        Types.Project storage project = round[_roundID];\n        require(project.target == address(0), \"Already setting\");\n\n        project.target = _target;\n        project.receipt = payable(this);\n        project.payment = _payment;\n        project.nftPrice = _nftPrice;\n        project.startTime = _startTime;\n        project.endTime = _endTime;\n\n        groupRoundIDs[_groupID].push(_roundID);\n        roundIDs.push(_roundID);\n        // roundID => voteEndTime\n        voteEndTime[_roundID] = _voteEndTime;\n        // roundID => mintEndTime\n        mintEndTime[_roundID] = _mintEndTime;\n        totalQuantity[_roundID] = _totalQuantity;\n        allowOversold[_roundID] = (_totalQuantity > 0);\n        \n        // roundId => Recive payment address of the project\n        recivedPay[_roundID] = _receipt;\n        \n        fundraisingStatus[_roundID] = Types.FundraisingStatus.Success;\n        emit HardtopQuantity(_roundID, _totalQuantity);\n    }\n\n    /**\n     * @dev Initializes a new presale round by manager.\n     * This function sets up the details for a new launchpad project with a specified ID. It requires several parameters:\n     * - The target address of the presale.\n     * - The receipt address where funds will be sent.\n     * - The address of the ERC20 token to be used for payments (if any).\n     * - The price of each NFT in the presale.\n     * - The start and end times for the presale round.\n     *\n     * Note: This function can only be called by an account with the `OPERATOR_ROLE`.\n     *\n     * @param _roundID The ID of the presale round to set up.\n     * @param _target The target address of the presale.\n     * @param _receipt The receipt address where funds will be sent.\n     * @param _payment The address of the ERC20 token to be used for payments (if any).\n     * @param _nftPrice The price of each NFT in the presale.\n     * @param _startTime The start time for the presale round.\n     * @param _endTime The end time for the presale round.\n     * @param _voteEndTime The end time for the presale round.\n     * @param _mintEndTime The end time for the presale round.\n     */\n    function launchpad(uint256 _roundID, address _target, address payable _receipt, address _payment, uint256 _nftPrice, uint256 _startTime, uint256 _endTime, uint256 _voteEndTime, uint256 _mintEndTime) public onlyRole(OPERATOR_ROLE) {\n        \n        require(_roundID > 0, \"Invalid roundID\");\n        require(_endTime > _startTime, \"Invalid start or end time\");\n        require(_endTime > block.timestamp, \"Invalid time\");\n        require(_target != address(0), \"Invalid target\");\n        require(_receipt != address(0), \"Invalid receipt\");\n        require(_nftPrice > 0, \"nftPrice > 0\");\n        require(recivedPay[_roundID] == address(0), \"Recive payment address already set\");\n\n        Types.Project storage project = round[_roundID];\n        require(project.target == address(0), \"Already setting\");\n\n        project.target = _target;        \n        project.receipt = payable(this);\n        project.payment = _payment;\n        project.nftPrice = _nftPrice;\n        project.startTime = _startTime;\n        project.endTime = _endTime;\n        \n        roundIDs.push(_roundID);\n        // roundID => voteEndTime\n        voteEndTime[_roundID] = _voteEndTime;\n        // roundID => mintEndTime\n        mintEndTime[_roundID] = _mintEndTime;\n        \n        fundraisingStatus[_roundID] = Types.FundraisingStatus.Success;\n        \n        // roundId => Recive payment address of the project\n        recivedPay[_roundID] = _receipt;\n        \n\n    }\n\n    /**\n     * @dev Executes a presale transaction.\n     * This function allows a user to participate in a presale round by purchasing a specific amount of tokens.\n      * The function performs several checks to validate the transaction:\n     * - Checks that the current time is within the project's start and end times.\n     * - Verifies that the `preSaleID` has not been used before by the sender.\n     * - Checks that the `preSaleNum` is greater than 0.\n     * - If the project's payment address is the zero address, it checks that the value sent with the transaction is\n     *   greater or equal to the total cost of the tokens. Any excess value is refunded to the sender.\n     * - If the project's payment address is not the zero address, it checks that no ether was sent with the transaction,\n     *   and transfers the total cost of tokens from the sender to the project's receipt address using an ERC20 token transfer.\n     *\n     * After the checks and transfers, the function increments the project's total sales by `preSaleNum`,\n     * and records the total payment for the `preSaleID` of the sender.\n     *\n     * Finally, it emits a `PreSaleClaimed` event.\n     *\n     * @param roundID The ID of the Project.\n     * @param preSaleID The ID of the presale.\n     * @param preSaleNum The number of tokens to purchase in the presale.\n     * @param voteNum  Latest number of platform coins held by users, converted votes number.\n     */\n    function preSale(uint256 roundID, uint256 preSaleID, uint256 preSaleNum, uint256 voteNum) public payable whenNotPaused(roundID) nonReentrant {\n        Types.Project storage project = round[roundID];\n\n        // Verify time\n        require(project.startTime <= block.timestamp, \"The LaunchPad activity has not started\");\n        require(project.endTime >= block.timestamp, \"The LaunchPad activity has ended\");\n\n        // If the total number is greater than 0, oversold is allowed\n        if(allowOversold[roundID]){\n            require(project.totalSales + preSaleNum <= totalQuantity[roundID], \"The LaunchPad activity has sold out\");\n            if(project.totalSales + preSaleNum == totalQuantity[roundID]){\n                project.endTime = block.timestamp;\n            }\n        }\n\n        // Verify preSaleID and preSaleNum\n        require(project.preSaleRecords[msg.sender][preSaleID] == 0, \"Duplicate preSaleID\");\n        require(preSaleNum > 0, \"preSaleNum>0\");\n        // Receipt token && Refund token\n        uint256 total = project.nftPrice * preSaleNum;\n        \n        if (project.payment == address(0)) {\n            require(msg.value >= total, \"Insufficient token\");\n            uint256 _refund = msg.value - total;\n            if (_refund > 0) {\n                // Refund the excess token\n                payable(msg.sender).transfer(_refund);\n            }\n\n            // Transfer the total payment to the project receipt address\n            project.receipt.transfer(total);\n        } else {\n            require(msg.value == 0, \"Needn't pay mainnet token\");\n\n            // Transfer the total payment from the sender to the project receipt address\n            IERC20(project.payment).safeTransferFrom(msg.sender, project.receipt, total);\n        }\n\n        // Increment the total sales for the project\n        unchecked{\n            project.totalSales += preSaleNum;\n        }\n\n        // Record the total payment for the preSaleID of the sender\n        project.preSaleRecords[msg.sender][preSaleID] = total;\n        preSaledNum[msg.sender][preSaleID] = preSaleNum;\n\n\n        // User secondary voting\n        uint256 userPreSaleTotalNum = userPreSaleNum[roundID][msg.sender] + preSaleNum; \n        uint256 beforeVoteNum = userVoteNum[roundID][msg.sender];\n        uint256 lastVoteNum;\n        if(voteNum > userPreSaleTotalNum){\n            lastVoteNum = userPreSaleTotalNum;\n        }else{\n            lastVoteNum = voteNum;\n        }\n\n        // total vote number\n        refundVote[roundID].totalVote = refundVote[roundID].totalVote.add(lastVoteNum).sub(beforeVoteNum);\n        // user latest vote number\n        userVoteNum[roundID][msg.sender] = lastVoteNum;\n        // user pre sale total number\n        userPreSaleNum[roundID][msg.sender] = userPreSaleTotalNum;\n\n        \n        // roundID => PreSaleLog[](preSaleID,preSaleUser,paymentTime,preSaleNum)\n        preSaleLog[roundID].push(Types.PreSaleLog(preSaleID,msg.sender,block.timestamp,preSaleNum));\n\n\n        if(autoMintApNFT && project.target != address(0)){\n            apNftMint(roundID, project.target, preSaleID);\n        }\n\n        emit PreSaleClaimed(roundID, msg.sender, preSaleID, preSaleNum, block.timestamp);\n    }\n\n    /**\n     * @dev Fundraising refund voting. \n     * If successful, the funds will be disbursed; if unsuccessful, a refund will be issued.\n     *\n     *\n     * @param roundID The ID of the presale round.\n     * @param voteUser The voteuser of the presale user.\n     */\n\n    function refundFundraisingVote(uint256 roundID, address voteUser) public nonReentrant onlyRole(OPERATOR_ROLE){\n\n        require(roundID > 0, \"project is empty\");\n        Types.Project storage project = round[roundID];\n        // Verify time\n        require(project.startTime <= block.timestamp, \"Activity has not started\");\n        require(project.endTime <= block.timestamp, \"Fundraising Vote has not started\");\n        require(voteEndTime[roundID] > block.timestamp, \"Fundraising Vote has ended\");\n\n        Types.Vote storage vote = refundVote[roundID];\n        uint256 voteNum = userVoteNum[roundID][voteUser];\n        require(voteNum > 0, \"vote num is 0\");\n        // Number of dissenting votes\n        vote.voteCount += voteNum;\n        userVoteNum[roundID][voteUser] = 0;\n        vote.voteRatio = SafeMath.div(SafeMath.mul(vote.voteCount, BASE_PERCENT), vote.totalVote);\n\n        // If the number of dissenting votes is greater than 50%, the fundraising has failed.\n        if(vote.voteRatio > 50){\n            fundraisingStatus[roundID] = Types.FundraisingStatus.Fail;\n        } else {\n            //  If the number of dissenting votes is less than 50%, the fundraising is successful.\n            fundraisingStatus[roundID] = Types.FundraisingStatus.Success;\n        }\n\n        // voteEvent\n        emit RefundFundraisingVote(roundID, voteUser, block.timestamp);\n    }\n\n    function apNftMint(uint256 roundID, address target, uint256 preSaleID) internal virtual {\n        address user = msg.sender;\n        uint256 preSaleNum =  getPreSaleNum(user,preSaleID);\n        require(preSaleNum > 0, \"Pre sale quantity is 0\");\n        require(target != address(0), \"The project does not exist\");\n\n        // function batchMint(address _to, uint256 _amount) external;\n        IApNFT(target).batchMint(user, preSaleNum);\n        \n        mintedNum[roundID][user] = mintedNum[roundID][user] + preSaleNum;\n\n        emit ApNFTMint(roundID, preSaleID, target, msg.sender, preSaleNum, block.timestamp);\n        \n    }\n\n    /**\n     * @dev Initiates refunds for a special project.\n     * This function allows the project owner to refund amounts to multiple recipients.\n     * It requires the round ID, the source address of the funds, an array of recipient addresses and an array of amounts.\n     *\n     * The function performs several checks to validate the parameters:\n     * - Verifies that the length of the recipients array is equal to the length of the amounts array.\n     *\n     * After the checks, it retrieves the ERC20 token used for payments in the presale round,\n     * and for each recipient in the array, it transfers the corresponding amount from the source address to the recipient.\n     * It then emits a `Refund` event for each transfer.\n     *\n     * Note: This function can only be called by an account with appropriate permissions (typically the contract owner).\n     *\n     * @param roundID The ID of the presale round.\n     * @param _Referrer An array of addresses to refund.\n     * @param _ReferrerFee An array of _ReferrerFee to refund to each recipient.\n     */\n    function presaleRefund(uint256 roundID, address payable _Referrer, uint256 _ReferrerFee) public payable nonReentrant onlyRole(OPERATOR_ROLE){\n\n        require(roundID > 0, \"project is empty\");\n        // Verify time\n        if(fundraisingStatus[roundID] != Types.FundraisingStatus.Fail){\n            return;\n        }\n        \n        if(presaleRefundLock[roundID]){\n            return;\n        }\n        presaleRefundLock[roundID] = true;\n        // Get the project associated with the given roundID\n        Types.Project storage project = round[roundID];\n        Types.PreSaleLog[] memory _logs = preSaleLog[roundID];\n\n        uint256 limit = 1000;\n        if(MAX_REFUND_LIMIT > 0 && MAX_REFUND_LIMIT < limit){\n            limit = MAX_REFUND_LIMIT;\n        }\n        uint256 lastLogs = _logs.length - refundIndex[roundID];\n        if(limit > lastLogs){\n            limit = lastLogs;\n        }\n        \n        if (refundIndex[roundID] >= _logs.length) {\n            return;\n        }\n\n        uint256 total;\n        if (project.payment == address(0)) {\n            // Iterate over each recipient and transfer the corresponding amount of tokens\n            uint256 i;\n            for (; i < limit; i++) {\n                Types.PreSaleLog memory _log = _logs[refundIndex[roundID]];\n                // Record the total payment for the preSaleID of the sender\n                uint256 totalPayment = project.preSaleRecords[_log.preSaleUser][_log.preSaleID];\n                _refundEth(roundID, _log.preSaleID, _Referrer,_ReferrerFee,_log.preSaleUser,totalPayment);\n                total += totalPayment;\n                refundIndex[roundID]++;\n            }\n        } else {\n            require(msg.value == 0, \"Needn't pay mainnet token\");\n            // Iterate over each recipient and transfer the corresponding amount of tokens\n            uint256 i;\n            for (; i < limit; i++) {\n                 Types.PreSaleLog memory _log = _logs[refundIndex[roundID]];\n                // Record the total payment for the preSaleID of the sender\n                uint256 totalPayment = project.preSaleRecords[_log.preSaleUser][_log.preSaleID];\n                _refundTT(roundID, _log.preSaleID, _Referrer, _ReferrerFee, project.payment, _log.preSaleUser, totalPayment);\n                total += totalPayment;\n                refundIndex[roundID]++;\n                \n            }\n        }\n\n        withdrawalAllocationTotalAmount[roundID] += total;\n\n        presaleRefundLock[roundID] = false;\n        emit PresaleRefund(roundID);\n    }\n\n    function _refundEth(uint256 roundID, uint256 preSaleID, address payable _Referrer, uint256 _ReferrerFee, address receiver, uint256 totalPayment) internal virtual{\n        \n        require(address(this).balance >= totalPayment, \"Insufficient amount token\");\n        /* Amount that will be received by user (for Ether). */\n        uint256 receiveAmount = totalPayment;\n        // Referrer Fee\n        uint256 referrerFee;\n        if (_Referrer!=address(0) && _ReferrerFee > 0) {\n            referrerFee = SafeMath.div(SafeMath.mul(_ReferrerFee, totalPayment), INVERSE_BASIS_POINT);\n            receiveAmount = SafeMath.sub(receiveAmount, referrerFee);\n            TransferETH(payable(_Referrer), referrerFee);\n        }\n\n        TransferETH(payable(receiver), receiveAmount);\n        \n        emit Refund(roundID, preSaleID, receiver, totalPayment, referrerFee, receiveAmount, block.timestamp);\n    }\n\n    function _refundTT(uint256 roundID, uint256 preSaleID, address payable _Referrer, uint256 _ReferrerFee, address token, address receiver, uint256 totalPayment) internal virtual{\n        require(IERC20(token).balanceOf(address(this)) >= totalPayment, \"Insufficient amount token\");\n        /* Amount that will be received by user (for Token). */\n        uint256 receiveAmount = totalPayment;\n        // Referrer Fee\n        uint256 referrerFee;\n        if (_Referrer!=address(0) && _ReferrerFee > 0) {\n            referrerFee = SafeMath.div(SafeMath.mul(_ReferrerFee, totalPayment), INVERSE_BASIS_POINT);\n            receiveAmount = SafeMath.sub(receiveAmount, referrerFee);\n            TT(token, payable(_Referrer), referrerFee);\n        }\n\n        TT(token, payable(receiver), receiveAmount);\n\n        emit Refund(roundID, preSaleID, receiver, totalPayment, referrerFee, receiveAmount, block.timestamp);\n    }\n\n    /**\n     * @dev The project party releases the fundraising funds\n     *\n     * @param roundID The ID of the alloction round.\n     * @param _serialNo release serial no.\n     * @param _amount release amount.\n     */\n    function sendFundraising(uint256 roundID, uint256 _serialNo, uint256 _amount) public payable nonReentrant onlyRole(OPERATOR_ROLE){\n\n        require(roundID > 0, \"project is empty\");\n        require(_serialNo > 0, \"serialNo is empty\");\n        require(_amount > 0, \"The amount must be greater than 0\");\n        require(recivedPay[roundID] != address(0), \"project pay address is empty\");\n        // Verify time\n        if(fundraisingStatus[roundID] != Types.FundraisingStatus.Success){\n            return;\n        }\n\n        require(recivePayTimes[roundID][_serialNo] == 0, \"Repeated sending of current amount\");\n        \n        // Get the project associated with the given roundID\n        Types.Project storage project = round[roundID];\n                  \n        uint256 totalAmount = project.nftPrice * project.totalSales;\n        withdrawalAllocationTotalAmount[roundID] += _amount;\n        require(totalAmount >= withdrawalAllocationTotalAmount[roundID], \"Exceeding the maximum withdrawal amount\");\n        \n        /* Amount that will be received by user (for Ether). */\n        uint256 receiveAmount = _amount;\n        uint256 referrerFee;\n        if (project.payment == address(0)) {\n            require(address(this).balance >= _amount, \"Insufficient amount token\");\n            // Referrer Fee\n            if (feeTo!=address(0) && fee > 0) {\n                referrerFee = SafeMath.div(SafeMath.mul(fee, _amount), INVERSE_BASIS_POINT);\n                receiveAmount = SafeMath.sub(receiveAmount, referrerFee);\n                TransferETH(payable(feeTo), referrerFee);\n            }\n            TransferETH(payable(recivedPay[roundID]), receiveAmount);\n        } else {\n            require(msg.value == 0, \"Needn't pay mainnet token\");\n            // Iterate over each recipient and transfer the corresponding amount of tokens\n            IERC20 _token = IERC20(project.payment);\n            require(_token.balanceOf(address(this)) >= _amount, \"Insufficient amount token\");\n            // Referrer Fee\n            if (feeTo!=address(0) && fee > 0) {\n                referrerFee = SafeMath.div(SafeMath.mul(fee, _amount), INVERSE_BASIS_POINT);\n                receiveAmount = SafeMath.sub(receiveAmount, referrerFee);\n                TT(project.payment, payable(feeTo), referrerFee);\n            }\n            TT(project.payment, payable(recivedPay[roundID]), receiveAmount);\n        }\n\n        sendFundraisings[roundID].push(Types.SendFundraisingLog(block.timestamp, _amount, receiveAmount));\n        recivePayTimes[roundID][_serialNo] = sendFundraisings[roundID].length;\n\n        emit SendFundraising(roundID, _serialNo, recivedPay[roundID], referrerFee, receiveAmount,  block.timestamp);\n    }\n\n    function getFundraisingLength(uint256 roundID) public view returns (uint256){\n        return sendFundraisings[roundID].length;\n    }\n\n    function getFundraisingByNo(uint256 roundID, uint256 serialNo) public view returns (uint256, uint256,uint256,uint256){\n        uint256 index = recivePayTimes[roundID][serialNo];\n        if(index > 0){\n            index -= 1;\n        }\n        Types.SendFundraisingLog storage log = sendFundraisings[roundID][index];\n        return (index, log.sendTime, log.amount, log.receiveAmount);\n    }\n\n    function getFundraisingByIndex(uint256 roundID, uint256 index) public view returns (uint256, uint256,uint256,uint256){\n        Types.SendFundraisingLog storage log = sendFundraisings[roundID][index];\n        return (index, log.sendTime, log.amount, log.receiveAmount);\n    }\n\n    // Returns project details by the roundID.\n    function getProject(uint256 roundID) external view returns (address, address, address, uint256, uint256, uint256, uint256){\n        Types.Project storage project = round[roundID];\n        return (project.target, project.receipt, project.payment, project.nftPrice, project.totalSales, project.startTime, project.endTime);\n    }\n\n    // Returns project totalSales by the roundID.\n    function getProjectTotalSales(uint256 roundID) external view returns (uint256){\n        Types.Project storage project = round[roundID];\n        return project.totalSales;\n    }\n\n    // Returns project preSaleRecords by the roundID.\n    function getProjectPreSale(uint256 roundID, address user, uint256 preSaleID) external view returns (uint256){\n        Types.Project storage project = round[roundID];\n        return project.preSaleRecords[user][preSaleID];\n    }\n\n    // Returns project vote Records by the roundID.\n    function getProjectVote(uint256 roundID) external view returns (uint256, uint256, uint256){\n        Types.Vote storage vote = refundVote[roundID];\n        \n        // (Oppose votes, total votes, vote ratio)\n        return (vote.voteCount, vote.totalVote, vote.voteRatio);\n    }\n\n\n    // Returns project details by the roundID.\n    function getAlloctionInfo(uint256 _roundID) external view returns (Types.AlloctionInfo memory info){\n        Types.Project storage project = round[_roundID];\n    \n        info = Types.AlloctionInfo(\n            project.target, \n            project.receipt, \n            project.payment, \n            project.nftPrice, \n            project.totalSales, \n            project.startTime, \n            project.endTime,\n            totalQuantity[_roundID],\n            voteEndTime[_roundID],\n            mintEndTime[_roundID],\n            issueToken[_roundID],\n            recivedPay[_roundID],\n            Types.AllocStatus(\n                uint8(fundraisingStatus[_roundID]),\n                isAllowOversold(_roundID),\n                isSoldOut(_roundID),\n                _paused[_roundID]\n            )\n        );\n        return info;\n    }\n\n    //  set project nft target by the roundID.\n    function setApNFTTarget(uint256 roundID, address _nftTarget) public onlyRole(OPERATOR_ROLE){\n        require(_nftTarget != address(0), \"Invalid nft target\");\n        Types.Project storage project = round[roundID];\n        project.target = _nftTarget;\n    }\n\n    //  Returns project target by the roundID.\n    function getApNFTTarget(uint256 roundID) public view returns (address){\n        Types.Project storage project = round[roundID];\n        return project.target;\n    }\n    // Returns project preSale num by the preSaleID and user.\n    function getPreSaleNum(address user, uint256 preSaleID) public view returns (uint256){\n        return preSaledNum[user][preSaleID];\n    }\n\n    // Returns project preSale num by the user and ronudID.\n    function getPreSaleNumByUser(address user, uint256 roundID) public view returns (uint256){\n        return userPreSaleNum[roundID][user];\n    }\n\n    // Returns project preSale minted num by the user.\n    function getMintNum(address user, uint256 roundID) public view returns (uint256){\n        return mintedNum[roundID][user];\n    }\n\n    // Returns project preSale minted num by the user.\n    function getMintInfo(address user, uint256 roundID) public view returns (uint256 preSaleNum, uint256 mintNum){\n        return (userPreSaleNum[roundID][user], mintedNum[roundID][user]);\n    }\n\n    /**\n     * @dev Executes a function call on another contract.\n     * @param dest The address of the contract to call.\n     * @param value The amount of ether/matic/mainnet token to send with the call.\n     * @param func The function signature and parameters to call.\n     */\n    function execute(address dest, uint256 value, bytes calldata func) external onlyRole(OPERATOR_ROLE) {\n        _call(dest, value, func);\n    }\n\n    /**\n     * @dev Executes a batch of function calls on multiple contracts.\n     * This function allows this contract to execute a batch of function calls on multiple contracts by specifying\n     * an array of destination addresses, an array of values to send with each call, and an array of function signatures\n     * and parameters for each call.\n     * @param dest An array of addresses of the contracts to call.\n     * @param value An array of amounts of ether/matic/mainnet token to send with each call.\n     * @param func An array of function signatures and parameters to call for each destination.\n     */\n    function executeBatch(address[] calldata dest, uint256[] calldata value, bytes[] calldata func) external onlyRole(OPERATOR_ROLE) {\n        require(dest.length == func.length && (value.length == 0 || value.length == func.length), \"Wrong array lengths\");\n        if (value.length == 0) {\n            for (uint256 i = 0; i < dest.length; i++) {\n                _call(dest[i], 0, func[i]);\n            }\n        } else {\n            for (uint256 i = 0; i < dest.length; i++) {\n                _call(dest[i], value[i], func[i]);\n            }\n        }\n    }\n\n    /**\n     * @dev Executes a low-level call to another contract.\n     * This internal function allows the contract to execute a low-level call to another contract,\n     * by specifying the target address, the value to send with the call, and the data to send.\n     *\n     * It performs the call and checks if it was successful. If not, it reverts the transaction and returns\n     * the error message from the failed call.\n     *\n     * Note: Use this function with caution as low-level calls can be dangerous.\n     *\n     * @param target The address of the contract to call.\n     * @param value The amount of ether/mainnet token to send with the call.\n     * @param data The data to send with the call.\n     */\n    function _call(address target, uint256 value, bytes memory data) internal {\n        (bool success, bytes memory result) = target.call{value: value}(data);\n        if (!success) {\n            assembly {\n                revert(add(result, 32), mload(result))\n            }\n        }\n    }\n\n    /**\n     * @dev Set the total pre-sale quantity. \n     * If the total number is greater than 0, oversold is allowed\n     * @param _roundID project Id\n     * @param _totalQuantity total number\n     */\n    function setTotalQuantity(uint256 _roundID, uint256 _totalQuantity) public onlyRole(OPERATOR_ROLE) {\n        Types.Project storage project = round[_roundID];\n        require(project.target != address(0), \"Project does not exist\");\n        require(project.totalSales <= _totalQuantity, \"Project total quantity needs to be greater than the total pre-sale amount\");\n        totalQuantity[_roundID] = _totalQuantity;\n        allowOversold[_roundID] = (_totalQuantity > 0);\n        \n        emit HardtopQuantity(_roundID, _totalQuantity);\n    }\n\n    // Returns project TotalQuantity by the roundID.\n    function getTotalQuantity(uint256 _roundID) external view returns (uint256){\n        return totalQuantity[_roundID];\n    }\n\n    // Returns project allowOversold by the roundID.\n    function isAllowOversold(uint256 _roundID) public view returns (bool){\n        return allowOversold[_roundID];\n    }\n\n    // Returns project SoldOut status by the roundID.\n    function isSoldOut(uint256 _roundID) public view returns (bool){\n        return totalQuantity[_roundID] > 0 && round[_roundID].totalSales == totalQuantity[_roundID];\n    }\n\n    // Returns project PreSaleLog[] by the roundID.\n    function getPreSaleLog(uint256 _roundID) external view returns (Types.PreSaleLog[] memory){\n        return preSaleLog[_roundID];\n    }\n\n    // Returns project status(totalSales,totalQuantity,allowOversold,SoldOut,paused) by the roundID.\n    function getLpStatus(uint256 _roundID) external view returns (uint256, uint256, bool, bool, bool){\n        bool soldOut = totalQuantity[_roundID] > 0 && round[_roundID].totalSales == totalQuantity[_roundID];\n        return (round[_roundID].totalSales, totalQuantity[_roundID], allowOversold[_roundID], soldOut, _paused[_roundID]);\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The lp must not be paused.\n     */\n    function pause(uint256 _roundID) public whenNotPaused(_roundID) onlyRole(OPERATOR_ROLE)  {\n        _paused[_roundID] = true;\n        emit Paused(_roundID);\n    }\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The lp must be paused.\n     */\n    \n    function unpause(uint256 _roundID) public whenPaused(_roundID) onlyRole(OPERATOR_ROLE)  {\n        _paused[_roundID] = false;\n        emit Unpaused(_roundID);\n    }\n\n    /**\n     * @dev Returns true if the lp is paused, and false otherwise.\n     */\n    function paused(uint256 _roundID) public view virtual returns (bool) {\n        return _paused[_roundID];\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused(uint256 _roundID) internal view virtual {\n        require(!paused(_roundID), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused(uint256 _roundID) internal view virtual {\n        require(paused(_roundID), \"Pausable: not paused\");\n    }\n    \n    // Set the address for receiving transaction fees, and set this address to enable transaction fees\n    function setFeeTo(address _feeTo) external onlyRole(OPERATOR_ROLE) {\n        feeTo = _feeTo;\n    }\n\n    // Set project funding handling fees\n    function setFee(uint256 _fee) external onlyRole(OPERATOR_ROLE) {\n        fee = _fee;\n    }\n\n    // Set up automatic Mint NFT to the user's address after pre-sale of the project\n    function setAutoMint(bool _autoMint) public onlyRole(OPERATOR_ROLE) {\n        autoMintApNFT = _autoMint;\n    }\n\n    // Set project NFT mint quantity\n    function setMintNum(uint256 _roundID,address user, uint256 preSaleNum) public onlyRole(OPERATOR_ROLE) {\n        mintedNum[_roundID][user] = preSaleNum;\n    }\n    \n    // Set Project - Payment Acceptance Address\n    function setPaymentReceipt(uint256 _roundID, address _receipt) public onlyRole(OPERATOR_ROLE) { \n        Types.Project storage project = round[_roundID];\n        require(project.target != address(0), \"Project does not exist\");\n        require(_receipt != address(0), \"Receipt address is empty\");\n        project.receipt = payable(_receipt);\n    }\n\n    // Set Project - Pre sale End Time\n    function setEndTime(uint256 _roundID, uint256 _endTime) public onlyRole(OPERATOR_ROLE) { \n        Types.Project storage project = round[_roundID];\n        require(project.target != address(0), \"Project does not exist\");\n        project.endTime = _endTime;\n    }\n\n    // Set Project - Second Voting End Time\n    function setVoteEndTime(uint256 _roundID, uint256 _voteEndTime) public onlyRole(OPERATOR_ROLE) {\n        Types.Project storage project = round[_roundID];\n        require(project.target != address(0), \"Project does not exist\");\n        voteEndTime[_roundID] = _voteEndTime;\n    }\n\n    // Set project - mint end time\n    function setMintEndTime(uint256 _roundID, uint256 _mintEndTime) public onlyRole(OPERATOR_ROLE) {\n        Types.Project storage project = round[_roundID];\n        require(project.target != address(0), \"Project does not exist\");\n        mintEndTime[_roundID] = _mintEndTime;\n    }\n\n    // Set project - issue token\n    function setIssueToken(uint256 _roundID, address _issueToken) public onlyRole(OPERATOR_ROLE) {\n        Types.Project storage project = round[_roundID];\n        require(project.target != address(0), \"Project does not exist\");\n        issueToken[_roundID] = _issueToken;\n    }\n\n    // get project - issue token\n    function getIssueToken(uint256 _roundID) public view returns (address) {\n       return issueToken[_roundID];\n    }\n\n    // Returns project voteEndTime num by the _roundID.\n    function getVoteEndTime(uint256 _roundID) public view returns (uint256){\n        return voteEndTime[_roundID];\n    }\n    // Returns project mintEndTime num by the _roundID.\n    function getMintEndTime(uint256 _roundID) public view returns (uint256){\n        return mintEndTime[_roundID];\n    }\n\n    // Returns project fundraisingStatus num by the _roundID.\n    function getFundraisingStatus(uint256 _roundID) public view returns (uint8){\n        return uint8(fundraisingStatus[_roundID]);\n    }\n\n    // Set project - fundraising status\n    function setFundraisingStatus(uint256 _roundID, uint8 _fundraisingStatus) public onlyRole(OPERATOR_ROLE) {\n        fundraisingStatus[_roundID] = Types.FundraisingStatus(_fundraisingStatus);\n    }\n\n    // get project - vote num\n    function getVoteNum(uint256 _roundID, address user) public view returns (uint256) {\n        return userVoteNum[_roundID][user];\n    }\n\n    // Set project - recived pay address\n    function setRecivedPay(uint256 _roundID, address _newRecivedPay) public onlyRole(OPERATOR_ROLE) {\n        recivedPay[_roundID] = _newRecivedPay;\n    }\n\n    function TransferETH(address payable _receiver, uint256 _Amount) internal {\n        // assert(payable(_receiver).send(_Amount));\n        // This forwards all available gas. Be sure to check the return value!\n        (bool success, ) = _receiver.call{value: _Amount}(\"\");\n        require(success, \"Transfer failed.\");\n\n    }\n\n    function TT(address _tokenAddress, address payable _receiver, uint256 _Amount) internal {\n        IERC20(_tokenAddress).safeTransfer(_receiver, _Amount);\n    }\n\n    // withdraw eth\n    function withdraw(address payable _to) public onlyRole(ASSET_ROLE) {\n        uint256 balance = address(this).balance;\n        // _to.transfer(balance);\n        (bool success, ) = _to.call{value: balance}(\"\");\n        require(success, \"Transfer failed.\");\n        emit Withdraw(address(0), _to, balance);\n    }\n\n    function thisBalance() public view returns (uint256){\n        return address(this).balance;\n    }\n\n    /**\n     * @dev Returns the amount of tokens that can be withdrawn by the owner.\n     * @return the amount of tokens\n     */\n    function getWithdrawableAmount(address _token) public view returns (uint256) {\n        return IERC20(_token).balanceOf(address(this));\n    }\n\n    // withdraw token\n    function withdrawToken(address _token, address _to) public onlyRole(ASSET_ROLE) {\n        uint256 balance = getWithdrawableAmount(_token);\n        IERC20(_token).safeTransfer(_to, balance);\n        emit Withdraw(_token, _to, balance);\n    }\n\n    // withdraw allocation eth\n    function withdrawalAllocation(uint256 _roundID, address payable _to, uint256 _amount) public onlyRole(ALLOCATION_ASSET_ROLE) {\n        require(_roundID > 0, \"Params roundID is empty\");\n        require(_to != address(0), \"Params to is empty\");\n        require(_amount > 0, \"Params amount is empty\");\n        Types.Project storage project = round[_roundID];\n        \n        // total pre-sale amount\n        uint256 totalAmount = SafeMath.mul(project.nftPrice, project.totalSales);\n        require(totalAmount > 0, \"No total pre-sale amount\");\n        withdrawalAllocationTotalAmount[_roundID] += _amount;\n        require(totalAmount >= withdrawalAllocationTotalAmount[_roundID], \"Exceeding the maximum withdrawal amount\");\n\n        if(project.payment == address(0)){\n            uint256 balance = address(this).balance;\n            require(balance >= _amount, \"The withdrawal amount for this allocation is insufficient\");\n            // _to.transfer(_amount);\n            \n            (bool success, ) = _to.call{value: _amount}(\"\");\n            require(success, \"Transfer failed.\");\n        } else {\n            uint256 balance = IERC20(project.payment).balanceOf(address(this));\n            require(balance >= _amount, \"The withdrawal token amount for this allocation is insufficient\");\n            IERC20(project.payment).safeTransfer(_to, _amount);\n        }\n        withdrawalAllocationTo[_roundID][_to] += _amount;\n        emit WithdrawalAllocation(_roundID, _to, _amount);\n    }\n\n    /**\n     * @dev Returns the allocation amount of tokens that can be withdrawn by the owner.\n     * @return the amount of tokens\n     */\n    function getAllocationWithdrawableAmount(uint256 _roundID) public view returns (uint256) {\n        Types.Project storage project = round[_roundID];\n        // total pre-sale amount\n        uint256 totalAmount = SafeMath.mul(project.nftPrice, project.totalSales);\n        return totalAmount.sub(withdrawalAllocationTotalAmount[_roundID]);\n    }\n\n    // Set the maximum number of projects created by the project team\n    function setMaxAlloctionLimit(uint8 _limit) public onlyRole(OPERATOR_ROLE) {\n        maxAlloctionLimit =_limit;\n    }\n\n    // Set the maximum number of refund \n    function setMaxRefundLimit(uint8 _limit) public onlyRole(OPERATOR_ROLE) {\n        MAX_REFUND_LIMIT =_limit;\n    }\n}\n"
    },
    "contracts/libraries/Types.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title Types\n * @author CORESKY Protocol\n *\n * @notice A standard library of data types used throughout the CORESKY Protocol.\n */\nlibrary Types {\n    /**\n     * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\n     *\n     * @param signer The address of the signer. Specially needed as a parameter to support EIP-1271.\n     * @param v The signature's recovery parameter.\n     * @param r The signature's r parameter.\n     * @param s The signature's s parameter.\n     * @param deadline The signature's deadline.\n     */\n    struct EIP712Signature {\n        address signer;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        uint256 deadline;\n    }\n\n    struct Proposal{\n        //Voting number\n        uint256 serialNo;\n        //Project address\n        address projectAddr;\n        //Support quantity\n        uint256 supportCount;\n        //Oppose quantity\n        uint256 opposeCount;\n        //Voting ratio\n        uint256 voteRatio;\n        //Expiration date\n        uint256 expireTime;\n        //Total payment amount\n        uint256 amount;\n    }\n\n    struct Vote{\n        //Oppose quantity\n        uint256 voteCount;\n        //Total number of votes\n        uint256 totalVote;\n        //Voting ratio\n        uint256 voteRatio;\n    }\n\n    /**\n     * @notice An enum containing the different states the protocol can be in, limiting certain actions.\n     *\n     * @param Unpaused The fully unpaused state.\n     * @param PublishingPaused The state where only publication creation functions are paused.\n     * @param Paused The fully paused state.\n     */\n    enum ProtocolState {\n        Unpaused,\n        PublishingPaused,\n        Paused\n    }\n\n    struct Project {\n        address target;             // nft or deposit or any contract\n        address payable receipt;    // receive payment\n        address payment;            // ETH or ERC20\n        uint256 nftPrice;           // nft nftPrice\n        uint256 totalSales;         // nft totalSales\n        uint256 startTime;          // start\n        uint256 endTime;            // end\n        // user=> presaleID => total\n        mapping(address => mapping(uint256 => uint256)) preSaleRecords;  //preSale records\n    }\n\n    struct PreSaleLog {\n        uint256 preSaleID;\n        address preSaleUser;  \n        uint256 paymentTime; \n        uint256 preSaleNum;\n    }\n\n    struct VestingLog {\n        uint256 unlockIndex;\n        uint256[] unlockTime; \n        uint256[] unlockNum;\n    }\n\n    struct SendFundraisingLog {\n        uint256 sendTime; \n        uint256 amount;\n        uint256 receiveAmount;\n    }\n\n    struct IssueToken {\n        address issueToken;\n        uint256 chainId;\n        uint256 nftContainNum;\n    }\n\n    enum FundraisingStatus {\n        None,\n        Success,\n        Fail\n    }\n\n    struct AllocStatus {\n        uint8 fundraisingStatus;    // 0-none;1-success;2-fail\n        bool isAllowOversold;       // AllowOversold: true/false\n        bool isSoldOut;             // SoldOut:true/false\n        bool paused;                // paused:true/false\n    }\n\n    struct AlloctionInfo {\n        address target;             // nft or deposit or any contract\n        address receipt;            // receive payment\n        address payment;            // ETH or ERC20\n        uint256 nftPrice;           // nft nftPrice\n        uint256 totalSales;         // nft totalSales\n        uint256 startTime;          // presale start\n        uint256 endTime;            // presale end\n        uint256 totalQuantity;      // total\n        uint256 voteEndTime;        // vote end\n        uint256 mintEndTime;        // mint end\n        address issueToken;         // issue token address\n        address recivedPay;         // Recive payment address of the project fundraising\n        AllocStatus status;\n    }\n\n}\n"
    },
    "contracts/interfaces/IApNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IApNFT {\n\n    function initialize(string memory name_,string memory symbol_,string memory baseUri_) external;\n\n    function mint(address _to, uint256 _tokenId) external;\n\n    function batchMint(address _to, uint256 _amount) external;\n\n    function ownerBatchMint(address[] calldata _tos) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // �� `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // �� `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    }
  }
}}